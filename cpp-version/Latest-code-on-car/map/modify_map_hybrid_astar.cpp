#include "global_variable.h"
#include "global_function.h"

namespace byd_apa_plan{
    //
    // double Car_x[3664] = {3.8443, 3.8438, 3.843, 3.8419, 3.8407, 3.8392, 3.8374, 3.8364, 3.8349, 3.8328, 3.83, 3.8266, 3.8225, 3.8179, 3.8153, 3.8074, 3.7987, 3.7893, 3.7791, 3.7681, 3.7564, 3.7446, 3.7317, 3.7174, 3.7015, 3.6842, 3.6655, 3.6456, 3.6244, 3.6061, 3.5869, 3.5668, 3.5458, 3.524, 3.5014, 3.4865, 3.4602, 3.4326, 3.4041, 3.3749, 3.3452, 3.3152, 3.3131, 3.2831, 3.2532, 3.2232, 3.1932, 3.1633, 3.1333, 3.1293, 3.0993, 3.0693, 3.0393, 3.0094, 2.9794, 2.9494, 2.9194, 2.8894, 2.8594, 2.8474, 2.8174, 2.7874, 2.7574, 2.7274, 2.6974, 2.6674, 2.6374, 2.6074, 2.5774, 2.5474, 2.5174, 2.4874, 2.4574, 2.4275, 2.3975, 2.3675, 2.3489, 2.319, 2.289, 2.2591, 2.2291, 2.1991, 2.1691, 2.1392, 2.1092, 2.0792, 2.0492, 2.0192, 1.9892, 1.9592, 1.9292, 1.8992, 1.8692, 1.8392, 1.8092, 1.7792, 1.7492, 1.7192, 1.6892, 1.6831, 1.6531, 1.6231, 1.5931, 1.5631, 1.5331, 1.5031, 1.4731, 1.4431, 1.4131, 1.3831, 1.3531, 1.3231, 1.2931, 1.2631, 1.2331, 1.2031, 1.1731, 1.1431, 1.1131, 1.0831, 1.0531, 1.0231, 0.99309, 0.96309, 0.93309, 0.90309, 0.8731, 0.8431, 0.8131, 0.78311, 0.75311, 0.72312, 0.69312, 0.66313, 0.63314, 0.60314, 0.5756, 0.54574, 0.51586, 0.48597, 0.45607, 0.42616, 0.39623, 0.3663, 0.33636, 0.3064, 0.27644, 0.24647, 0.2165, 0.18652, 0.15653, 0.12654, 0.096546, 0.066549, 0.036551, 0.0065512, -0.023449, -0.053448, -0.083447, -0.11344, -0.14344, -0.17343, -0.20341, -0.2334, -0.26337, -0.28629, -0.31626, -0.3462, -0.37609, -0.40593, -0.4357, -0.4654, -0.46845, -0.49796, -0.52739, -0.55671, -0.58593, -0.61503, -0.63509, -0.6626, -0.68908, -0.71436, -0.73831, -0.76075, -0.77728, -0.7989, -0.81897, -0.83738, -0.85405, -0.86888, -0.87258, -0.88439, -0.89542, -0.90566, -0.91511, -0.92364, -0.93165, -0.93923, -0.94638, -0.9531, -0.95939, -0.96026, -0.96513, -0.96982, -0.97432, -0.97863, -0.98275, -0.98558, -0.9883, -0.99066, -0.99268, -0.99435, -0.99566, -0.99662, -0.99674, -0.99836, -0.99839, -0.99698, -0.99563, -0.99434, -0.99312, -0.99282, -0.9911, -0.98877, -0.98583, -0.98228, -0.97811, -0.9737, -0.96964, -0.96489, -0.95946, -0.95335, -0.94656, -0.94236, -0.93511, -0.92723, -0.91871, -0.90956, -0.90011, -0.89024, -0.87849, -0.86489, -0.84953, -0.83496, -0.81568, -0.79543, -0.77425, -0.75219, -0.72927, -0.70806, -0.68255, -0.65578, -0.62796, -0.59928, -0.56996, -0.55362, -0.52433, -0.4949, -0.46533, -0.43566, -0.40588, -0.38318, -0.35326, -0.32333, -0.29338, -0.26343, -0.23346, -0.20348, -0.1735, -0.14351, -0.11352, -0.083518, -0.053518, -0.023518, 0.00105, 0.030948, 0.060855, 0.09077, 0.12069, 0.15062, 0.18056, 0.2105, 0.24045, 0.27041, 0.30037, 0.33034, 0.36031, 0.39029, 0.42027, 0.45025, 0.48024, 0.51023, 0.54022, 0.57021, 0.60021, 0.63021, 0.66021, 0.69021, 0.72021, 0.75021, 0.78021, 0.81021, 0.8402, 0.8702, 0.90019, 0.93018, 0.96017, 0.99016, 1.0201, 1.0501, 1.0801, 1.1101, 1.1179, 1.1479, 1.1779, 1.2079, 1.2379, 1.2679, 1.2979, 1.3279, 1.3579, 1.3879, 1.4179, 1.4479, 1.4779, 1.5079, 1.5379, 1.5679, 1.5979, 1.6279, 1.6579, 1.6879, 1.7179, 1.7479, 1.7779, 1.8079, 1.8379, 1.8679, 1.8979, 1.9279, 1.9579, 1.9738, 2.0037, 2.0337, 2.0637, 2.0937, 2.1237, 2.1536, 2.1836, 2.2136, 2.2436, 2.2736, 2.3035, 2.3335, 2.3635, 2.3935, 2.4235, 2.4535, 2.4835, 2.5135, 2.5435, 2.5734, 2.5937, 2.6237, 2.6537, 2.6837, 2.7137, 2.7437, 2.7737, 2.8037, 2.8337, 2.8637, 2.8937, 2.9237, 2.9537, 2.9837, 3.0136, 3.0436, 3.0736, 3.0763, 3.1063, 3.1363, 3.1663, 3.1962, 3.2133, 3.2433, 3.2732, 3.3031, 3.333, 3.3627, 3.3924, 3.4044, 3.433, 3.4606, 3.4867, 3.5111, 3.5335, 3.5537, 3.5554, 3.5748, 3.5942, 3.6137, 3.6333, 3.6529, 3.6726, 3.6923, 3.6926, 3.7085, 3.7235, 3.7376, 3.7508, 3.763, 3.7742, 3.7845, 3.7848, 3.7952, 3.8043, 3.8121, 3.8186, 3.8237, 3.8274, 3.8291, 3.8315, 3.8337, 3.8358, 3.8377, 3.8394, 3.8409, 3.8416, 3.843, 3.8439, 3.8443, 3.8593, 3.8743, 3.8738, 3.873, 3.872, 3.8707, 3.8692, 3.8674, 3.8664, 3.8649,
	// 					  3.8628, 3.86, 3.8567, 3.8527, 3.8481, 3.8443, 3.8364, 3.8278, 3.8184, 3.8083, 3.7974, 3.7859, 3.7735, 3.772, 3.7592, 3.745, 3.7293, 3.7123, 3.694, 3.6744, 3.6536, 3.6485, 3.6303, 3.6112, 3.5912, 3.5703, 3.5486, 3.5261, 3.5141, 3.502, 3.4756, 3.4482, 3.4199, 3.3909, 3.3613, 3.3314, 3.315, 3.285, 3.2551, 3.2251, 3.1952, 3.1652, 3.1352, 3.1307, 3.1007, 3.0708, 3.0408, 3.0108, 2.9808, 2.9508, 2.9208, 2.8908, 2.8608, 2.8477, 2.8177, 2.7877, 2.7577, 2.7277, 2.6977, 2.6677, 2.6377, 2.6077, 2.5777, 2.5477, 2.5177, 2.4877, 2.4577, 2.4277, 2.3977, 2.3678, 2.3471, 2.3172, 2.2872, 2.2573, 2.2273, 2.1973, 2.1674, 2.1374, 2.1074, 2.0774, 2.0474, 2.0174, 1.9874, 1.9574, 1.9274, 1.8974, 1.8674, 1.8374, 1.8074, 1.7774, 1.7474, 1.7174, 1.6874, 1.6831, 1.6531, 1.6231, 1.5931, 1.5631, 1.5331, 1.5031, 1.4731, 1.4431, 1.4131, 1.3831, 1.3531, 1.3231, 1.2931, 1.2631, 1.2331, 1.2031, 1.1731, 1.1432, 1.1132, 1.0832, 1.0532, 1.0232, 0.99316, 0.96316, 0.93316, 0.90317, 0.87317, 0.84317, 0.81318, 0.78318, 0.75319, 0.72319, 0.6932, 0.6632, 0.63321, 0.60322, 0.57856, 0.5487, 0.51882, 0.48893, 0.45903, 0.42912, 0.39919, 0.36926, 0.33931, 0.30936, 0.2794, 0.24943, 0.21946, 0.18948, 0.15949, 0.1295, 0.099507, 0.06951, 0.039512, 0.0095126, -0.020487, -0.050487, -0.080486, -0.11048, -0.14048, -0.17047, -0.20045, -0.23044, -0.26041, -0.28732, -0.31729, -0.34723, -0.37712, -0.40697, -0.43674, -0.46645, -0.47359, -0.50311, -0.53253, -0.56186, -0.59108, -0.6202, -0.64596, -0.6735, -0.7001, -0.72562, -0.74992, -0.77288, -0.79436, -0.79728, -0.81895, -0.83918, -0.85788, -0.87497, -0.89036, -0.89999, -0.91181, -0.92287, -0.93317, -0.94269, -0.95144, -0.95249, -0.9605, -0.96809, -0.97526, -0.98201, -0.98832, -0.98985, -0.99472, -0.99941, -1.0039, -1.0082, -1.0124, -1.0154, -1.0182, -1.0205, -1.0226, -1.0242, -1.0256, -1.0266, -1.0266, -1.0283, -1.0284, -1.0269, -1.0256, -1.0243, -1.0231, -1.0228, -1.0211, -1.0188, -1.0159, -1.0123, -1.0082, -1.0035, -1.0035, -0.99942, -0.99469, -0.9893, -0.98324, -0.97652, -0.97155, -0.96431, -0.95645, -0.94796, -0.93886, -0.92914, -0.92876, -0.91895, -0.90737, -0.89406, -0.87909, -0.8625, -0.85835, -0.83909, -0.81889, -0.79781, -0.77587, -0.75311, -0.72956, -0.72491, -0.69945, -0.67282, -0.64518, -0.61672, -0.5876, -0.55801, -0.56047, -0.53118, -0.50175, -0.4722, -0.44253, -0.41276, -0.3855, -0.35558, -0.32565, -0.2957, -0.26575, -0.23578, -0.2058, -0.17582, -0.14583, -0.11583, -0.085837, -0.055838, -0.025838, 0.0035735, 0.033472, 0.063378, 0.093293, 0.12322, 0.15315, 0.18308, 0.21303, 0.24298, 0.27293, 0.3029, 0.33286, 0.36283, 0.39281, 0.42279, 0.45278, 0.48276, 0.51275, 0.54275, 0.57274, 0.60274, 0.63274, 0.66273, 0.69273, 0.72273, 0.75273, 0.78273, 0.81273, 0.84273, 0.87272, 0.90272, 0.93271, 0.9627, 0.99268, 1.0227, 1.0526, 1.0826, 1.1126, 1.1176, 1.1476, 1.1776, 1.2076, 1.2376, 1.2676, 1.2976, 1.3276, 1.3576, 1.3876, 1.4176, 1.4476, 1.4776, 1.5076, 1.5376, 1.5676, 1.5976, 1.6276, 1.6576, 1.6876, 1.7176, 1.7476, 1.7776, 1.8076, 1.8376, 1.8676, 1.8976, 1.9276, 1.9576, 1.9725, 2.0025, 2.0325, 2.0624, 2.0924, 2.1224, 2.1524, 2.1824, 2.2123, 2.2423, 2.2723, 2.3023, 2.3323, 2.3623, 2.3922, 2.4222, 2.4522, 2.4822, 2.5122, 2.5422, 2.5722, 2.5932, 2.6232, 2.6532, 2.6832, 2.7132, 2.7432, 2.7732, 2.8032, 2.8332, 2.8632, 2.8932, 2.9232, 2.9532, 2.9832, 3.0132, 3.0432, 3.0732, 3.0777, 3.1077, 3.1377, 3.1676, 3.1976, 3.2137, 3.2437, 3.2737, 3.3036, 3.3334, 3.3632, 3.3929, 3.4117, 3.4404, 3.4681, 3.4946, 3.5196, 3.5429, 3.5643, 3.5784, 3.5977, 3.6172, 3.6367, 3.6562, 3.6758, 3.6955, 3.7066, 3.7177, 3.7337, 3.7487, 3.7629, 3.7762, 3.7885, 3.8, 3.8105, 3.8126, 3.8231, 3.8323, 3.8403, 3.8469, 3.8523, 3.8563, 3.859, 3.8614, 3.8636, 3.8657, 3.8676, 3.8693, 3.8708, 3.8715, 3.8729, 3.8739, 3.8743, 3.8893, 3.9043, 3.9038, 3.903, 3.902, 3.9007, 3.8992, 3.8975, 3.8963, 3.8949, 3.8928, 3.8901, 3.8868, 3.8828,
	// 					  3.8783, 3.8734, 3.8655, 3.8569, 3.8476, 3.8375, 3.8267, 3.8152, 3.803, 3.7995, 3.7867, 3.7726, 3.7571, 3.7403, 3.7223, 3.7031, 3.6827, 3.6727, 3.6545, 3.6354, 3.6155, 3.5948, 3.5732, 3.5509, 3.5278, 3.5174, 3.4911, 3.4638, 3.4356, 3.4068, 3.3774, 3.3476, 3.3177, 3.3169, 3.287, 3.257, 3.2271, 3.1971, 3.1671, 3.1371, 3.1321, 3.1022, 3.0722, 3.0422, 3.0122, 2.9822, 2.9522, 2.9223, 2.8923, 2.8623, 2.848, 2.818, 2.788, 2.758, 2.728, 2.698, 2.668, 2.638, 2.608, 2.578, 2.548, 2.518, 2.488, 2.458, 2.428, 2.398, 2.368, 2.3454, 2.3154, 2.2855, 2.2555, 2.2255, 2.1956, 2.1656, 2.1356, 2.1056, 2.0756, 2.0456, 2.0156, 1.9856, 1.9556, 1.9256, 1.8956, 1.8656, 1.8356, 1.8056, 1.7756, 1.7456, 1.7157, 1.6857, 1.6832, 1.6532, 1.6232, 1.5932, 1.5632, 1.5332, 1.5032, 1.4732, 1.4432, 1.4132, 1.3832, 1.3532, 1.3232, 1.2932, 1.2632, 1.2332, 1.2032, 1.1732, 1.1432, 1.1132, 1.0832, 1.0532, 1.0232, 0.99323, 0.96324, 0.93324, 0.90324, 0.87324, 0.84325, 0.81325, 0.78326, 0.75326, 0.72327, 0.69327, 0.66328, 0.63328, 0.60329, 0.58151, 0.55165, 0.52178, 0.49189, 0.46199, 0.43207, 0.40215, 0.37222, 0.34227, 0.31232, 0.28236, 0.25239, 0.22242, 0.19244, 0.16245, 0.13246, 0.10247, 0.072472, 0.042473, 0.012474, -0.017526, -0.047526, -0.077524, -0.10752, -0.13752, -0.16751, -0.1975, -0.22748, -0.25746, -0.28743, -0.28834, -0.31831, -0.34825, -0.37815, -0.408, -0.43778, -0.46749, -0.47874, -0.50825, -0.53768, -0.56701, -0.59624, -0.62536, -0.64109, -0.65683, -0.6844, -0.7111, -0.73682, -0.76142, -0.7848, -0.80685, -0.81728, -0.839, -0.85937, -0.87832, -0.89576, -0.91164, -0.92589, -0.9274, -0.93923, -0.95032, -0.96067, -0.97027, -0.97911, -0.98134, -0.98936, -0.99696, -1.0041, -1.0109, -1.0173, -1.0194, -1.0243, -1.029, -1.0335, -1.0378, -1.042, -1.0453, -1.048, -1.0504, -1.0524, -1.0541, -1.0555, -1.0565, -1.0565, -1.0583, -1.0583, -1.0569, -1.0556, -1.0543, -1.0531, -1.0528, -1.051, -1.0488, -1.0459, -1.0424, -1.0383, -1.0337, -1.0332, -1.0292, -1.0245, -1.0191, -1.0131, -1.0065, -1.0007, -0.99351, -0.98566, -0.97721, -0.96815, -0.95849, -0.9574, -0.94765, -0.93623, -0.92317, -0.90854, -0.89237, -0.88174, -0.86249, -0.84236, -0.82136, -0.79953, -0.77691, -0.75354, -0.74175, -0.71634, -0.68983, -0.66236, -0.63409, -0.60517, -0.57574, -0.56732, -0.53803, -0.50861, -0.47906, -0.4494, -0.41964, -0.38981, -0.38782, -0.3579, -0.32797, -0.29802, -0.26806, -0.2381, -0.20812, -0.17814, -0.14815, -0.11815, -0.088157, -0.058158, -0.028158, -0.011031, 0.0060969, 0.035995, 0.065902, 0.095817, 0.12574, 0.15567, 0.18561, 0.21555, 0.2455, 0.27546, 0.30542, 0.33539, 0.36536, 0.39534, 0.42532, 0.4553, 0.48529, 0.51528, 0.54527, 0.57527, 0.60526, 0.63526, 0.66526, 0.69526, 0.72526, 0.75526, 0.78526, 0.81526, 0.84525, 0.87525, 0.90524, 0.93523, 0.96522, 0.99521, 1.0252, 1.0552, 1.0851, 1.1012, 1.1173, 1.1473, 1.1773, 1.2073, 1.2373, 1.2673, 1.2973, 1.3273, 1.3573, 1.3873, 1.4173, 1.4473, 1.4773, 1.5073, 1.5373, 1.5673, 1.5973, 1.6273, 1.6573, 1.6873, 1.7173, 1.7473, 1.7773, 1.8073, 1.8373, 1.8673, 1.8973, 1.9273, 1.9573, 1.9712, 2.0012, 2.0312, 2.0612, 2.0912, 2.1211, 2.1511, 2.1811, 2.2111, 2.2411, 2.271, 2.301, 2.331, 2.361, 2.391, 2.421, 2.451, 2.4809, 2.5109, 2.5409, 2.5709, 2.5928, 2.6228, 2.6527, 2.6827, 2.7127, 2.7427, 2.7727, 2.8027, 2.8327, 2.8627, 2.8927, 2.9227, 2.9527, 2.9827, 3.0127, 3.0427, 3.0727, 3.0791, 3.109, 3.139, 3.169, 3.199, 3.2141, 3.2441, 3.2741, 3.304, 3.3339, 3.3637, 3.3933, 3.4191, 3.4478, 3.4757, 3.5024, 3.5279, 3.5519, 3.5743, 3.5948, 3.6013, 3.6207, 3.6401, 3.6596, 3.6792, 3.6988, 3.7185, 3.7307, 3.7429, 3.7588, 3.7739, 3.7882, 3.8015, 3.814, 3.8257, 3.8364, 3.8405, 3.851, 3.8603, 3.8684, 3.8752, 3.8808, 3.8852, 3.8883, 3.8888, 3.8913, 3.8935, 3.8956, 3.8975, 3.8992, 3.9007, 3.9015, 3.9029, 3.9038, 3.9043, 3.9193, 3.9343, 3.9338, 3.933, 3.932, 3.9307, 3.9292, 3.9275, 3.9263, 3.9248, 3.9228, 3.9201, 3.9168, 3.913,
	// 					  3.9085, 3.9054, 3.9024, 3.8946, 3.886, 3.8767, 3.8667, 3.856, 3.8446, 3.8325, 3.827, 3.8142, 3.8002, 3.7849, 3.7683, 3.7506, 3.7316, 3.7116, 3.6905, 3.6969, 3.6787, 3.6597, 3.6398, 3.6192, 3.5978, 3.5756, 3.5527, 3.5328, 3.5066, 3.4794, 3.4514, 3.4227, 3.3934, 3.3638, 3.3339, 3.3189, 3.2889, 3.259, 3.229, 3.199, 3.1691, 3.1391, 3.1336, 3.1036, 3.0736, 3.0436, 3.0137, 2.9837, 2.9537, 2.9237, 2.8937, 2.8637, 2.8482, 2.8182, 2.7882, 2.7582, 2.7282, 2.6982, 2.6682, 2.6382, 2.6082, 2.5782, 2.5482, 2.5182, 2.4883, 2.4583, 2.4283, 2.3983, 2.3683, 2.3436, 2.3136, 2.2837, 2.2537, 2.2237, 2.1938, 2.1638, 2.1338, 2.1038, 2.0738, 2.0438, 2.0139, 1.9839, 1.9539, 1.9239, 1.8939, 1.8639, 1.8339, 1.8039, 1.7739, 1.7439, 1.7139, 1.6986, 1.6833, 1.6533, 1.6233, 1.5933, 1.5633, 1.5333, 1.5033, 1.4733, 1.4433, 1.4133, 1.3833, 1.3533, 1.3233, 1.2933, 1.2633, 1.2333, 1.2033, 1.1733, 1.1433, 1.1133, 1.0833, 1.0533, 1.0233, 0.99331, 0.96331, 0.93331, 0.90331, 0.87332, 0.84332, 0.81333, 0.78333, 0.75333, 0.72334, 0.69334, 0.66335, 0.63336, 0.60336, 0.58447, 0.55461, 0.52473, 0.49485, 0.46494, 0.43503, 0.40511, 0.37517, 0.34523, 0.31528, 0.28532, 0.25535, 0.22538, 0.1954, 0.16541, 0.13542, 0.10543, 0.075433, 0.045435, 0.015435, -0.014565, -0.044564, -0.074563, -0.10456, -0.13456, -0.16455, -0.19454, -0.22452, -0.2545, -0.28447, -0.28937, -0.31934, -0.34928, -0.37918, -0.40903, -0.43882, -0.46854, -0.48388, -0.5134, -0.54283, -0.57216, -0.6014, -0.63053, -0.64911, -0.66769, -0.69529, -0.72208, -0.74797, -0.77283, -0.79657, -0.8191, -0.84032, -0.83729, -0.85904, -0.87953, -0.8987, -0.91646, -0.93276, -0.94755, -0.95481, -0.96665, -0.97777, -0.98817, -0.99783, -1.0068, -1.0102, -1.0182, -1.0258, -1.033, -1.0398, -1.0462, -1.049, -1.0539, -1.0586, -1.0631, -1.0674, -1.0716, -1.0752, -1.0779, -1.0803, -1.0823, -1.084, -1.0854, -1.0864, -1.0863, -1.0882, -1.0883, -1.0869, -1.0855, -1.0842, -1.083, -1.0827, -1.081, -1.0787, -1.0759, -1.0725, -1.0685, -1.0639, -1.063, -1.059, -1.0543, -1.049, -1.043, -1.0364, -1.0299, -1.0227, -1.0149, -1.0065, -0.99744, -0.98784, -0.98605, -0.97634, -0.96506, -0.95223, -0.9379, -0.92212, -0.90512, -0.8859, -0.86581, -0.84489, -0.82318, -0.80069, -0.77747, -0.7586, -0.73322, -0.70682, -0.6795, -0.65141, -0.62267, -0.59341, -0.57417, -0.54488, -0.51546, -0.48592, -0.45627, -0.42652, -0.39669, -0.39013, -0.36022, -0.33028, -0.30034, -0.27038, -0.24042, -0.21044, -0.18046, -0.15047, -0.12047, -0.090477, -0.060478, -0.030478, -0.0004787, 0.0086204, 0.038519, 0.068425, 0.09834, 0.12826, 0.15819, 0.18813, 0.21808, 0.24803, 0.27798, 0.30795, 0.33791, 0.36788, 0.39786, 0.42784, 0.45783, 0.48781, 0.5178, 0.5478, 0.57779, 0.60779, 0.63779, 0.66779, 0.69779, 0.72779, 0.75779, 0.78779, 0.81778, 0.84778, 0.87778, 0.90777, 0.93776, 0.96775, 0.99773, 1.0277, 1.0577, 1.0877, 1.117, 1.147, 1.177, 1.207, 1.237, 1.267, 1.297, 1.327, 1.357, 1.387, 1.417, 1.447, 1.477, 1.507, 1.537, 1.567, 1.597, 1.627, 1.657, 1.687, 1.717, 1.747, 1.777, 1.807, 1.837, 1.867, 1.897, 1.927, 1.957, 1.97, 2, 2.0299, 2.0599, 2.0899, 2.1199, 2.1499, 2.1798, 2.2098, 2.2398, 2.2698, 2.2998, 2.3297, 2.3597, 2.3897, 2.4197, 2.4497, 2.4797, 2.5097, 2.5397, 2.5697, 2.5923, 2.6223, 2.6523, 2.6823, 2.7123, 2.7423, 2.7723, 2.8023, 2.8323, 2.8623, 2.8923, 2.9223, 2.9523, 2.9823, 3.0123, 3.0422, 3.0722, 3.0804, 3.1104, 3.1404, 3.1703, 3.2003, 3.2146, 3.2446, 3.2745, 3.3045, 3.3343, 3.3641, 3.3938, 3.4101, 3.4264, 3.4552, 3.4831, 3.5102, 3.536, 3.5606, 3.5837, 3.6052, 3.6249, 3.6243, 3.6436, 3.6631, 3.6826, 3.7021, 3.7217, 3.7414, 3.7547, 3.7681, 3.784, 3.7991, 3.8134, 3.8269, 3.8395, 3.8513, 3.8622, 3.8684, 3.8789, 3.8883, 3.8965, 3.9035, 3.9093, 3.914, 3.9174, 3.9187, 3.9212, 3.9234, 3.9255, 3.9274, 3.9291, 3.9306, 3.9314, 3.9329, 3.9338, 3.9343, 3.9493, 3.9643, 3.9638, 3.963, 3.962, 3.9607, 3.9592, 3.9575, 3.9563, 3.9548, 3.9528, 3.9501, 3.9469,
	// 					  3.9431, 3.9387, 3.9337, 3.9315, 3.9236, 3.9151, 3.9058, 3.8959, 3.8853, 3.874, 3.862, 3.8544, 3.8417, 3.8278, 3.8126, 3.7963, 3.7787, 3.7601, 3.7404, 3.7197, 3.7211, 3.7029, 3.6839, 3.6642, 3.6436, 3.6223, 3.6003, 3.5775, 3.5629, 3.5483, 3.5221, 3.4949, 3.467, 3.4385, 3.4094, 3.3799, 3.35, 3.3201, 3.3208, 3.2909, 3.2609, 3.231, 3.201, 3.171, 3.141, 3.135, 3.105, 3.0751, 3.0451, 3.0151, 2.9851, 2.9551, 2.9251, 2.8951, 2.8651, 2.8485, 2.8185, 2.7885, 2.7585, 2.7285, 2.6985, 2.6685, 2.6385, 2.6085, 2.5785, 2.5485, 2.5185, 2.4885, 2.4585, 2.4286, 2.3986, 2.3686, 2.3418, 2.3119, 2.2819, 2.2519, 2.222, 2.192, 2.162, 2.132, 2.102, 2.0721, 2.0421, 2.0121, 1.9821, 1.9521, 1.9221, 1.8921, 1.8621, 1.8321, 1.8021, 1.7721, 1.7421, 1.7121, 1.6834, 1.6534, 1.6234, 1.5934, 1.5634, 1.5334, 1.5034, 1.4734, 1.4434, 1.4134, 1.3834, 1.3534, 1.3234, 1.2934, 1.2634, 1.2334, 1.2034, 1.1734, 1.1434, 1.1134, 1.0834, 1.0534, 1.0234, 0.99338, 0.96338, 0.93339, 0.90339, 0.87339, 0.8434, 0.8134, 0.7834, 0.75341, 0.72341, 0.69342, 0.66342, 0.63343, 0.60344, 0.57344, 0.58743, 0.55757, 0.52769, 0.4978, 0.4679, 0.43799, 0.40807, 0.37813, 0.34819, 0.31824, 0.28828, 0.25831, 0.22834, 0.19836, 0.16837, 0.13838, 0.10839, 0.078394, 0.048396, 0.018397, -0.011603, -0.041603, -0.071602, -0.1016, -0.13159, -0.16159, -0.19158, -0.22156, -0.25154, -0.28151, -0.2904, -0.32037, -0.35031, -0.38021, -0.41007, -0.43986, -0.46959, -0.48903, -0.51854, -0.54797, -0.57731, -0.60655, -0.63569, -0.66472, -0.67856, -0.70618, -0.73305, -0.75908, -0.78416, -0.80822, -0.83116, -0.8529, -0.85729, -0.87908, -0.89968, -0.91903, -0.93708, -0.95375, -0.96901, -0.98222, -0.99407, -1.0052, -1.0157, -1.0254, -1.0344, -1.039, -1.0471, -1.0547, -1.0619, -1.0687, -1.0751, -1.0786, -1.0835, -1.0882, -1.0927, -1.097, -1.1012, -1.105, -1.1077, -1.1101, -1.1122, -1.1139, -1.1153, -1.1163, -1.1162, -1.1181, -1.1183, -1.1168, -1.1155, -1.1142, -1.113, -1.1127, -1.111, -1.1087, -1.1059, -1.1025, -1.0986, -1.094, -1.0928, -1.0887, -1.0841, -1.0788, -1.0729, -1.0664, -1.0592, -1.0591, -1.0519, -1.0441, -1.0357, -1.0267, -1.0172, -1.0147, -1.005, -0.99387, -0.98125, -0.9672, -0.95176, -0.93497, -0.92851, -0.9093, -0.88926, -0.86842, -0.8468, -0.82444, -0.80136, -0.7884, -0.77545, -0.7501, -0.72379, -0.69661, -0.66868, -0.64011, -0.61102, -0.58152, -0.58101, -0.55173, -0.52232, -0.49278, -0.46314, -0.4334, -0.40358, -0.39245, -0.36253, -0.3326, -0.30266, -0.2727, -0.24273, -0.21276, -0.18278, -0.15279, -0.12279, -0.092797, -0.062798, -0.032798, -0.0027986, 0.011144, 0.041042, 0.070949, 0.10086, 0.13079, 0.16072, 0.19066, 0.2206, 0.25055, 0.28051, 0.31047, 0.34044, 0.37041, 0.40039, 0.43037, 0.46035, 0.49034, 0.52033, 0.55032, 0.58032, 0.61032, 0.64031, 0.67031, 0.70031, 0.73031, 0.76031, 0.79031, 0.82031, 0.85031, 0.8803, 0.91029, 0.94029, 0.97027, 1.0003, 1.0302, 1.0602, 1.0902, 1.1168, 1.1468, 1.1768, 1.2068, 1.2368, 1.2668, 1.2968, 1.3268, 1.3568, 1.3868, 1.4168, 1.4468, 1.4768, 1.5068, 1.5368, 1.5668, 1.5968, 1.6268, 1.6568, 1.6868, 1.7168, 1.7468, 1.7768, 1.8068, 1.8368, 1.8668, 1.8968, 1.9268, 1.9568, 1.9687, 1.9987, 2.0287, 2.0587, 2.0886, 2.1186, 2.1486, 2.1786, 2.2086, 2.2385, 2.2685, 2.2985, 2.3285, 2.3585, 2.3885, 2.4184, 2.4484, 2.4784, 2.5084, 2.5384, 2.5684, 2.5918, 2.6218, 2.6518, 2.6818, 2.7118, 2.7418, 2.7718, 2.8018, 2.8318, 2.8618, 2.8918, 2.9218, 2.9518, 2.9818, 3.0118, 3.0418, 3.0718, 3.0818, 3.1118, 3.1417, 3.1717, 3.2017, 3.215, 3.245, 3.275, 3.3049, 3.3348, 3.3646, 3.3943, 3.4239, 3.4337, 3.4625, 3.4906, 3.5178, 3.544, 3.5691, 3.5928, 3.6151, 3.6358, 3.6472, 3.6666, 3.686, 3.7055, 3.7251, 3.7447, 3.7644, 3.7788, 3.7932, 3.8092, 3.8243, 3.8387, 3.8523, 3.865, 3.8769, 3.888, 3.8982, 3.8962, 3.9068, 3.9162, 3.9246, 3.9317, 3.9378, 3.9427, 3.9464, 3.9486, 3.9511, 3.9533, 3.9554, 3.9573, 3.959, 3.9605, 3.9614, 3.9628, 3.9638, 3.9643, 3.9793, 3.9943, 3.9938,
	// 					  3.993, 3.992, 3.9907, 3.9893, 3.9876, 3.9863, 3.9848, 3.9828, 3.9802, 3.977, 3.9732, 3.9689, 3.964, 3.9605, 3.9527, 3.9442, 3.935, 3.9251, 3.9145, 3.9033, 3.8915, 3.8819, 3.8692, 3.8554, 3.8403, 3.8242, 3.8069, 3.7885, 3.7691, 3.7487, 3.7273, 3.7453, 3.7271, 3.7082, 3.6885, 3.668, 3.6468, 3.6249, 3.6023, 3.583, 3.5637, 3.5375, 3.5105, 3.4827, 3.4543, 3.4253, 3.3959, 3.3662, 3.3363, 3.3227, 3.2928, 3.2629, 3.2329, 3.2029, 3.1729, 3.143, 3.1364, 3.1065, 3.0765, 3.0465, 3.0165, 2.9865, 2.9565, 2.9266, 2.8966, 2.8666, 2.8488, 2.8188, 2.7888, 2.7588, 2.7288, 2.6988, 2.6688, 2.6388, 2.6088, 2.5788, 2.5488, 2.5188, 2.4888, 2.4588, 2.4288, 2.3988, 2.3689, 2.34, 2.3101, 2.2801, 2.2502, 2.2202, 2.1902, 2.1602, 2.1303, 2.1003, 2.0703, 2.0403, 2.0103, 1.9803, 1.9503, 1.9203, 1.8903, 1.8603, 1.8303, 1.8003, 1.7703, 1.7403, 1.7103, 1.6834, 1.6534, 1.6234, 1.5934, 1.5634, 1.5334, 1.5034, 1.4734, 1.4434, 1.4134, 1.3834, 1.3534, 1.3234, 1.2934, 1.2634, 1.2334, 1.2034, 1.1734, 1.1434, 1.1134, 1.0834, 1.0534, 1.0235, 0.99345, 0.96346, 0.93346, 0.90346, 0.87347, 0.84347, 0.81347, 0.78348, 0.75348, 0.72349, 0.69349, 0.6635, 0.6335, 0.60351, 0.57352, 0.59038, 0.56052, 0.53065, 0.50076, 0.47086, 0.44095, 0.41102, 0.38109, 0.35115, 0.3212, 0.29124, 0.26127, 0.2313, 0.20132, 0.17133, 0.14134, 0.11135, 0.081355, 0.051357, 0.021358, -0.0086417, -0.038642, -0.068641, -0.098638, -0.12863, -0.15863, -0.18862, -0.2186, -0.24858, -0.27855, -0.29142, -0.32139, -0.35134, -0.38124, -0.4111, -0.4409, -0.47063, -0.49417, -0.52369, -0.55312, -0.58246, -0.61171, -0.64085, -0.66989, -0.68943, -0.71707, -0.74401, -0.77016, -0.79544, -0.81976, -0.84306, -0.86525, -0.88627, -0.87729, -0.89911, -0.91981, -0.93933, -0.95762, -0.97463, -0.99031, -1.0046, -1.0096, -1.0215, -1.0327, -1.0431, -1.0529, -1.062, -1.0679, -1.0759, -1.0835, -1.0908, -1.0976, -1.104, -1.1082, -1.1131, -1.1178, -1.1223, -1.1266, -1.1308, -1.1328, -1.1349, -1.1376, -1.14, -1.1421, -1.1438, -1.1452, -1.1463, -1.1461, -1.148, -1.1482, -1.1468, -1.1455, -1.1442, -1.143, -1.1427, -1.141, -1.1387, -1.1359, -1.1326, -1.1287, -1.1242, -1.1225, -1.1185, -1.1139, -1.1086, -1.1028, -1.0963, -1.0892, -1.0883, -1.0811, -1.0733, -1.0649, -1.056, -1.0465, -1.0433, -1.0337, -1.0227, -1.0102, -0.99642, -0.9813, -0.96488, -0.9519, -0.9327, -0.91271, -0.89193, -0.87041, -0.84816, -0.82522, -0.80162, -0.79229, -0.76698, -0.74075, -0.71369, -0.68591, -0.6575, -0.62857, -0.59921, -0.58786, -0.55858, -0.52917, -0.49964, -0.47, -0.44027, -0.41046, -0.39477, -0.36485, -0.33492, -0.30497, -0.27502, -0.24505, -0.21508, -0.1851, -0.15511, -0.12511, -0.095117, -0.065118, -0.035118, -0.0051184, 0.013667, 0.043566, 0.073472, 0.10339, 0.13331, 0.16324, 0.19318, 0.22312, 0.25307, 0.28303, 0.31299, 0.34296, 0.37293, 0.40291, 0.43289, 0.46288, 0.49287, 0.52286, 0.55285, 0.58285, 0.61284, 0.64284, 0.67284, 0.70284, 0.73284, 0.76284, 0.79284, 0.82284, 0.85283, 0.88283, 0.91282, 0.94281, 0.9728, 1.0028, 1.0328, 1.0627, 1.0927, 1.1165, 1.1465, 1.1765, 1.2065, 1.2365, 1.2665, 1.2965, 1.3265, 1.3565, 1.3865, 1.4165, 1.4465, 1.4765, 1.5065, 1.5365, 1.5665, 1.5965, 1.6265, 1.6565, 1.6865, 1.7165, 1.7465, 1.7765, 1.8065, 1.8365, 1.8665, 1.8965, 1.9265, 1.9565, 1.9675, 1.9974, 2.0274, 2.0574, 2.0874, 2.1173, 2.1473, 2.1773, 2.2073, 2.2373, 2.2673, 2.2972, 2.3272, 2.3572, 2.3872, 2.4172, 2.4472, 2.4772, 2.5072, 2.5371, 2.5671, 2.5914, 2.6214, 2.6514, 2.6814, 2.7114, 2.7414, 2.7714, 2.8014, 2.8314, 2.8614, 2.8914, 2.9213, 2.9513, 2.9813, 3.0113, 3.0413, 3.0713, 3.0831, 3.1131, 3.1431, 3.1731, 3.203, 3.2154, 3.2454, 3.2754, 3.3053, 3.3352, 3.365, 3.3947, 3.4244, 3.4411, 3.4699, 3.4981, 3.5254, 3.5519, 3.5773, 3.6015, 3.6245, 3.6461, 3.6661, 3.6702, 3.6895, 3.709, 3.7285, 3.748, 3.7676, 3.7873, 3.8029, 3.8184, 3.8343, 3.8495, 3.864, 3.8776, 3.8905, 3.9025, 3.9138, 3.9242, 3.9241, 3.9347, 3.9442, 3.9526, 3.96, 3.9662,
	// 					  3.9713, 3.9753, 3.9782, 3.9785, 3.981, 3.9832, 3.9853, 3.9872, 3.9889, 3.9905, 3.9913, 3.9928, 3.9937, 3.9943, 4.0093, 4.0243, 4.0238, 4.023, 4.022, 4.0207, 4.0193, 4.0176, 4.0162, 4.0148, 4.0128, 4.0102, 4.007, 4.0033, 3.999, 3.9942, 3.9896, 3.9817, 3.9732, 3.9641, 3.9543, 3.9438, 3.9327, 3.9209, 3.9085, 3.9094, 3.8967, 3.8829, 3.868, 3.852, 3.8349, 3.8168, 3.7977, 3.7776, 3.7566, 3.7695, 3.7513, 3.7324, 3.7128, 3.6924, 3.6713, 3.6495, 3.6271, 3.604, 3.5916, 3.5791, 3.553, 3.526, 3.4983, 3.47, 3.4412, 3.4119, 3.3823, 3.3525, 3.3225, 3.3247, 3.2947, 3.2648, 3.2348, 3.2049, 3.1749, 3.1449, 3.1379, 3.1079, 3.0779, 3.048, 3.018, 2.988, 2.958, 2.928, 2.898, 2.868, 2.8491, 2.8191, 2.7891, 2.7591, 2.7291, 2.6991, 2.6691, 2.6391, 2.6091, 2.5791, 2.5491, 2.5191, 2.4891, 2.4591, 2.4291, 2.3991, 2.3691, 2.3537, 2.3382, 2.3083, 2.2783, 2.2484, 2.2184, 2.1884, 2.1585, 2.1285, 2.0985, 2.0685, 2.0385, 2.0085, 1.9785, 1.9485, 1.9185, 1.8885, 1.8585, 1.8285, 1.7985, 1.7685, 1.7385, 1.7085, 1.6835, 1.6535, 1.6235, 1.5935, 1.5635, 1.5335, 1.5035, 1.4735, 1.4435, 1.4135, 1.3835, 1.3535, 1.3235, 1.2935, 1.2635, 1.2335, 1.2035, 1.1735, 1.1435, 1.1135, 1.0835, 1.0535, 1.0235, 0.99353, 0.96353, 0.93353, 0.90354, 0.87354, 0.84354, 0.81355, 0.78355, 0.75356, 0.72356, 0.69357, 0.66357, 0.63358, 0.60358, 0.57359, 0.59334, 0.56348, 0.5336, 0.50372, 0.47382, 0.4439, 0.41398, 0.38405, 0.35411, 0.32415, 0.29419, 0.26423, 0.23426, 0.20428, 0.17429, 0.1443, 0.11431, 0.084316, 0.054319, 0.02432, -0.0056803, -0.03568, -0.065679, -0.095677, -0.12567, -0.15567, -0.18566, -0.21564, -0.24562, -0.2756, -0.29245, -0.32242, -0.35236, -0.38227, -0.41213, -0.44194, -0.47168, -0.49931, -0.52883, -0.55827, -0.58761, -0.61686, -0.64602, -0.67506, -0.7003, -0.72796, -0.75496, -0.78122, -0.80666, -0.83123, -0.85483, -0.87742, -0.89892, -0.89729, -0.91914, -0.93993, -0.9596, -0.97811, -0.99541, -1.0115, -1.0262, -1.037, -1.0489, -1.0601, -1.0706, -1.0805, -1.0896, -1.0967, -1.1048, -1.1124, -1.1196, -1.1265, -1.1329, -1.1378, -1.1427, -1.1473, -1.1519, -1.1562, -1.1604, -1.1625, -1.1647, -1.1675, -1.1699, -1.1719, -1.1737, -1.1751, -1.1762, -1.1759, -1.178, -1.1781, -1.1782, -1.1768, -1.1754, -1.1741, -1.1729, -1.1726, -1.1709, -1.1687, -1.1659, -1.1626, -1.1587, -1.1543, -1.1523, -1.1483, -1.1437, -1.1385, -1.1326, -1.1262, -1.1192, -1.1175, -1.1103, -1.1025, -1.0942, -1.0853, -1.0758, -1.072, -1.0624, -1.0515, -1.0392, -1.0256, -1.0108, -0.99467, -0.98498, -0.97529, -0.9561, -0.93615, -0.91544, -0.89401, -0.87187, -0.84906, -0.82559, -0.80914, -0.78385, -0.7577, -0.73075, -0.7031, -0.67485, -0.64606, -0.61685, -0.5873, -0.59471, -0.56543, -0.53603, -0.5065, -0.47687, -0.44715, -0.41735, -0.39709, -0.36717, -0.33724, -0.30729, -0.27734, -0.24737, -0.2174, -0.18741, -0.15743, -0.12743, -0.097437, -0.067438, -0.037438, -0.0074383, 0.016191, 0.046089, 0.075996, 0.10591, 0.13583, 0.16577, 0.1957, 0.22565, 0.2556, 0.28556, 0.31552, 0.34549, 0.37546, 0.40544, 0.43542, 0.4654, 0.49539, 0.52538, 0.55538, 0.58537, 0.61537, 0.64537, 0.67537, 0.70537, 0.73537, 0.76537, 0.79536, 0.82536, 0.85536, 0.88535, 0.91535, 0.94534, 0.97532, 1.0053, 1.0353, 1.0653, 1.0952, 1.1162, 1.1462, 1.1762, 1.2062, 1.2362, 1.2662, 1.2962, 1.3262, 1.3562, 1.3862, 1.4162, 1.4462, 1.4762, 1.5062, 1.5362, 1.5662, 1.5962, 1.6262, 1.6562, 1.6862, 1.7162, 1.7462, 1.7762, 1.8062, 1.8362, 1.8662, 1.8962, 1.9262, 1.9562, 1.9662, 1.9962, 2.0262, 2.0561, 2.0861, 2.1161, 2.1461, 2.176, 2.206, 2.236, 2.266, 2.296, 2.326, 2.356, 2.3859, 2.4159, 2.4459, 2.4759, 2.5059, 2.5359, 2.5659, 2.5909, 2.6209, 2.6509, 2.6809, 2.7109, 2.7409, 2.7709, 2.8009, 2.8309, 2.8609, 2.8909, 2.9209, 2.9509, 2.9809, 3.0109, 3.0409, 3.0708, 3.0845, 3.1145, 3.1444, 3.1744, 3.2044, 3.2159, 3.2459, 3.2758, 3.3058, 3.3356, 3.3655, 3.3952, 3.4248, 3.4484, 3.4773, 3.5055, 3.533, 3.5597, 3.5854, 3.6101, 3.6336, 3.6559, 3.6768,
	// 					  3.6931, 3.7125, 3.7319, 3.7514, 3.771, 3.7906, 3.8103, 3.8269, 3.8435, 3.8595, 3.8747, 3.8892, 3.903, 3.9159, 3.9281, 3.9395, 3.9501, 3.952, 3.9626, 3.9721, 3.9807, 3.9881, 3.9946, 3.9999, 4.0042, 4.0074, 4.0084, 4.0109, 4.0131, 4.0152, 4.0171, 4.0188, 4.0204, 4.0213, 4.0227, 4.0237, 4.0242, 4.0443, 4.0438, 4.043, 4.042, 4.0407, 4.0393, 4.0376, 4.0362, 4.0348, 4.0328, 4.0302, 4.0271, 4.0234, 4.0191, 4.0144, 4.0089, 4.0011, 3.9926, 3.9835, 3.9737, 3.9633, 3.9522, 3.9405, 3.9282, 3.9277, 3.9151, 3.9013, 3.8865, 3.8706, 3.8536, 3.8357, 3.8167, 3.7968, 3.776, 3.7856, 3.7675, 3.7486, 3.729, 3.7086, 3.6876, 3.6659, 3.6435, 3.6206, 3.605, 3.5894, 3.5633, 3.5364, 3.5087, 3.4805, 3.4518, 3.4226, 3.393, 3.3633, 3.3333, 3.326, 3.296, 3.2661, 3.2361, 3.2062, 3.1762, 3.1462, 3.1388, 3.1089, 3.0789, 3.0489, 3.0189, 2.9889, 2.9589, 2.9289, 2.8989, 2.8689, 2.8492, 2.8192, 2.7892, 2.7592, 2.7292, 2.6992, 2.6692, 2.6392, 2.6092, 2.5792, 2.5493, 2.5193, 2.4893, 2.4593, 2.4293, 2.3993, 2.3693, 2.3532, 2.3371, 2.3071, 2.2772, 2.2472, 2.2172, 2.1872, 2.1573, 2.1273, 2.0973, 2.0673, 2.0373, 2.0073, 1.9773, 1.9473, 1.9173, 1.8873, 1.8573, 1.8273, 1.7973, 1.7673, 1.7373, 1.7073, 1.6836, 1.6536, 1.6236, 1.5936, 1.5636, 1.5336, 1.5036, 1.4736, 1.4436, 1.4136, 1.3836, 1.3536, 1.3236, 1.2936, 1.2636, 1.2336, 1.2036, 1.1736, 1.1436, 1.1136, 1.0836, 1.0536, 1.0236, 0.99358, 0.96358, 0.93358, 0.90359, 0.87359, 0.84359, 0.8136, 0.7836, 0.7536, 0.72361, 0.69361, 0.66362, 0.63363, 0.60363, 0.57364, 0.59531, 0.56545, 0.53557, 0.50569, 0.47579, 0.44588, 0.41595, 0.38602, 0.35608, 0.32613, 0.29617, 0.2662, 0.23623, 0.20625, 0.17627, 0.14628, 0.11629, 0.08629, 0.056293, 0.026294, -0.003706, -0.033706, -0.063705, -0.093703, -0.1237, -0.15369, -0.18368, -0.21367, -0.24365, -0.27362, -0.29313, -0.3231, -0.35305, -0.38296, -0.41282, -0.44263, -0.47237, -0.48756, -0.50274, -0.53226, -0.5617, -0.59105, -0.6203, -0.64946, -0.67851, -0.69302, -0.70754, -0.73521, -0.76225, -0.78857, -0.81413, -0.83883, -0.86262, -0.88544, -0.90723, -0.91063, -0.93249, -0.95333, -0.9731, -0.99174, -1.0092, -1.0255, -1.0405, -1.0479, -1.0553, -1.0672, -1.0784, -1.089, -1.0988, -1.1081, -1.116, -1.124, -1.1316, -1.1389, -1.1458, -1.1522, -1.1575, -1.1624, -1.1671, -1.1716, -1.1759, -1.1801, -1.1824, -1.1846, -1.1874, -1.1898, -1.1919, -1.1936, -1.195, -1.1961, -1.1958, -1.1979, -1.198, -1.1982, -1.1967, -1.1954, -1.1941, -1.1929, -1.1926, -1.1909, -1.1887, -1.1859, -1.1826, -1.1788, -1.1744, -1.1722, -1.1681, -1.1635, -1.1583, -1.1525, -1.1462, -1.1392, -1.137, -1.1298, -1.122, -1.1137, -1.1048, -1.0954, -1.0911, -1.0815, -1.0706, -1.0585, -1.045, -1.0304, -1.0145, -0.99744, -0.99088, -0.97171, -0.95177, -0.93111, -0.90973, -0.88766, -0.86493, -0.84156, -0.82037, -0.7951, -0.76899, -0.74211, -0.71455, -0.68638, -0.6577, -0.62858, -0.59911, -0.59928, -0.57, -0.5406, -0.51107, -0.48145, -0.45173, -0.42194, -0.39863, -0.36871, -0.33878, -0.30884, -0.27888, -0.24892, -0.21894, -0.18896, -0.15897, -0.12898, -0.098983, -0.068984, -0.038985, -0.0089849, 0.017873, 0.047771, 0.077678, 0.10759, 0.13752, 0.16745, 0.19739, 0.22733, 0.25728, 0.28724, 0.3172, 0.34717, 0.37714, 0.40712, 0.4371, 0.46709, 0.49708, 0.52707, 0.55706, 0.58706, 0.61705, 0.64705, 0.67705, 0.70705, 0.73705, 0.76705, 0.79705, 0.82705, 0.85704, 0.88704, 0.91703, 0.94702, 0.97701, 1.007, 1.037, 1.0669, 1.0969, 1.116, 1.146, 1.176, 1.206, 1.236, 1.266, 1.296, 1.326, 1.356, 1.386, 1.416, 1.446, 1.476, 1.506, 1.536, 1.566, 1.596, 1.626, 1.656, 1.686, 1.716, 1.746, 1.776, 1.806, 1.836, 1.866, 1.896, 1.926, 1.956, 1.9654, 1.9953, 2.0253, 2.0553, 2.0853, 2.1152, 2.1452, 2.1752, 2.2052, 2.2352, 2.2652, 2.2951, 2.3251, 2.3551, 2.3851, 2.4151, 2.4451, 2.4751, 2.5051, 2.535, 2.565, 2.5906, 2.6206, 2.6506, 2.6806, 2.7106, 2.7406, 2.7706, 2.8006, 2.8306, 2.8606, 2.8906, 2.9206, 2.9506, 2.9806, 3.0106, 3.0405, 3.0705, 3.0854,
	// 					  3.1154, 3.1453, 3.1753, 3.2053, 3.2162, 3.2462, 3.2761, 3.3061, 3.3359, 3.3657, 3.3955, 3.4251, 3.4533, 3.4822, 3.5104, 3.538, 3.5648, 3.5908, 3.6157, 3.6395, 3.6622, 3.6836, 3.7036, 3.7084, 3.7278, 3.7472, 3.7667, 3.7863, 3.8059, 3.8256, 3.8429, 3.8603, 3.8763, 3.8915, 3.9061, 3.9199, 3.9329, 3.9451, 3.9566, 3.9673, 3.9706, 3.9812, 3.9908, 3.9994, 4.0069, 4.0135, 4.0189, 4.0234, 4.0268, 4.0283, 4.0308, 4.033, 4.0351, 4.037, 4.0388, 4.0403, 4.0413, 4.0427, 4.0437, 4.0442};
	// double Car_y[3664] = {-0.000016, -0.030011, -0.06, -0.089982, -0.11996, -0.14992, -0.17987, -0.19559, -0.22555, -0.25548, -0.28535, -0.31515, -0.34488, -0.37451, -0.38959, -0.41854, -0.44726, -0.47574, -0.50395, -0.53188, -0.5595, -0.58557, -0.61268, -0.639, -0.66446, -0.68897, -0.71246, -0.73483, -0.756, -0.77982, -0.80288, -0.82515, -0.84658, -0.86715, -0.88681, -0.89885, -0.91312, -0.92497, -0.93432, -0.94108, -0.94521, -0.94667, -0.94667, -0.94853, -0.95023, -0.95177, -0.95314, -0.95436, -0.95542, -0.95555, -0.95691, -0.95813, -0.95921, -0.96015, -0.96094, -0.96159, -0.9621, -0.96246, -0.96268, -0.96273, -0.96296, -0.96311, -0.96318, -0.96315, -0.96305, -0.96285, -0.96258, -0.96221, -0.96177, -0.96123, -0.96062, -0.95991, -0.95912, -0.95825, -0.95729, -0.95625, -0.95556, -0.95384, -0.95222, -0.95072, -0.94933, -0.94805, -0.94689, -0.94583, -0.94488, -0.94405, -0.94333, -0.94271, -0.94221, -0.94182, -0.94155, -0.94138, -0.94133, -0.94138, -0.94155, -0.94183, -0.94222, -0.94272, -0.94333, -0.94347, -0.94353, -0.94358, -0.9436, -0.94361, -0.94359, -0.94356, -0.94351, -0.94343, -0.94334, -0.94323, -0.9431, -0.94294, -0.94277, -0.94258, -0.94237, -0.94214, -0.94189, -0.94162, -0.94133, -0.94102, -0.9407, -0.94035, -0.93998, -0.93959, -0.93919, -0.93876, -0.93831, -0.93785, -0.93736, -0.93686, -0.93633, -0.93579, -0.93523, -0.93464, -0.93404, -0.93342, -0.93283, -0.93571, -0.93844, -0.94102, -0.94345, -0.94573, -0.94785, -0.94983, -0.95165, -0.95332, -0.95484, -0.95621, -0.95743, -0.95849, -0.95941, -0.96017, -0.96078, -0.96124, -0.96155, -0.96171, -0.96171, -0.96157, -0.96127, -0.96082, -0.96022, -0.95946, -0.95856, -0.9575, -0.9563, -0.95527, -0.95395, -0.95203, -0.94952, -0.94642, -0.94273, -0.93845, -0.93798, -0.9326, -0.92674, -0.92041, -0.91361, -0.90633, -0.90103, -0.88907, -0.87499, -0.85886, -0.8408, -0.82091, -0.80405, -0.78326, -0.76097, -0.7373, -0.71236, -0.68629, -0.67902, -0.65144, -0.62354, -0.59535, -0.56688, -0.53856, -0.50965, -0.48062, -0.45149, -0.42225, -0.39292, -0.38871, -0.35911, -0.32948, -0.29982, -0.27013, -0.24041, -0.21921, -0.18933, -0.15943, -0.1295, -0.099542, -0.069571, -0.039586, -0.03493, -0.0049818, -0.00022, 0.029747, 0.059716, 0.089689, 0.11966, 0.12722, 0.15717, 0.18708, 0.21693, 0.24672, 0.27643, 0.30396, 0.33368, 0.3633, 0.39281, 0.42218, 0.4514, 0.4681, 0.49721, 0.52616, 0.55492, 0.58349, 0.61093, 0.63925, 0.66685, 0.69359, 0.71935, 0.74062, 0.7636, 0.78573, 0.80698, 0.8273, 0.84666, 0.86315, 0.87892, 0.89244, 0.90364, 0.91242, 0.91871, 0.9211, 0.9276, 0.93339, 0.93848, 0.94286, 0.94653, 0.94884, 0.95106, 0.95307, 0.95487, 0.95647, 0.95787, 0.95906, 0.96005, 0.96083, 0.96141, 0.96178, 0.96194, 0.9619, 0.96172, 0.95925, 0.95688, 0.95463, 0.95247, 0.95043, 0.94849, 0.94665, 0.94492, 0.9433, 0.94179, 0.94038, 0.93907, 0.93787, 0.93678, 0.9358, 0.93492, 0.93415, 0.93348, 0.93292, 0.93247, 0.93212, 0.93188, 0.93174, 0.93171, 0.93179, 0.93197, 0.93226, 0.93266, 0.93316, 0.93377, 0.93449, 0.93531, 0.93624, 0.93727, 0.93841, 0.93966, 0.94101, 0.94138, 0.94166, 0.94191, 0.94215, 0.94237, 0.94257, 0.94275, 0.94292, 0.94307, 0.94319, 0.9433, 0.94339, 0.94347, 0.94352, 0.94356, 0.94357, 0.94357, 0.94355, 0.94352, 0.94346, 0.94339, 0.94329, 0.94318, 0.94305, 0.9429, 0.94274, 0.94255, 0.94235, 0.94212, 0.942, 0.94325, 0.94446, 0.94565, 0.94682, 0.94795, 0.94905, 0.95013, 0.95118, 0.9522, 0.95319, 0.95416, 0.95509, 0.956, 0.95688, 0.95773, 0.95855, 0.95934, 0.96011, 0.96085, 0.96156, 0.96202, 0.96244, 0.96277, 0.96301, 0.96316, 0.96322, 0.96319, 0.96307, 0.96286, 0.96256, 0.96217, 0.96169, 0.96112, 0.96046, 0.95971, 0.95888, 0.95795, 0.95786, 0.95653, 0.95526, 0.95404, 0.95288, 0.95224, 0.95144, 0.94989, 0.94759, 0.94456, 0.94079, 0.93628, 0.93424, 0.92536, 0.91349, 0.89876, 0.88133, 0.86141, 0.83922, 0.837,
	// 					  0.81408, 0.79121, 0.76841, 0.74566, 0.72297, 0.70033, 0.67776, 0.67748, 0.65204, 0.62607, 0.59959, 0.57263, 0.54524, 0.51743, 0.48925, 0.48857, 0.46045, 0.43188, 0.40291, 0.37362, 0.34405, 0.31428, 0.29409, 0.26419, 0.23427, 0.20434, 0.1744, 0.14445, 0.11449, 0.0992, 0.069234, 0.039248, 0.0092508, 0.0044006, -0.00044952, -0.030444, -0.060434, -0.090416, -0.12039, -0.15035, -0.1803, -0.19676, -0.22672, -0.25665, -0.28652, -0.31633, -0.34607, -0.37571, -0.39708, -0.42603, -0.45476, -0.48325, -0.51149, -0.53946, -0.56712, -0.59448, -0.59764, -0.62476, -0.65116, -0.67674, -0.70144, -0.72518, -0.74789, -0.7695, -0.77375, -0.79758, -0.82069, -0.84304, -0.86459, -0.88531, -0.90517, -0.91487, -0.92457, -0.93894, -0.95109, -0.96096, -0.96848, -0.97358, -0.97625, -0.97661, -0.97847, -0.98017, -0.98171, -0.98309, -0.98431, -0.98537, -0.98552, -0.98688, -0.9881, -0.98918, -0.99012, -0.99091, -0.99157, -0.99208, -0.99245, -0.99267, -0.99273, -0.99296, -0.99311, -0.99318, -0.99315, -0.99305, -0.99286, -0.99258, -0.99222, -0.99178, -0.99124, -0.99063, -0.98993, -0.98914, -0.98827, -0.98732, -0.98628, -0.98551, -0.98378, -0.98217, -0.98067, -0.97928, -0.97801, -0.97684, -0.97579, -0.97484, -0.97401, -0.97329, -0.97269, -0.97219, -0.97181, -0.97153, -0.97137, -0.97133, -0.97139, -0.97156, -0.97185, -0.97225, -0.97276, -0.97338, -0.97347, -0.97353, -0.97358, -0.9736, -0.97361, -0.97359, -0.97356, -0.97351, -0.97343, -0.97334, -0.97323, -0.9731, -0.97294, -0.97277, -0.97258, -0.97237, -0.97214, -0.97189, -0.97162, -0.97133, -0.97103, -0.9707, -0.97035, -0.96998, -0.9696, -0.96919, -0.96876, -0.96832, -0.96785, -0.96737, -0.96686, -0.96634, -0.9658, -0.96523, -0.96465, -0.96405, -0.96343, -0.96268, -0.96557, -0.9683, -0.97088, -0.97331, -0.97559, -0.97772, -0.9797, -0.98153, -0.98321, -0.98473, -0.98611, -0.98734, -0.98841, -0.98934, -0.99011, -0.99073, -0.99121, -0.99153, -0.9917, -0.99172, -0.99159, -0.99131, -0.99087, -0.99029, -0.98956, -0.98867, -0.98763, -0.98645, -0.98525, -0.98394, -0.98204, -0.97956, -0.9765, -0.97286, -0.96864, -0.96754, -0.96216, -0.95631, -0.95, -0.94322, -0.93598, -0.92899, -0.91711, -0.90326, -0.8875, -0.86992, -0.85062, -0.82969, -0.82641, -0.80567, -0.78353, -0.76008, -0.73542, -0.70968, -0.69121, -0.66364, -0.63575, -0.60758, -0.57913, -0.55044, -0.54678, -0.51787, -0.48885, -0.45972, -0.43049, -0.40116, -0.39368, -0.36407, -0.33444, -0.30478, -0.27509, -0.24538, -0.2221, -0.19223, -0.16232, -0.13239, -0.10244, -0.072466, -0.042483, -0.037758, -0.0078137, 0.0012236, 0.03119, 0.06116, 0.091132, 0.12111, 0.12863, 0.15858, 0.18849, 0.21835, 0.24814, 0.27786, 0.30749, 0.30768, 0.3374, 0.36703, 0.39654, 0.42592, 0.45515, 0.47503, 0.50414, 0.53309, 0.56186, 0.59045, 0.61883, 0.61984, 0.64818, 0.67585, 0.70274, 0.72872, 0.75371, 0.75941, 0.7824, 0.80459, 0.82593, 0.84639, 0.86593, 0.88451, 0.88797, 0.90383, 0.91762, 0.92929, 0.93874, 0.94592, 0.95079, 0.95031, 0.95681, 0.96263, 0.96776, 0.9722, 0.97594, 0.97875, 0.98097, 0.98298, 0.98479, 0.9864, 0.9878, 0.989, 0.98999, 0.99078, 0.99137, 0.99176, 0.99194, 0.99192, 0.99161, 0.98914, 0.98678, 0.98452, 0.98237, 0.98033, 0.97839, 0.97656, 0.97483, 0.97321, 0.9717, 0.97029, 0.96899, 0.9678, 0.96671, 0.96573, 0.96486, 0.96409, 0.96343, 0.96288, 0.96243, 0.96209, 0.96186, 0.96173, 0.96172, 0.9618, 0.962, 0.9623, 0.9627, 0.96322, 0.96384, 0.96456, 0.9654, 0.96634, 0.96738, 0.96854, 0.96979, 0.97116, 0.97138, 0.97165, 0.97191, 0.97215, 0.97237, 0.97257, 0.97275, 0.97292, 0.97306, 0.97319, 0.9733, 0.97339, 0.97347, 0.97352, 0.97356, 0.97357, 0.97357, 0.97355, 0.97352, 0.97346, 0.97339, 0.97329, 0.97318, 0.97305, 0.9729, 0.97274, 0.97255, 0.97235, 0.97213, 0.97197, 0.97322, 0.97444, 0.97563, 0.97679, 0.97792, 0.97903, 0.9801, 0.98115, 0.98217, 0.98317, 0.98413, 0.98507, 0.98597, 0.98685, 0.9877,
	// 					  0.98853, 0.98932, 0.99009, 0.99083, 0.99154, 0.99202, 0.99244, 0.99276, 0.993, 0.99315, 0.99322, 0.99319, 0.99307, 0.99286, 0.99256, 0.99218, 0.9917, 0.99114, 0.99048, 0.98974, 0.9889, 0.98798, 0.98783, 0.9865, 0.98523, 0.98401, 0.98285, 0.98224, 0.98144, 0.97992, 0.97767, 0.9747, 0.97101, 0.9666, 0.96333, 0.9546, 0.94315, 0.92909, 0.91255, 0.89368, 0.87266, 0.85632, 0.8334, 0.81054, 0.78773, 0.76498, 0.74229, 0.71966, 0.70674, 0.69382, 0.6684, 0.64245, 0.61601, 0.58911, 0.56178, 0.53405, 0.50594, 0.49967, 0.47157, 0.44302, 0.4141, 0.38485, 0.35533, 0.3256, 0.29662, 0.26672, 0.2368, 0.20688, 0.17693, 0.14698, 0.11702, 0.10086, 0.070896, 0.04091, 0.010914, 0.0050153, -0.00088304, -0.030878, -0.060867, -0.09085, -0.12082, -0.15079, -0.18074, -0.19793, -0.2279, -0.25782, -0.2877, -0.31752, -0.34726, -0.37691, -0.40456, -0.43351, -0.46225, -0.49077, -0.51903, -0.54703, -0.57474, -0.60214, -0.6097, -0.63685, -0.6633, -0.68899, -0.71385, -0.73782, -0.76083, -0.78282, -0.7915, -0.81535, -0.8385, -0.86092, -0.88257, -0.90343, -0.92348, -0.94267, -0.9503, -0.96474, -0.97716, -0.98747, -0.99561, -1.0015, -1.0052, -1.0067, -1.0065, -1.0084, -1.0101, -1.0116, -1.013, -1.0143, -1.0153, -1.0155, -1.0168, -1.0181, -1.0191, -1.0201, -1.0209, -1.0215, -1.0221, -1.0224, -1.0227, -1.0227, -1.023, -1.0231, -1.0232, -1.0232, -1.023, -1.0229, -1.0226, -1.0222, -1.0218, -1.0213, -1.0206, -1.0199, -1.0192, -1.0183, -1.0173, -1.0163, -1.0155, -1.0137, -1.0121, -1.0106, -1.0092, -1.008, -1.0068, -1.0057, -1.0048, -1.004, -1.0033, -1.0027, -1.0022, -1.0018, -1.0015, -1.0014, -1.0013, -1.0014, -1.0016, -1.0019, -1.0023, -1.0028, -1.0034, -1.0035, -1.0035, -1.0036, -1.0036, -1.0036, -1.0036, -1.0036, -1.0035, -1.0034, -1.0033, -1.0032, -1.0031, -1.0029, -1.0028, -1.0026, -1.0024, -1.0021, -1.0019, -1.0016, -1.0013, -1.001, -1.0007, -1.0004, -0.99999, -0.9996, -0.99919, -0.99877, -0.99832, -0.99786, -0.99737, -0.99687, -0.99635, -0.9958, -0.99524, -0.99466, -0.99406, -0.99344, -0.99254, -0.99542, -0.99815, -1.0007, -1.0032, -1.0055, -1.0076, -1.0096, -1.0114, -1.0131, -1.0146, -1.016, -1.0172, -1.0183, -1.0193, -1.0201, -1.0207, -1.0212, -1.0215, -1.0217, -1.0217, -1.0216, -1.0213, -1.0209, -1.0204, -1.0196, -1.0188, -1.0178, -1.0166, -1.0153, -1.0152, -1.0139, -1.012, -1.0096, -1.0066, -1.003, -0.99882, -0.99709, -0.99172, -0.98588, -0.97959, -0.97284, -0.96563, -0.96129, -0.95695, -0.94514, -0.93149, -0.91604, -0.89889, -0.8801, -0.85977, -0.84877, -0.82808, -0.80606, -0.78281, -0.75841, -0.73296, -0.70656, -0.70341, -0.67584, -0.64796, -0.61981, -0.59138, -0.56272, -0.555, -0.52609, -0.49707, -0.46795, -0.43872, -0.4094, -0.39864, -0.36904, -0.33941, -0.30975, -0.28006, -0.25035, -0.225, -0.19512, -0.16521, -0.13528, -0.10533, -0.075362, -0.045379, -0.040586, -0.010645, 0.0026671, 0.032634, 0.062604, 0.092576, 0.12255, 0.13004, 0.15999, 0.1899, 0.21976, 0.24956, 0.27929, 0.30893, 0.31139, 0.34112, 0.37075, 0.40026, 0.42966, 0.45891, 0.48195, 0.51106, 0.54002, 0.5688, 0.5974, 0.62581, 0.62875, 0.65711, 0.68485, 0.71185, 0.73804, 0.7633, 0.7782, 0.80121, 0.82344, 0.84487, 0.86545, 0.88515, 0.90395, 0.9128, 0.92872, 0.94275, 0.95481, 0.96483, 0.97276, 0.97857, 0.97952, 0.98603, 0.99187, 0.99704, 1.0015, 1.0053, 1.0085, 1.0087, 1.0109, 1.0129, 1.0147, 1.0163, 1.0177, 1.0189, 1.0199, 1.0207, 1.0213, 1.0217, 1.0219, 1.0219, 1.0217, 1.0215, 1.019, 1.0167, 1.0144, 1.0123, 1.0102, 1.0083, 1.0065, 1.0047, 1.0031, 1.0016, 1.0002, 0.99891, 0.99773, 0.99664, 0.99567, 0.9948, 0.99404, 0.99339, 0.99284, 0.9924, 0.99207, 0.99185, 0.99173, 0.99172, 0.99181, 0.99202, 0.99233, 0.99274, 0.99327, 0.9939, 0.99464, 0.99548, 0.99644, 0.9975, 0.99866, 0.99993, 1.0007, 1.0014, 1.0017, 1.0019, 1.0021, 1.0024, 1.0026, 1.0028, 1.0029, 1.0031, 1.0032, 1.0033, 1.0034, 1.0035, 1.0035, 1.0036, 1.0036, 1.0036, 1.0036, 1.0035,
	// 					  1.0035, 1.0034, 1.0033, 1.0032, 1.0031, 1.0029, 1.0027, 1.0026, 1.0024, 1.0021, 1.0019, 1.0032, 1.0044, 1.0056, 1.0068, 1.0079, 1.009, 1.0101, 1.0111, 1.0121, 1.0131, 1.0141, 1.015, 1.0159, 1.0168, 1.0177, 1.0185, 1.0193, 1.0201, 1.0208, 1.0215, 1.022, 1.0224, 1.0228, 1.023, 1.0232, 1.0232, 1.0232, 1.0231, 1.0229, 1.0226, 1.0222, 1.0217, 1.0212, 1.0205, 1.0198, 1.0189, 1.018, 1.0178, 1.0165, 1.0152, 1.014, 1.0128, 1.0122, 1.0114, 1.01, 1.0077, 1.0048, 1.0012, 0.9969, 0.99242, 0.98381, 0.97271, 0.95921, 0.94342, 0.92545, 0.90544, 0.88355, 0.87564, 0.85272, 0.82986, 0.80705, 0.7843, 0.76161, 0.73898, 0.72457, 0.71017, 0.68475, 0.65882, 0.63242, 0.60557, 0.5783, 0.55064, 0.52262, 0.51078, 0.48268, 0.45416, 0.42528, 0.39607, 0.3666, 0.33692, 0.30708, 0.29915, 0.26925, 0.23933, 0.20941, 0.17947, 0.14951, 0.11955, 0.10252, 0.072558, 0.042573, 0.012576, 0.00563, -0.0013166, -0.031311, -0.061301, -0.091284, -0.12126, -0.15122, -0.18117, -0.1991, -0.22907, -0.259, -0.28888, -0.3187, -0.34845, -0.37811, -0.39508, -0.41205, -0.441, -0.46975, -0.49828, -0.52656, -0.55459, -0.58234, -0.6098, -0.62177, -0.64893, -0.67543, -0.70122, -0.72623, -0.7504, -0.77367, -0.796, -0.81731, -0.80925, -0.83311, -0.8563, -0.87878, -0.90054, -0.92153, -0.94174, -0.96113, -0.97602, -0.99054, -1.0032, -1.0139, -1.0225, -1.0292, -1.0337, -1.0362, -1.0365, -1.0383, -1.04, -1.0416, -1.043, -1.0442, -1.0453, -1.0454, -1.0468, -1.048, -1.0491, -1.0501, -1.0509, -1.0515, -1.052, -1.0524, -1.0527, -1.0527, -1.053, -1.0531, -1.0532, -1.0532, -1.0531, -1.0529, -1.0526, -1.0522, -1.0518, -1.0513, -1.0507, -1.05, -1.0492, -1.0483, -1.0474, -1.0463, -1.0454, -1.0437, -1.0421, -1.0406, -1.0392, -1.0379, -1.0367, -1.0357, -1.0348, -1.0339, -1.0332, -1.0326, -1.0321, -1.0318, -1.0315, -1.0314, -1.0313, -1.0314, -1.0316, -1.0319, -1.0323, -1.0328, -1.0332, -1.0335, -1.0335, -1.0336, -1.0336, -1.0336, -1.0336, -1.0336, -1.0335, -1.0334, -1.0333, -1.0332, -1.0331, -1.0329, -1.0328, -1.0326, -1.0324, -1.0321, -1.0319, -1.0316, -1.0313, -1.031, -1.0307, -1.0304, -1.03, -1.0296, -1.0292, -1.0288, -1.0283, -1.0279, -1.0274, -1.0269, -1.0264, -1.0258, -1.0252, -1.0247, -1.0241, -1.0234, -1.0224, -1.0253, -1.028, -1.0306, -1.033, -1.0353, -1.0375, -1.0394, -1.0413, -1.043, -1.0445, -1.0459, -1.0472, -1.0482, -1.0492, -1.05, -1.0506, -1.0511, -1.0515, -1.0517, -1.0517, -1.0516, -1.0514, -1.051, -1.0504, -1.0497, -1.0489, -1.0479, -1.0467, -1.0455, -1.0452, -1.0439, -1.042, -1.0396, -1.0366, -1.0331, -1.029, -1.0266, -1.0213, -1.0155, -1.0092, -1.0024, -0.99527, -0.99009, -0.98492, -0.97317, -0.95968, -0.94452, -0.92774, -0.90941, -0.88961, -0.86841, -0.87113, -0.85047, -0.82857, -0.80549, -0.78133, -0.75615, -0.73005, -0.7156, -0.68803, -0.66017, -0.63203, -0.60363, -0.57499, -0.56322, -0.53432, -0.5053, -0.47617, -0.44695, -0.41764, -0.40361, -0.37401, -0.34437, -0.31472, -0.28503, -0.25532, -0.22789, -0.19801, -0.16811, -0.13818, -0.10823, -0.078258, -0.048276, -0.043414, -0.013477, 0.0041107, 0.034077, 0.064047, 0.09402, 0.12399, 0.13145, 0.1614, 0.19132, 0.22118, 0.25098, 0.28071, 0.31036, 0.31511, 0.34483, 0.37447, 0.40399, 0.43339, 0.46266, 0.48888, 0.51799, 0.54695, 0.57575, 0.60436, 0.63278, 0.63765, 0.66604, 0.69383, 0.72094, 0.7473, 0.77281, 0.79699, 0.82001, 0.84229, 0.86379, 0.88449, 0.90435, 0.92333, 0.93762, 0.95361, 0.96784, 0.98023, 0.99075, 0.99932, 1.0059, 1.0087, 1.0152, 1.0211, 1.0263, 1.0309, 1.0347, 1.038, 1.0386, 1.0408, 1.0428, 1.0446, 1.0462, 1.0477, 1.0489, 1.0499, 1.0507, 1.0513, 1.0517, 1.0519, 1.0519, 1.0517, 1.0514, 1.0489, 1.0466, 1.0443, 1.0422, 1.0401, 1.0382, 1.0364, 1.0346, 1.033, 1.0315, 1.0301, 1.0288, 1.0277, 1.0266, 1.0256, 1.0247, 1.024, 1.0233, 1.0228, 1.0224, 1.0221, 1.0218, 1.0217, 1.0217, 1.0218, 1.022, 1.0224, 1.0228, 1.0233, 1.024, 1.0247, 1.0256, 1.0265, 1.0276, 1.0288, 1.0301, 1.0314, 1.0317,
	// 					  1.0319, 1.0321, 1.0324, 1.0326, 1.0328, 1.0329, 1.0331, 1.0332, 1.0333, 1.0334, 1.0335, 1.0335, 1.0336, 1.0336, 1.0336, 1.0336, 1.0335, 1.0335, 1.0334, 1.0333, 1.0332, 1.0331, 1.0329, 1.0327, 1.0326, 1.0324, 1.0321, 1.0319, 1.0332, 1.0344, 1.0356, 1.0367, 1.0379, 1.039, 1.0401, 1.0411, 1.0421, 1.0431, 1.0441, 1.045, 1.0459, 1.0468, 1.0477, 1.0485, 1.0493, 1.05, 1.0508, 1.0515, 1.052, 1.0524, 1.0528, 1.053, 1.0532, 1.0532, 1.0532, 1.0531, 1.0529, 1.0526, 1.0522, 1.0517, 1.0512, 1.0505, 1.0498, 1.049, 1.048, 1.0478, 1.0464, 1.0452, 1.0439, 1.0428, 1.0422, 1.0415, 1.04, 1.0378, 1.035, 1.0314, 1.0272, 1.0243, 1.0215, 1.013, 1.0022, 0.98917, 0.97402, 0.95682, 0.9377, 0.91678, 0.89419, 0.89496, 0.87204, 0.84918, 0.82637, 0.80363, 0.78094, 0.75831, 0.74241, 0.72651, 0.7011, 0.6752, 0.64884, 0.62203, 0.59482, 0.56722, 0.53927, 0.52188, 0.4938, 0.4653, 0.43645, 0.40728, 0.37786, 0.34822, 0.31842, 0.30168, 0.27178, 0.24186, 0.21194, 0.182, 0.15204, 0.12208, 0.10419, 0.07422, 0.044235, 0.014239, 0.0062446, -0.0017501, -0.031745, -0.061735, -0.091717, -0.12169, -0.15165, -0.18161, -0.20028, -0.23024, -0.26017, -0.29005, -0.31988, -0.34963, -0.37931, -0.40889, -0.41953, -0.44849, -0.47725, -0.50579, -0.5341, -0.56215, -0.58994, -0.61745, -0.63383, -0.66101, -0.68756, -0.71344, -0.73858, -0.76293, -0.78644, -0.80905, -0.83073, -0.827, -0.85088, -0.8741, -0.89665, -0.91849, -0.93961, -0.95997, -0.97955, -0.99065, -1.0017, -1.0163, -1.0291, -1.0402, -1.0493, -1.0566, -1.0619, -1.0652, -1.0666, -1.0664, -1.0683, -1.07, -1.0715, -1.0729, -1.0742, -1.0752, -1.0754, -1.0768, -1.078, -1.0791, -1.08, -1.0808, -1.0815, -1.082, -1.0824, -1.0827, -1.0827, -1.083, -1.0831, -1.0832, -1.0832, -1.0831, -1.0829, -1.0826, -1.0822, -1.0818, -1.0813, -1.0807, -1.08, -1.0792, -1.0783, -1.0774, -1.0764, -1.0753, -1.0736, -1.072, -1.0705, -1.0691, -1.0679, -1.0667, -1.0657, -1.0647, -1.0639, -1.0632, -1.0626, -1.0621, -1.0618, -1.0615, -1.0614, -1.0613, -1.0614, -1.0616, -1.0619, -1.0623, -1.0629, -1.0635, -1.0635, -1.0636, -1.0636, -1.0636, -1.0636, -1.0636, -1.0635, -1.0634, -1.0633, -1.0632, -1.0631, -1.0629, -1.0628, -1.0626, -1.0624, -1.0621, -1.0619, -1.0616, -1.0613, -1.061, -1.0607, -1.0604, -1.06, -1.0596, -1.0592, -1.0588, -1.0583, -1.0579, -1.0574, -1.0569, -1.0564, -1.0558, -1.0553, -1.0547, -1.0541, -1.0535, -1.0528, -1.0522, -1.0551, -1.0579, -1.0604, -1.0629, -1.0652, -1.0673, -1.0693, -1.0712, -1.0729, -1.0744, -1.0758, -1.0771, -1.0782, -1.0791, -1.0799, -1.0806, -1.0811, -1.0815, -1.0817, -1.0817, -1.0816, -1.0814, -1.081, -1.0805, -1.0798, -1.079, -1.078, -1.0769, -1.0756, -1.0752, -1.0739, -1.072, -1.0696, -1.0667, -1.0632, -1.0592, -1.0562, -1.0508, -1.045, -1.0388, -1.0321, -1.0249, -1.0173, -1.0129, -1.0012, -0.98785, -0.97293, -0.95649, -0.93857, -0.91924, -0.89858, -0.89348, -0.87287, -0.85107, -0.82815, -0.80419, -0.77925, -0.75343, -0.72779, -0.70023, -0.67238, -0.64426, -0.61588, -0.58726, -0.57145, -0.54254, -0.51352, -0.4844, -0.45518, -0.42587, -0.40857, -0.37897, -0.34934, -0.31968, -0.29, -0.26028, -0.23078, -0.20091, -0.171, -0.14107, -0.11112, -0.081154, -0.051172, -0.046242, -0.016308, 0.0055542, 0.035521, 0.065491, 0.095463, 0.12544, 0.13286, 0.16281, 0.19273, 0.22259, 0.2524, 0.28214, 0.3118, 0.31882, 0.34855, 0.37819, 0.40772, 0.43713, 0.46641, 0.49554, 0.4958, 0.52492, 0.55388, 0.58269, 0.61131, 0.63975, 0.64656, 0.67496, 0.7028, 0.73001, 0.75652, 0.78223, 0.80709, 0.81577, 0.83881, 0.86114, 0.88271, 0.90351, 0.92351, 0.94267, 0.95256, 0.96244, 0.97849, 0.99289, 1.0056, 1.0165, 1.0257, 1.033, 1.0384, 1.0379, 1.0445, 1.0503, 1.0556, 1.0602, 1.0641, 1.0674, 1.0685, 1.0707, 1.0727, 1.0745, 1.0762, 1.0776, 1.0788, 1.0798, 1.0806, 1.0813, 1.0817, 1.0819, 1.0819, 1.0818, 1.0813, 1.0788, 1.0765, 1.0742, 1.0721, 1.07, 1.0681, 1.0663, 1.0645, 1.0629, 1.0614, 1.06, 1.0588, 1.0576, 1.0565, 1.0555,
	// 					  1.0547, 1.0539, 1.0533, 1.0528, 1.0523, 1.052, 1.0518, 1.0517, 1.0517, 1.0518, 1.0521, 1.0524, 1.0528, 1.0534, 1.054, 1.0548, 1.0557, 1.0566, 1.0577, 1.0589, 1.0602, 1.0614, 1.0616, 1.0619, 1.0621, 1.0624, 1.0626, 1.0628, 1.0629, 1.0631, 1.0632, 1.0633, 1.0634, 1.0635, 1.0635, 1.0636, 1.0636, 1.0636, 1.0636, 1.0635, 1.0635, 1.0634, 1.0633, 1.0632, 1.0631, 1.0629, 1.0627, 1.0626, 1.0624, 1.0621, 1.0619, 1.0631, 1.0644, 1.0655, 1.0667, 1.0678, 1.0689, 1.07, 1.0711, 1.0721, 1.0731, 1.0741, 1.075, 1.0759, 1.0768, 1.0776, 1.0785, 1.0793, 1.08, 1.0808, 1.0815, 1.082, 1.0824, 1.0828, 1.083, 1.0831, 1.0832, 1.0832, 1.0831, 1.0829, 1.0826, 1.0822, 1.0817, 1.0812, 1.0805, 1.0798, 1.079, 1.0781, 1.0777, 1.0764, 1.0751, 1.0739, 1.0728, 1.0722, 1.0715, 1.07, 1.0679, 1.0651, 1.0616, 1.0575, 1.0527, 1.0506, 1.0422, 1.0316, 1.019, 1.0044, 0.98788, 0.96953, 0.94947, 0.92779, 0.91429, 0.89136, 0.8685, 0.8457, 0.82295, 0.80026, 0.77763, 0.76024, 0.74285, 0.71745, 0.69157, 0.66524, 0.63849, 0.61133, 0.58379, 0.55591, 0.5277, 0.53299, 0.50491, 0.47644, 0.44762, 0.41849, 0.38911, 0.35951, 0.32974, 0.30421, 0.27431, 0.24439, 0.21447, 0.18453, 0.15458, 0.12461, 0.10585, 0.075882, 0.045898, 0.015902, 0.0068593, -0.0021836, -0.032178, -0.062168, -0.092151, -0.12213, -0.15209, -0.18204, -0.20145, -0.23141, -0.26134, -0.29123, -0.32106, -0.35082, -0.3805, -0.4101, -0.42702, -0.45598, -0.48474, -0.5133, -0.54162, -0.56971, -0.59753, -0.62508, -0.6459, -0.67308, -0.69968, -0.72564, -0.7509, -0.77541, -0.79913, -0.82201, -0.844, -0.86507, -0.84476, -0.86864, -0.89189, -0.9145, -0.93643, -0.95766, -0.97816, -0.99791, -1.0127, -1.0275, -1.0421, -1.0551, -1.0664, -1.0759, -1.0837, -1.0897, -1.0938, -1.0962, -1.0964, -1.0982, -1.0999, -1.1015, -1.1029, -1.1041, -1.1052, -1.1054, -1.1067, -1.108, -1.1091, -1.11, -1.1108, -1.1115, -1.112, -1.1124, -1.1126, -1.1127, -1.113, -1.1131, -1.1132, -1.1132, -1.1131, -1.1129, -1.1126, -1.1122, -1.1118, -1.1113, -1.1107, -1.11, -1.1092, -1.1084, -1.1074, -1.1064, -1.1053, -1.1036, -1.102, -1.1005, -1.0991, -1.0978, -1.0967, -1.0956, -1.0947, -1.0939, -1.0932, -1.0926, -1.0921, -1.0917, -1.0915, -1.0914, -1.0913, -1.0914, -1.0916, -1.0919, -1.0924, -1.0929, -1.0935, -1.0935, -1.0936, -1.0936, -1.0936, -1.0936, -1.0936, -1.0935, -1.0934, -1.0933, -1.0932, -1.0931, -1.0929, -1.0928, -1.0926, -1.0924, -1.0921, -1.0919, -1.0916, -1.0913, -1.091, -1.0907, -1.0904, -1.09, -1.0896, -1.0892, -1.0888, -1.0883, -1.0879, -1.0874, -1.0869, -1.0864, -1.0858, -1.0853, -1.0847, -1.0841, -1.0835, -1.0828, -1.0821, -1.085, -1.0877, -1.0903, -1.0927, -1.095, -1.0972, -1.0992, -1.101, -1.1027, -1.1043, -1.1057, -1.107, -1.1081, -1.109, -1.1099, -1.1105, -1.1111, -1.1114, -1.1117, -1.1117, -1.1117, -1.1114, -1.1111, -1.1106, -1.1099, -1.1091, -1.1081, -1.107, -1.1058, -1.1052, -1.1039, -1.102, -1.0997, -1.0968, -1.0933, -1.0893, -1.0858, -1.0804, -1.0746, -1.0683, -1.0617, -1.0546, -1.047, -1.0408, -1.0292, -1.016, -1.0013, -0.98515, -0.9676, -0.94871, -0.92853, -0.90712, -0.91584, -0.89526, -0.87355, -0.85078, -0.827, -0.80229, -0.77672, -0.75035, -0.73998, -0.71243, -0.68459, -0.65648, -0.62812, -0.59953, -0.57967, -0.55076, -0.52175, -0.49263, -0.46342, -0.43411, -0.41354, -0.38394, -0.35431, -0.32465, -0.29496, -0.26525, -0.24946, -0.23367, -0.2038, -0.17389, -0.14397, -0.11402, -0.084049, -0.054068, -0.04907, -0.019139, 0.0069978, 0.036965, 0.066934, 0.096907, 0.12688, 0.13427, 0.16422, 0.19414, 0.22401, 0.25382, 0.28356, 0.31323, 0.32254, 0.35227, 0.38191, 0.41144, 0.44086, 0.47015, 0.49931, 0.50273, 0.53184, 0.56081, 0.58963, 0.61826, 0.64672, 0.65547, 0.68388, 0.71177, 0.73906, 0.7657, 0.7916, 0.81671, 0.83456, 0.85761, 0.87998, 0.90162, 0.92251, 0.94264, 0.96197, 0.98048, 0.98727, 1.0034, 1.0179, 1.0309, 1.0422, 1.0518, 1.0597, 1.0659, 1.0671, 1.0737, 1.0796, 1.0849, 1.0895, 1.0935, 1.0969, 1.0984,
	// 					  1.1006, 1.1026, 1.1045, 1.1061, 1.1075, 1.1087, 1.1098, 1.1106, 1.1112, 1.1117, 1.1119, 1.1119, 1.1118, 1.1112, 1.1087, 1.1064, 1.1041, 1.102, 1.0999, 1.098, 1.0962, 1.0945, 1.0928, 1.0913, 1.09, 1.0887, 1.0875, 1.0864, 1.0855, 1.0846, 1.0839, 1.0833, 1.0827, 1.0823, 1.082, 1.0818, 1.0817, 1.0817, 1.0819, 1.0821, 1.0824, 1.0829, 1.0834, 1.0841, 1.0849, 1.0858, 1.0867, 1.0878, 1.0891, 1.0904, 1.0914, 1.0916, 1.0919, 1.0921, 1.0924, 1.0926, 1.0927, 1.0929, 1.0931, 1.0932, 1.0933, 1.0934, 1.0935, 1.0935, 1.0936, 1.0936, 1.0936, 1.0936, 1.0935, 1.0935, 1.0934, 1.0933, 1.0932, 1.0931, 1.0929, 1.0927, 1.0926, 1.0924, 1.0921, 1.0919, 1.0931, 1.0943, 1.0955, 1.0967, 1.0978, 1.0989, 1.1, 1.1011, 1.1021, 1.1031, 1.104, 1.105, 1.1059, 1.1068, 1.1076, 1.1084, 1.1092, 1.11, 1.1107, 1.1115, 1.112, 1.1124, 1.1128, 1.113, 1.1131, 1.1132, 1.1132, 1.1131, 1.1129, 1.1126, 1.1122, 1.1118, 1.1112, 1.1106, 1.1098, 1.109, 1.1081, 1.1077, 1.1064, 1.1051, 1.1039, 1.1027, 1.1022, 1.1015, 1.1, 1.0979, 1.0952, 1.0918, 1.0877, 1.083, 1.0797, 1.0713, 1.061, 1.0487, 1.0346, 1.0187, 1.001, 0.98172, 0.96087, 0.93857, 0.93361, 0.91069, 0.88782, 0.86502, 0.84227, 0.81959, 0.79696, 0.77808, 0.7592, 0.7338, 0.70794, 0.68165, 0.65493, 0.62783, 0.60035, 0.57253, 0.54439, 0.54409, 0.51602, 0.48757, 0.45878, 0.42969, 0.40035, 0.37079, 0.34106, 0.3112, 0.30674, 0.27684, 0.24693, 0.217, 0.18706, 0.15711, 0.12715, 0.10751, 0.077545, 0.04756, 0.017565, 0.0074739, -0.0026171, -0.032612, -0.062602, -0.092585, -0.12256, -0.15252, -0.18248, -0.20262, -0.23258, -0.26251, -0.2924, -0.32224, -0.352, -0.3817, -0.4113, -0.43451, -0.46347, -0.49224, -0.52081, -0.54915, -0.57726, -0.60512, -0.63271, -0.66003, -0.65796, -0.68516, -0.7118, -0.73783, -0.76319, -0.78785, -0.81176, -0.83488, -0.85716, -0.87857, -0.86251, -0.8864, -0.90969, -0.93235, -0.95435, -0.97568, -0.99632, -1.0162, -1.0354, -1.0443, -1.0532, -1.0679, -1.081, -1.0925, -1.1025, -1.1107, -1.1173, -1.1221, -1.1252, -1.1266, -1.1263, -1.1282, -1.1299, -1.1314, -1.1328, -1.134, -1.1351, -1.1353, -1.1367, -1.1379, -1.139, -1.14, -1.1408, -1.1415, -1.142, -1.1424, -1.1426, -1.1427, -1.143, -1.1431, -1.1432, -1.1432, -1.1431, -1.1429, -1.1426, -1.1423, -1.1418, -1.1413, -1.1407, -1.14, -1.1392, -1.1384, -1.1374, -1.1364, -1.1358, -1.1352, -1.1335, -1.1319, -1.1304, -1.129, -1.1278, -1.1266, -1.1256, -1.1246, -1.1238, -1.1231, -1.1226, -1.1221, -1.1217, -1.1215, -1.1213, -1.1213, -1.1214, -1.1216, -1.122, -1.1224, -1.123, -1.1235, -1.1235, -1.1236, -1.1236, -1.1236, -1.1236, -1.1236, -1.1235, -1.1234, -1.1233, -1.1232, -1.1231, -1.1229, -1.1228, -1.1226, -1.1224, -1.1221, -1.1219, -1.1216, -1.1213, -1.121, -1.1207, -1.1204, -1.12, -1.1196, -1.1192, -1.1188, -1.1183, -1.1179, -1.1174, -1.1169, -1.1164, -1.1158, -1.1153, -1.1147, -1.1141, -1.1135, -1.1128, -1.112, -1.1148, -1.1176, -1.1202, -1.1226, -1.1249, -1.1271, -1.1291, -1.1309, -1.1326, -1.1342, -1.1356, -1.1369, -1.138, -1.139, -1.1398, -1.1405, -1.141, -1.1414, -1.1416, -1.1417, -1.1417, -1.1415, -1.1411, -1.1406, -1.14, -1.1392, -1.1383, -1.1372, -1.1359, -1.1352, -1.1339, -1.1321, -1.1297, -1.1268, -1.1234, -1.1195, -1.1153, -1.11, -1.1042, -1.0979, -1.0913, -1.0842, -1.0767, -1.0688, -1.0572, -1.0441, -1.0296, -1.0137, -0.99653, -0.97802, -0.95828, -0.93736, -0.9382, -0.91765, -0.89602, -0.87338, -0.84977, -0.82527, -0.79992, -0.77381, -0.75218, -0.72462, -0.69679, -0.6687, -0.64036, -0.6118, -0.58789, -0.55898, -0.52997, -0.50086, -0.47165, -0.44235, -0.4185, -0.3889, -0.35927, -0.32961, -0.29993, -0.27022, -0.25339, -0.23657, -0.20669, -0.17679, -0.14686, -0.11691, -0.086945, -0.056965, -0.051898, -0.02197, -0.0067641, 0.0084413, 0.038408, 0.068378, 0.09835, 0.12833, 0.13568, 0.16564, 0.19555, 0.22542, 0.25524, 0.28499, 0.31466, 0.32625, 0.35598, 0.38563, 0.41517, 0.4446, 0.4739, 0.50307, 0.50965, 0.53877, 0.56775, 0.59656, 0.62521,
	// 					  0.65369, 0.66438, 0.6928, 0.72073, 0.7481, 0.77485, 0.80092, 0.82624, 0.83979, 0.85335, 0.87641, 0.89881, 0.92052, 0.9415, 0.96175, 0.98123, 0.99992, 1.0121, 1.0282, 1.0429, 1.0561, 1.0677, 1.0778, 1.0862, 1.093, 1.0982, 1.0963, 1.1029, 1.1088, 1.1141, 1.1188, 1.1229, 1.1263, 1.1283, 1.1305, 1.1325, 1.1344, 1.136, 1.1374, 1.1387, 1.1397, 1.1405, 1.1412, 1.1416, 1.1419, 1.1419, 1.1418, 1.1411, 1.1386, 1.1363, 1.134, 1.1319, 1.1298, 1.1279, 1.1261, 1.1244, 1.1228, 1.1213, 1.1199, 1.1186, 1.1174, 1.1164, 1.1154, 1.1146, 1.1138, 1.1132, 1.1127, 1.1123, 1.112, 1.1118, 1.1117, 1.1117, 1.1119, 1.1121, 1.1125, 1.1129, 1.1135, 1.1142, 1.115, 1.1159, 1.1169, 1.118, 1.1192, 1.1205, 1.1214, 1.1216, 1.1219, 1.1221, 1.1224, 1.1226, 1.1227, 1.1229, 1.1231, 1.1232, 1.1233, 1.1234, 1.1235, 1.1235, 1.1236, 1.1236, 1.1236, 1.1236, 1.1235, 1.1235, 1.1234, 1.1233, 1.1232, 1.1231, 1.1229, 1.1227, 1.1226, 1.1224, 1.1221, 1.1218, 1.1231, 1.1243, 1.1255, 1.1267, 1.1278, 1.1289, 1.13, 1.131, 1.132, 1.133, 1.134, 1.1349, 1.1359, 1.1367, 1.1376, 1.1384, 1.1392, 1.14, 1.1407, 1.1414, 1.142, 1.1424, 1.1427, 1.143, 1.1431, 1.1432, 1.1432, 1.1431, 1.1429, 1.1426, 1.1422, 1.1418, 1.1412, 1.1406, 1.1398, 1.139, 1.1381, 1.1377, 1.1363, 1.1351, 1.1339, 1.1327, 1.1322, 1.1315, 1.1301, 1.128, 1.1253, 1.122, 1.118, 1.1134, 1.1088, 1.1005, 1.0903, 1.0784, 1.0647, 1.0493, 1.0322, 1.0136, 0.99349, 0.97198, 0.95293, 0.93001, 0.90715, 0.88434, 0.8616, 0.83891, 0.81628, 0.79591, 0.77554, 0.75015, 0.72431, 0.69805, 0.67137, 0.64432, 0.6169, 0.58914, 0.56107, 0.5552, 0.52713, 0.4987, 0.46994, 0.44089, 0.41159, 0.38207, 0.35237, 0.32255, 0.30927, 0.27937, 0.24946, 0.21953, 0.18959, 0.15964, 0.12968, 0.10917, 0.079207, 0.049223, 0.019228, -0.0029061, -0.032901, -0.062891, -0.092874, -0.12285, -0.15281, -0.18277, -0.2034, -0.23336, -0.2633, -0.29319, -0.32302, -0.35279, -0.38249, -0.41211, -0.4395, -0.46846, -0.49723, -0.52581, -0.55417, -0.5823, -0.61018, -0.6378, -0.66514, -0.666, -0.69321, -0.71988, -0.74594, -0.77138, -0.79613, -0.82016, -0.84342, -0.86588, -0.88749, -0.87434, -0.89824, -0.92155, -0.94424, -0.9663, -0.98769, -1.0084, -1.0284, -1.0477, -1.059, -1.0703, -1.0851, -1.0983, -1.11, -1.1201, -1.1286, -1.1355, -1.1408, -1.1444, -1.1463, -1.1463, -1.1481, -1.1498, -1.1514, -1.1528, -1.154, -1.1551, -1.1553, -1.1567, -1.1579, -1.159, -1.16, -1.1608, -1.1614, -1.162, -1.1624, -1.1626, -1.1627, -1.163, -1.1631, -1.1632, -1.1632, -1.1631, -1.1629, -1.1626, -1.1623, -1.1618, -1.1613, -1.1607, -1.16, -1.1592, -1.1584, -1.1575, -1.1564, -1.1558, -1.1552, -1.1535, -1.1519, -1.1504, -1.149, -1.1477, -1.1466, -1.1455, -1.1446, -1.1438, -1.1431, -1.1425, -1.1421, -1.1417, -1.1415, -1.1413, -1.1413, -1.1414, -1.1417, -1.142, -1.1424, -1.143, -1.1435, -1.1435, -1.1436, -1.1436, -1.1436, -1.1436, -1.1436, -1.1435, -1.1434, -1.1433, -1.1432, -1.1431, -1.1429, -1.1428, -1.1426, -1.1424, -1.1422, -1.1419, -1.1416, -1.1413, -1.141, -1.1407, -1.1404, -1.14, -1.1396, -1.1392, -1.1388, -1.1383, -1.1379, -1.1374, -1.1369, -1.1364, -1.1358, -1.1353, -1.1347, -1.1341, -1.1335, -1.1328, -1.1319, -1.1347, -1.1375, -1.1401, -1.1425, -1.1448, -1.147, -1.149, -1.1508, -1.1525, -1.1541, -1.1555, -1.1568, -1.1579, -1.1589, -1.1598, -1.1604, -1.161, -1.1614, -1.1616, -1.1617, -1.1617, -1.1615, -1.1612, -1.1607, -1.16, -1.1593, -1.1583, -1.1573, -1.156, -1.1552, -1.1539, -1.1521, -1.1497, -1.1469, -1.1435, -1.1396, -1.1373, -1.135, -1.1297, -1.1239, -1.1177, -1.111, -1.1039, -1.0965, -1.0919, -1.0874, -1.0759, -1.0629, -1.0485, -1.0328, -1.0158, -0.99749, -0.97802, -0.9574, -0.95311, -0.93257, -0.91099, -0.88843, -0.86493, -0.84055, -0.81536, -0.7894, -0.77485, -0.7603, -0.73275, -0.70493, -0.67685, -0.64852, -0.61998, -0.59337, -0.56446, -0.53545, -0.50634, -0.47714, -0.44784, -0.42181, -0.39221, -0.36258, -0.33293, -0.30324, -0.27353, -0.25601, -0.2385, -0.20862, -0.17872,
	// 					  -0.14879, -0.11884, -0.088875, -0.058896, -0.053784, -0.023857, -0.0072265, 0.0094037, 0.03937, 0.06934, 0.099313, 0.12929, 0.13662, 0.16658, 0.19649, 0.22637, 0.25618, 0.28594, 0.31562, 0.32873, 0.35846, 0.3881, 0.41765, 0.44708, 0.4764, 0.50558, 0.51427, 0.54339, 0.57237, 0.60119, 0.62985, 0.65833, 0.67032, 0.69875, 0.7267, 0.75412, 0.78094, 0.8071, 0.83256, 0.85724, 0.86588, 0.88895, 0.91137, 0.93311, 0.95415, 0.97448, 0.99405, 1.0129, 1.0286, 1.0448, 1.0596, 1.0729, 1.0847, 1.095, 1.1038, 1.111, 1.1166, 1.1158, 1.1224, 1.1283, 1.1336, 1.1384, 1.1425, 1.146, 1.1482, 1.1505, 1.1525, 1.1543, 1.1559, 1.1574, 1.1586, 1.1597, 1.1605, 1.1612, 1.1616, 1.1619, 1.162, 1.1618, 1.161, 1.1585, 1.1562, 1.1539, 1.1518, 1.1498, 1.1478, 1.146, 1.1443, 1.1427, 1.1412, 1.1398, 1.1385, 1.1374, 1.1363, 1.1354, 1.1345, 1.1338, 1.1332, 1.1327, 1.1323, 1.132, 1.1318, 1.1317, 1.1317, 1.1319, 1.1321, 1.1325, 1.133, 1.1335, 1.1342, 1.135, 1.1359, 1.1369, 1.138, 1.1393, 1.1406, 1.1414, 1.1416, 1.1419, 1.1421, 1.1424, 1.1426, 1.1427, 1.1429, 1.1431, 1.1432, 1.1433, 1.1434, 1.1435, 1.1435, 1.1436, 1.1436, 1.1436, 1.1436, 1.1435, 1.1435, 1.1434, 1.1433, 1.1432, 1.1431, 1.1429, 1.1428, 1.1426, 1.1424, 1.1421, 1.1418, 1.1431, 1.1443, 1.1455, 1.1466, 1.1478, 1.1489, 1.15, 1.151, 1.152, 1.153, 1.154, 1.1549, 1.1558, 1.1567, 1.1576, 1.1584, 1.1592, 1.16, 1.1607, 1.1614, 1.162, 1.1624, 1.1627, 1.163, 1.1631, 1.1632, 1.1632, 1.1631, 1.1629, 1.1626, 1.1622, 1.1618, 1.1612, 1.1606, 1.1599, 1.159, 1.1581, 1.1577, 1.1563, 1.1551, 1.1538, 1.1527, 1.1522, 1.1515, 1.1501, 1.148, 1.1454, 1.1421, 1.1381, 1.1336, 1.1282, 1.1199, 1.1099, 1.0981, 1.0847, 1.0696, 1.0529, 1.0347, 1.015, 0.994, 0.97168, 0.96581, 0.94289, 0.92003, 0.89722, 0.87448, 0.85179, 0.82916, 0.8078, 0.78644, 0.76105, 0.73523, 0.70898, 0.68233, 0.65531, 0.62793, 0.60021, 0.57218, 0.5626, 0.53454, 0.50612, 0.47738, 0.44835, 0.41907, 0.38958, 0.35991, 0.3301, 0.31096, 0.28106, 0.25114, 0.22121, 0.19128, 0.16132, 0.13136, 0.11028, 0.080315, 0.050331, 0.020336};
	// //int Car_idx = 3664;

    // double map_image_x[124] = {-1.50000000000000, -1, -0.500000000000000, 0, 0.500000000000000, 1, 1.50000000000000, 2, 2.50000000000000, 3, 3.50000000000000, 4, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1, -0.500000000000000, 0, 0.500000000000000, 1, 1.50000000000000, 2, 2.50000000000000, 3, 3.50000000000000, 4, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 4.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000, 9.30000000000000};
	// double map_image_y[124] = {-2.50000000000000, -2.50000000000000, -2.50000000000000, -2.50000000000000, -2.50000000000000, -2.50000000000000, -2.50000000000000, -2.50000000000000, -2.50000000000000, -2.50000000000000, -2.50000000000000, -2.50000000000000, -2.50000000000000, -2, -1.50000000000000, -1, -0.500000000000000, 0, 0.500000000000000, 1, 1.50000000000000, 2, 2.50000000000000, 2.50000000000000, 2.50000000000000, 2.50000000000000, 2.50000000000000, 2.50000000000000, 2.50000000000000, 2.50000000000000, 2.50000000000000, 2.50000000000000, 2.50000000000000, 2.50000000000000, 2.50000000000000, -2.50000000000000, -3, -3.50000000000000, -4, -4.50000000000000, -5, -5.50000000000000, -6, -6.50000000000000, -7, -7.50000000000000, -8, -8.50000000000000, -9, -9.50000000000000, -10, -10.5000000000000, -11, -11.5000000000000, -12, 2.50000000000000, 3, 3.50000000000000, 4, 4.50000000000000, 5, 5.50000000000000, 6, 6.50000000000000, 7, 7.50000000000000, 8, 8.50000000000000, 9, 9.50000000000000, 10, 10.5000000000000, 11, 11.5000000000000, 12, -12, -11.5000000000000, -11, -10.5000000000000, -10, -9.50000000000000, -9, -8.50000000000000, -8, -7.50000000000000, -7, -6.50000000000000, -6, -5.50000000000000, -5, -4.50000000000000, -4, -3.50000000000000, -3, -2.50000000000000, -2, -1.50000000000000, -1, -0.500000000000000, 0, 0.500000000000000, 1, 1.50000000000000, 2, 2.50000000000000, 3, 3.50000000000000, 4, 4.50000000000000, 5, 5.50000000000000, 6, 6.50000000000000, 7, 7.50000000000000, 8, 8.50000000000000, 9, 9.50000000000000, 10, 10.5000000000000, 11, 11.5000000000000, 12};
	// int MAP_INDEX = 124;

    // double map_image_vertical_x[201] = {-1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000, -1.50000000000000};
	// double map_image_vertical_y[201] = {-2.50000000000000, -2.47500000000000, -2.45000000000000, -2.42500000000000, -2.40000000000000, -2.37500000000000, -2.35000000000000, -2.32500000000000, -2.30000000000000, -2.27500000000000, -2.25000000000000, -2.22500000000000, -2.20000000000000, -2.17500000000000, -2.15000000000000, -2.12500000000000, -2.10000000000000, -2.07500000000000, -2.05000000000000, -2.02500000000000, -2, -1.97500000000000, -1.95000000000000, -1.92500000000000, -1.90000000000000, -1.87500000000000, -1.85000000000000, -1.82500000000000, -1.80000000000000, -1.77500000000000, -1.75000000000000, -1.72500000000000, -1.70000000000000, -1.67500000000000, -1.65000000000000, -1.6250, -1.60000000000000, -1.57500000000000, -1.55000000000000, -1.52500000000000, -1.50000000000000, -1.47500000000000, -1.45000000000000, -1.42500000000000, -1.40000000000000, -1.37500000000000, -1.35000000000000, -1.32500000000000, -1.30000000000000, -1.27500000000000, -1.25000000000000, -1.22500000000000, -1.20000000000000, -1.17500000000000, -1.15000000000000, -1.12500000000000, -1.10000000000000, -1.07500000000000, -1.05000000000000, -1.02500000000000, -1, -0.975000000000000, -0.950000000000000, -0.925000000000000, -0.900000000000000, -0.875000000000000, -0.850000000000000, -0.825000000000000, -0.800000000000000, -0.775000000000000, -0.750000000000000, -0.725000000000000, -0.700000000000000, -0.675000000000000, -0.650000000000000, -0.625, -0.600000000000000, -0.575000000000000, -0.550000000000000, -0.525000000000000, -0.500000000000000, -0.475000000000000, -0.450000000000000, -0.425000000000000, -0.400000000000000, -0.375000000000000, -0.350000000000000, -0.325000000000000, -0.300000000000000, -0.275000000000000, -0.250000000000000, -0.225000000000000, -0.200000000000000, -0.175000000000000, -0.150000000000000, -0.125000000000000, -0.0999999999999996, -0.0749999999999997, -0.0499999999999998, -0.0249999999999999, 0, 0.0250000000000004, 0.0500000000000003, 0.0750000000000002, 0.100000000000000, 0.125000000000000, 0.150000000000000, 0.175000000000000, 0.200000000000000, 0.225000000000000, 0.250000000000000, 0.275000000000000, 0.300000000000000, 0.325000000000000, 0.350000000000000, 0.375000000000000, 0.400000000000000, 0.425000000000000, 0.450000000000000, 0.475000000000000, 0.500000000000000, 0.525000000000000, 0.550000000000000, 0.575000000000000, 0.600000000000000, 0.625, 0.650000000000000, 0.675000000000000, 0.700000000000000, 0.725000000000000, 0.750000000000000, 0.775000000000000, 0.800000000000000, 0.825000000000000, 0.850000000000000, 0.875000000000000, 0.900000000000000, 0.925000000000000, 0.950000000000000, 0.975000000000000, 1, 1.02500000000000, 1.05000000000000, 1.07500000000000, 1.10000000000000, 1.12500000000000, 1.15000000000000, 1.17500000000000, 1.20000000000000, 1.22500000000000, 1.25000000000000, 1.27500000000000, 1.30000000000000, 1.32500000000000, 1.35000000000000, 1.37500000000000, 1.40000000000000, 1.42500000000000, 1.45000000000000, 1.47500000000000, 1.50000000000000, 1.52500000000000, 1.55000000000000, 1.57500000000000, 1.60000000000000, 1.625, 1.65000000000000, 1.67500000000000, 1.70000000000000, 1.72500000000000, 1.75000000000000, 1.77500000000000, 1.80000000000000, 1.82500000000000, 1.85000000000000, 1.87500000000000, 1.90000000000000, 1.92500000000000, 1.95000000000000, 1.97500000000000, 2, 2.02500000000000, 2.05000000000000, 2.07500000000000, 2.10000000000000, 2.12500000000000, 2.15000000000000, 2.17500000000000, 2.20000000000000, 2.22500000000000, 2.25000000000000, 2.27500000000000, 2.30000000000000, 2.32500000000000, 2.35000000000000, 2.37500000000000, 2.40000000000000, 2.42500000000000, 2.45000000000000, 2.47500000000000, 2.50000000000000};
	// int MAP_vertical_INDEX = 201;



	int hybird_astar_imagmap_get()
	{
		if (((fusion.position.Heading >= 0) && (fusion.position.Heading <= 360)) && ((calculation.nav_heading >= 0) && (calculation.nav_heading <= 360)))
		{
			// 垂直车位
			if (fusion.parkingSpaceInfo.ParkingSpaceType == 1)
			{
				if (app.APA_Park_Function == 1)
				{
					// 车尾泊入
					if (fusion.ParkInMode != 1) // 停车线
					{
						double vir_x;
						double vir_y;
						for (unsigned int map_index = 0; map_index < map_image_x.size(); map_index++)
						{
							vir_x = map_image_x[map_index] * cos(end_to_fus[2]) - map_image_y[map_index] * sin(end_to_fus[2]) + end_to_fus[0];
							vir_y = map_image_y[map_index] * cos(end_to_fus[2]) + map_image_x[map_index] * sin(end_to_fus[2]) + end_to_fus[1];
							int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							int index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
								(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 2)
								{
									obstmap[index_xy].Status = 3;
									dis_map[(idx_y - 1)][249-(idx_x - 1)]=1; // 虚拟停车线算入距离地图
								}
							}
						}
						////////////////起始位置如果有虚拟障碍物就不要/////////////////////
						for (unsigned int map_index = 0; map_index < Car_x.size(); map_index++)
						{
							vir_x = Car_x[map_index] * cos(start_to_fus[2]) - Car_y[map_index] * sin(start_to_fus[2]) + start_to_fus[0];
							vir_y = Car_y[map_index] * cos(start_to_fus[2]) + Car_x[map_index] * sin(start_to_fus[2]) + start_to_fus[1];
							int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							int index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								obstmap[index_xy].Status = 5;
							}
						}
						/////////////////////////////////////////////////////////////////////////
						for (unsigned int map_vertical_index = 0; map_vertical_index < map_image_vertical_x.size(); map_vertical_index++)
						{
							vir_x = map_image_vertical_x[map_vertical_index] * cos(end_to_fus[2]) - map_image_vertical_y[map_vertical_index] * sin(end_to_fus[2]) + end_to_fus[0];
							vir_y = map_image_vertical_y[map_vertical_index] * cos(end_to_fus[2]) + map_image_vertical_x[map_vertical_index] * sin(end_to_fus[2]) + end_to_fus[1];
							int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							int index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 5)
								{
									no_imag_map = 1;
									double SE_Usspark = (start_to_fus[0] - end_to_fus[0]) * (start_to_fus[0] - end_to_fus[0]) + (start_to_fus[1] - end_to_fus[1]) * (start_to_fus[1] - end_to_fus[1]);
									if (SE_Usspark < 2.25)
									{
										for (int Uss_start_index = 0; Uss_start_index < 2; Uss_start_index++)
										{
											int control_ob = 7 + Uss_start_index;
											double Uss_x = upa_x[control_ob];
											double Uss_y = upa_y[control_ob];
											double vir_x_;
											double vir_y_;
											vir_x_ = Uss_x * cos(start_to_fus[2]) - Uss_y * sin(start_to_fus[2]) + start_to_fus[0];
											vir_y_ = Uss_y * cos(start_to_fus[2]) + Uss_x * sin(start_to_fus[2]) + start_to_fus[1];
											int idx_x_ = ceil((pathfind_parameters.MAXX - vir_x_) / pathfind_parameters.MOTION_RESOLUTION);
											int idx_y_ = ceil((pathfind_parameters.MAXY - vir_y_) / pathfind_parameters.MOTION_RESOLUTION);
											if (idx_x_ == 0)
											{
												idx_x_ = 1;
											}
											if (idx_y_ == 0)
											{
												idx_y_ = 1;
											}
											int index_xy_ = (idx_x_ - 1) * pathfind_parameters.XIDX + (idx_y_ - 1);
											if ((index_xy_ >= 0) && (index_xy_ < pathfind_parameters.MAX_IDX) && 
											(idx_x_ >= 0) && (idx_x_ <= pathfind_parameters.XIDX) && (idx_y_ >= 0) && (idx_y_ <= pathfind_parameters.XIDY))
											{
												obstmap[index_xy_].Status = 4;
												int i = idx_x - 1;
												int j = idx_y - 1;
												int dir1 = i * pathfind_parameters.XIDX + j + 1;
												int dir2 = i * pathfind_parameters.XIDX + j - 1;
												int dir3 = (i + 1) * pathfind_parameters.XIDX + j;
												int dir4 = (i - 1) * pathfind_parameters.XIDX + j;
												int dir5 = (i + 1) * pathfind_parameters.XIDX + j + 1;
												int dir6 = (i + 1) * pathfind_parameters.XIDX + j - 1;
												int dir7 = (i - 1) * pathfind_parameters.XIDX + j + 1;
												int dir8 = (i - 1) * pathfind_parameters.XIDX + j - 1;

												if (dir1 >= 0 && dir1 < pathfind_parameters.MAX_IDX && 
												dir2 >= 0 && dir2 < pathfind_parameters.MAX_IDX && 
												dir3 >= 0 && dir3 < pathfind_parameters.MAX_IDX && 
												dir4 >= 0 && dir4 < pathfind_parameters.MAX_IDX && 
												dir5 >= 0 && dir5 < pathfind_parameters.MAX_IDX && 
												dir6 >= 0 && dir6 < pathfind_parameters.MAX_IDX && 
												dir7 >= 0 && dir7 < pathfind_parameters.MAX_IDX && 
												dir8 >= 0 && dir8 < pathfind_parameters.MAX_IDX)
												{
													if (obstmap[dir1].Status != 0 && obstmap[dir1].Status != 3 && obstmap[dir1].Status != 5)
													{
														obstmap[dir1].Status = 9u;
													}
													if (obstmap[dir2].Status != 0 && obstmap[dir2].Status != 3 && obstmap[dir2].Status != 5)
													{
														obstmap[dir2].Status = 9u;
													}
													if (obstmap[dir3].Status != 0 && obstmap[dir3].Status != 3 && obstmap[dir3].Status != 5)
													{
														obstmap[dir3].Status = 9u;
													}
													if (obstmap[dir4].Status != 0 && obstmap[dir4].Status != 3 && obstmap[dir4].Status != 5)
													{
														obstmap[dir4].Status = 9u;
													}
													if (obstmap[dir5].Status != 0 && obstmap[dir5].Status != 3 && obstmap[dir5].Status != 5)
													{
														obstmap[dir5].Status = 9u;
													}
													if (obstmap[dir6].Status != 0 && obstmap[dir6].Status != 3 && obstmap[dir6].Status != 5)
													{
														obstmap[dir6].Status = 9u;
													}
													if (obstmap[dir7].Status != 0 && obstmap[dir7].Status != 3 && obstmap[dir7].Status != 5)
													{
														obstmap[dir7].Status = 9u;
													}
													if (obstmap[dir8].Status != 0 && obstmap[dir8].Status != 3 && obstmap[dir8].Status != 5)
													{
														obstmap[dir8].Status = 9u;
													}
												}
											}
										}
									}
								}
								else if (obstmap[index_xy].Status != 0)
								{
									obstmap[index_xy].Status = 3;
								}
								//obstmap[index_xy].Status = 3;
							}
						}
					}
					// 车头泊入
					else
					{
						double vir_x;
						double vir_y;
						for (unsigned int map_index = 0; map_index < map_image_x.size(); map_index++)
						{
							vir_x = (-1 * map_image_x[map_index] + vehicle_parameters.LF - vehicle_parameters.LB) * cos(end_to_fus[2]) - map_image_y[map_index] * sin(end_to_fus[2]) + end_to_fus[0];
							vir_y = map_image_y[map_index] * cos(end_to_fus[2]) + (-1 * map_image_x[map_index] + vehicle_parameters.LF - vehicle_parameters.LB) * sin(end_to_fus[2]) + end_to_fus[1];
							int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							int index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 2)
								{
									obstmap[index_xy].Status = 3;
								}
							}
						}
						////////////////起始位置如果有虚拟障碍物就不要/////////////////////
						for (unsigned int map_index = 0; map_index < Car_x.size(); map_index++)
						{
							vir_x = Car_x[map_index] * cos(start_to_fus[2]) - Car_y[map_index] * sin(start_to_fus[2]) + start_to_fus[0];
							vir_y = Car_y[map_index] * cos(start_to_fus[2]) + Car_x[map_index] * sin(start_to_fus[2]) + start_to_fus[1];
							int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							int index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								obstmap[index_xy].Status = 5;
							}
						}
						/////////////////////////////////////////////////////////////////////////
						for (unsigned int map_vertical_index = 0; map_vertical_index < map_image_vertical_x.size(); map_vertical_index++)
						{
							vir_x = (-1 * map_image_vertical_x[map_vertical_index] + vehicle_parameters.LF - vehicle_parameters.LB) * cos(end_to_fus[2]) - map_image_vertical_y[map_vertical_index] * sin(end_to_fus[2]) + end_to_fus[0];
							vir_y = map_image_vertical_y[map_vertical_index] * cos(end_to_fus[2]) + (-1 * map_image_vertical_x[map_vertical_index] + vehicle_parameters.LF - vehicle_parameters.LB) * sin(end_to_fus[2]) + end_to_fus[1];
							int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							int index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 5)
								{
									no_imag_map = 1;
									double SE_Usspark = (start_to_fus[0] - end_to_fus[0]) * (start_to_fus[0] - end_to_fus[0]) + (start_to_fus[1] - end_to_fus[1]) * (start_to_fus[1] - end_to_fus[1]);
									if (SE_Usspark < 2.25)
									{
										for (int Uss_start_index = 0; Uss_start_index < 2; Uss_start_index++)
										{
											int control_ob = 1 + Uss_start_index;
											double Uss_x = upa_x[control_ob];
											double Uss_y = upa_y[control_ob];
											double vir_x_;
											double vir_y_;
											vir_x_ = Uss_x * cos(start_to_fus[2]) - Uss_y * sin(start_to_fus[2]) + start_to_fus[0];
											vir_y_ = Uss_y * cos(start_to_fus[2]) + Uss_x * sin(start_to_fus[2]) + start_to_fus[1];
											int idx_x_ = ceil((pathfind_parameters.MAXX - vir_x_) / pathfind_parameters.MOTION_RESOLUTION);
											int idx_y_ = ceil((pathfind_parameters.MAXY - vir_y_) / pathfind_parameters.MOTION_RESOLUTION);
											if (idx_x_ == 0)
											{
												idx_x_ = 1;
											}
											if (idx_y_ == 0)
											{
												idx_y_ = 1;
											}
											int index_xy_ = (idx_x_ - 1) * pathfind_parameters.XIDX + (idx_y_ - 1);
											if ((index_xy_ >= 0) && (index_xy_ < pathfind_parameters.MAX_IDX) && 
											(idx_x_ >= 0) && (idx_x_ <= pathfind_parameters.XIDX) && (idx_y_ >= 0) && (idx_y_ <= pathfind_parameters.XIDY))
											{
												obstmap[index_xy_].Status = 4;
												int i = idx_x - 1;
												int j = idx_y - 1;

												int dir1 = i * pathfind_parameters.XIDX + j + 1;
												int dir2 = i * pathfind_parameters.XIDX + j - 1;
												int dir3 = (i + 1) * pathfind_parameters.XIDX + j;
												int dir4 = (i - 1) * pathfind_parameters.XIDX + j;
												int dir5 = (i + 1) * pathfind_parameters.XIDX + j + 1;
												int dir6 = (i + 1) * pathfind_parameters.XIDX + j - 1;
												int dir7 = (i - 1) * pathfind_parameters.XIDX + j + 1;
												int dir8 = (i - 1) * pathfind_parameters.XIDX + j - 1;

												if (dir1 >= 0 && dir1 < pathfind_parameters.MAX_IDX && 
												dir2 >= 0 && dir2 < pathfind_parameters.MAX_IDX && 
												dir3 >= 0 && dir3 < pathfind_parameters.MAX_IDX && 
												dir4 >= 0 && dir4 < pathfind_parameters.MAX_IDX && 
												dir5 >= 0 && dir5 < pathfind_parameters.MAX_IDX && 
												dir6 >= 0 && dir6 < pathfind_parameters.MAX_IDX && 
												dir7 >= 0 && dir7 < pathfind_parameters.MAX_IDX && 
												dir8 >= 0 && dir8 < pathfind_parameters.MAX_IDX)
												{
													if (obstmap[dir1].Status != 0 && obstmap[dir1].Status != 3 && obstmap[dir1].Status != 5)
													{
														obstmap[dir1].Status = 9u;
													}
													if (obstmap[dir2].Status != 0 && obstmap[dir2].Status != 3 && obstmap[dir2].Status != 5)
													{
														obstmap[dir2].Status = 9u;
													}
													if (obstmap[dir3].Status != 0 && obstmap[dir3].Status != 3 && obstmap[dir3].Status != 5)
													{
														obstmap[dir3].Status = 9u;
													}
													if (obstmap[dir4].Status != 0 && obstmap[dir4].Status != 3 && obstmap[dir4].Status != 5)
													{
														obstmap[dir4].Status = 9u;
													}
													if (obstmap[dir5].Status != 0 && obstmap[dir5].Status != 3 && obstmap[dir5].Status != 5)
													{
														obstmap[dir5].Status = 9u;
													}
													if (obstmap[dir6].Status != 0 && obstmap[dir6].Status != 3 && obstmap[dir6].Status != 5)
													{
														obstmap[dir6].Status = 9u;
													}
													if (obstmap[dir7].Status != 0 && obstmap[dir7].Status != 3 && obstmap[dir7].Status != 5)
													{
														obstmap[dir7].Status = 9u;
													}
													if (obstmap[dir8].Status != 0 && obstmap[dir8].Status != 3 && obstmap[dir8].Status != 5)
													{
														obstmap[dir8].Status = 9u;
													}
												}
											}
										}
									}
								}
								else if (obstmap[index_xy].Status != 0)
								{
									obstmap[index_xy].Status = 3;
								}
								//obstmap[index_xy].Status = 3;
							}
						}
					}
				}
			}
			// 水平车位
			else if (fusion.parkingSpaceInfo.ParkingSpaceType == 2)
			{
				if ((app.APA_Park_Function == 1) || (app.APA_Park_Function == 3))
				{
					double P_mean_x = (P0x + P1x + P2x + P3x) / 4;
					double P_mean_y = (P0y + P1y + P2y + P3y) / 4;

					double D_P1_mean = sqrt((P_mean_x - P1x) * (P_mean_x - P1x) + (P_mean_y - P1y) * (P_mean_y - P1y));
					double D_P2_mean = sqrt((P_mean_x - P2x) * (P_mean_x - P2x) + (P_mean_y - P2y) * (P_mean_y - P2y));
					if ((D_P1_mean < 0.1) && (D_P2_mean < 0.1))
					{
						return 1;
					}
					double cos_theta_P1 = (P_mean_x - P1x) / D_P1_mean;
					double sin_theta_P1 = (P_mean_y - P1y) / D_P1_mean;
					double cos_theta_P2 = (P_mean_x - P2x) / D_P2_mean;
					double sin_theta_P2 = (P_mean_y - P2y) / D_P2_mean;
					double P1x_imag = P_mean_x - (D_P1_mean + 1) * cos_theta_P1;
					double P1y_imag = P_mean_y - (D_P1_mean + 1) * sin_theta_P1;
					double P2x_imag = P_mean_x - (D_P2_mean + 1) * cos_theta_P2;
					double P2y_imag = P_mean_y - (D_P2_mean + 1) * sin_theta_P2;
					double D_P12_imag = sqrt((P1x_imag - P2x_imag) * (P1x_imag - P2x_imag) + (P1y_imag - P2y_imag) * (P1y_imag - P2y_imag));
					if (D_P12_imag < 0.1)
					{
						return 1;
					}
					// double cos_theta_P12imag = (P2x_imag - P1x_imag) / D_P12_imag;
					// double sin_theta_P12imag = (P2y_imag - P1y_imag) / D_P12_imag;
					int index_imag_P12 = ceil(D_P12_imag / 0.025);

					int idx_x;
					int idx_y;
					int index_xy;
					double vir_x;
					double vir_y;
					////////////////起始位置如果有虚拟障碍物就不要/////////////////////
					for (unsigned int map_index = 0; map_index < Car_x.size(); map_index++)
					{
						vir_x = Car_x[map_index] * cos(start_to_fus[2]) - Car_y[map_index] * sin(start_to_fus[2]) + start_to_fus[0];
						vir_y = Car_y[map_index] * cos(start_to_fus[2]) + Car_x[map_index] * sin(start_to_fus[2]) + start_to_fus[1];
						idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
						idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
						if (idx_x == 0)
						{
							idx_x = 1;
						}
						if (idx_y == 0)
						{
							idx_y = 1;
						}
						int index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
						if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
						(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
						{
							obstmap[index_xy].Status = 5;
						}
					}
					/////////////////////////////////////////////////////////////////////
					idx_x = ceil((pathfind_parameters.MAXX - P1x_imag) / pathfind_parameters.MOTION_RESOLUTION);
					idx_y = ceil((pathfind_parameters.MAXY - P1y_imag) / pathfind_parameters.MOTION_RESOLUTION);
					if (idx_x == 0)
					{
						idx_x = 1;
					}
					if (idx_y == 0)
					{
						idx_y = 1;
					}
					index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
					if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
					(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
					{
						if (obstmap[index_xy].Status == 5)
						{
							no_imag_map = 1;
						}
						else if (obstmap[index_xy].Status != 0)
						{
							//obstmap[index_xy].Status = 3;
						}
						//obstmap[index_xy].Status = 3;
					}

					idx_x = ceil((pathfind_parameters.MAXX - P2x_imag) / pathfind_parameters.MOTION_RESOLUTION);
					idx_y = ceil((pathfind_parameters.MAXY - P2y_imag) / pathfind_parameters.MOTION_RESOLUTION);
					if (idx_x == 0)
					{
						idx_x = 1;
					}
					if (idx_y == 0)
					{
						idx_y = 1;
					}
					index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
					if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
					(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
					{
						if (obstmap[index_xy].Status == 5)
						{
							no_imag_map = 1;
						}
						else if (obstmap[index_xy].Status != 0)
						{
							//obstmap[index_xy].Status = 3;
						}
						//obstmap[index_xy].Status = 3;
					}

					if (index_imag_P12 >= 1)
					{
						double P12x_imag[65] = { 0 };
						double P12y_imag[65] = { 0 };
						double IDX = 65;
						if (end_to_fus[1] > 0)
						{
							for (int idx_p12 = 0; idx_p12 < 65; idx_p12++)
							{
								P12x_imag[idx_p12] = -1.8 + idx_p12 * 0.1;
								P12y_imag[idx_p12] = 1.6;
							}
						}
						else if (end_to_fus[1] < 0)
						{
							for (int idx_p12 = 0; idx_p12 < 65; idx_p12++)
							{
								P12x_imag[idx_p12] = -1.8 + idx_p12 * 0.1;
								P12y_imag[idx_p12] = -1.6;
							}
						}
						else
						{
							IDX = 0;
						}
						for (int idx = 0; idx < IDX; idx++)
						{
							vir_x = P12x_imag[idx] * cos(end_to_fus[2]) - P12y_imag[idx] * sin(end_to_fus[2]) + end_to_fus[0];
							vir_y = P12y_imag[idx] * cos(end_to_fus[2]) + P12x_imag[idx] * sin(end_to_fus[2]) + end_to_fus[1];
							idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 5)
								{
									no_imag_map = 1;
								}
								else if (obstmap[index_xy].Status != 0)
								{
									obstmap[index_xy].Status = 3;
								}
							}
						}
					}

					double D_P01_imag = sqrt((P1x - P0x) * (P1x - P0x) + (P1y - P0y) * (P1y - P0y));
					if (D_P01_imag < 0.1)
					{
						return 1;
					}
					// double cos_theta_P01imag = (P1x - P0x) / D_P01_imag;
					// double sin_theta_P01imag = (P1y - P0y) / D_P01_imag;
					// int index_imag_P01 = ceil(D_P01_imag / 0.3);
					double level_x_imagend[9] = { -2.1,-2.1,-2.1,-2.1,-2.1,-2.1,-2.1,-2.1,-2.1 };
					double level_y_imagend[9] = { -1,-0.75,-0.5,-0.25,0,0.25,0.5,0.75,1 };
					int imagend_idx = 9;

					for (int map_index = 0; map_index < imagend_idx; map_index++)
					{
						vir_x = level_x_imagend[map_index] * cos(end_to_fus[2]) - level_y_imagend[map_index] * sin(end_to_fus[2]) + end_to_fus[0];
						vir_y = level_y_imagend[map_index] * cos(end_to_fus[2]) + level_x_imagend[map_index] * sin(end_to_fus[2]) + end_to_fus[1];
						int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
						int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
						if (idx_x == 0)
						{
							idx_x = 1;
						}
						if (idx_y == 0)
						{
							idx_y = 1;
						}
						int index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
						if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
						(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
						{
							if (obstmap[index_xy].Status == 2)
							{
								obstmap[index_xy].Status = 3;
							}
						}
					}

					double D_P23_imag = sqrt((P2x - P3x) * (P2x - P3x) + (P2y - P3y) * (P2y - P3y));
					if (D_P23_imag < 0.1)
					{
						return 1;
					}
					double cos_theta_P23imag = (P3x - P2x) / D_P23_imag;
					double sin_theta_P23imag = (P3y - P2y) / D_P23_imag;
					int index_imag_P23 = ceil(D_P23_imag / 0.3);
					if (index_imag_P23 >= 1)
					{
						for (int idx = 1; idx < index_imag_P23; idx++)
						{
							vir_x = P2x + idx * 0.3 * cos_theta_P23imag;
							vir_y = P2y + idx * 0.3 * sin_theta_P23imag;
							idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 2)
								{
									obstmap[index_xy].Status = 3;
								}
							}
						}
					}
				}
			}
			// 斜车位
			else if (fusion.parkingSpaceInfo.ParkingSpaceType == 3)
			{
				if (app.APA_Park_Function == 1)
				{
					if (fusion.ParkInMode == 0)
					{
						double P_mean_x = (P0x + P1x + P2x + P3x) / 4;
						double P_mean_y = (P0y + P1y + P2y + P3y) / 4;

						int idx_x;
						int idx_y;
						int index_xy;
						double vir_x;
						double vir_y;

						double D_P03 = sqrt((P0x - P3x) * (P0x - P3x) + (P0y - P3y) * (P0y - P3y));
						double D_P12 = sqrt((P1x - P2x) * (P1x - P2x) + (P1y - P2y) * (P1y - P2y));
						double Diff_xP03 = P3x - P0x;
						double Diff_yP03 = P3y - P0y;
						double Diff_xP12 = P2x - P1x;
						double Diff_yP12 = P2y - P1y;
						if ((D_P03 < 0.1) || (D_P12 < 0.1))
						{
							return 1;
						}
						double cos_P03 = Diff_xP03 / D_P03;
						double sin_P03 = Diff_yP03 / D_P03;
						double P0x_imag = P0x - 0.5 * cos_P03;
						double P0y_imag = P0y - 0.5 * sin_P03;
						double P3x_imag = P3x + 0.5 * cos_P03;
						double P3y_imag = P3y + 0.5 * sin_P03;

						double D_P1_mean = sqrt((P_mean_x - P1x) * (P_mean_x - P1x) + (P_mean_y - P1y) * (P_mean_y - P1y));
						double D_P2_mean = sqrt((P_mean_x - P2x) * (P_mean_x - P2x) + (P_mean_y - P2y) * (P_mean_y - P2y));
						if ((D_P1_mean < 0.1) && (D_P2_mean < 0.1))
						{
							return 1;
						}
						double cos_theta_P1 = (P_mean_x - P1x) / D_P1_mean;
						double sin_theta_P1 = (P_mean_y - P1y) / D_P1_mean;
						double cos_theta_P2 = (P_mean_x - P2x) / D_P2_mean;
						double sin_theta_P2 = (P_mean_y - P2y) / D_P2_mean;
						double P1x_imag = P_mean_x - (D_P1_mean + 2) * cos_theta_P1;
						double P1y_imag = P_mean_y - (D_P1_mean + 2) * sin_theta_P1;
						double P2x_imag = P_mean_x - (D_P2_mean + 2) * cos_theta_P2;
						double P2y_imag = P_mean_y - (D_P2_mean + 2) * sin_theta_P2;

						double cos_P12 = Diff_xP12 / D_P12;
						double sin_P12 = Diff_yP12 / D_P12;
						//double P1x_imag = P1x - 0.5 * cos_P12;
						//double P1x_imag = P1y - 0.5 * sin_P12;
						//double P2x_imag = P2x + 0.5 * cos_P12;
						//double P2x_imag = P2y + 0.5 * sin_P12;
						////////////////起始位置如果有虚拟障碍物就不要/////////////////////
						for (unsigned int map_index = 0; map_index < Car_x.size(); map_index++)
						{
							vir_x = Car_x[map_index] * cos(start_to_fus[2]) - Car_y[map_index] * sin(start_to_fus[2]) + start_to_fus[0];
							vir_y = Car_y[map_index] * cos(start_to_fus[2]) + Car_x[map_index] * sin(start_to_fus[2]) + start_to_fus[1];
							int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							int index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								obstmap[index_xy].Status = 5;
							}
						}
						/////////////////////////////////////////////////////////////////////////
						for (unsigned int map_vertical_index = 0; map_vertical_index < map_image_vertical_x.size(); map_vertical_index++)
						{
							vir_x = map_image_vertical_x[map_vertical_index] * cos(end_to_fus[2]) - map_image_vertical_y[map_vertical_index] * sin(end_to_fus[2]) + end_to_fus[0];
							vir_y = map_image_vertical_y[map_vertical_index] * cos(end_to_fus[2]) + map_image_vertical_x[map_vertical_index] * sin(end_to_fus[2]) + end_to_fus[1];
							int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							int index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 5)
								{
									no_imag_map = 1;
									double SE_Usspark = (start_to_fus[0] - end_to_fus[0]) * (start_to_fus[0] - end_to_fus[0]) + (start_to_fus[1] - end_to_fus[1]) * (start_to_fus[1] - end_to_fus[1]);
									if (SE_Usspark < 2.25)
									{
										for (int Uss_start_index = 0; Uss_start_index < 2; Uss_start_index++)
										{
											int control_ob = 7 + Uss_start_index;
											double Uss_x = upa_x[control_ob];
											double Uss_y = upa_y[control_ob];
											double vir_x_;
											double vir_y_;
											vir_x_ = Uss_x * cos(start_to_fus[2]) - Uss_y * sin(start_to_fus[2]) + start_to_fus[0];
											vir_y_ = Uss_y * cos(start_to_fus[2]) + Uss_x * sin(start_to_fus[2]) + start_to_fus[1];
											int idx_x_ = ceil((pathfind_parameters.MAXX - vir_x_) / pathfind_parameters.MOTION_RESOLUTION);
											int idx_y_ = ceil((pathfind_parameters.MAXY - vir_y_) / pathfind_parameters.MOTION_RESOLUTION);
											if (idx_x_ == 0)
											{
												idx_x_ = 1;
											}
											if (idx_y_ == 0)
											{
												idx_y_ = 1;
											}
											int index_xy_ = (idx_x_ - 1) * pathfind_parameters.XIDX + (idx_y_ - 1);
											if ((index_xy_ >= 0) && (index_xy_ < pathfind_parameters.MAX_IDX) && 
											(idx_x_ >= 0) && (idx_x_ <= pathfind_parameters.XIDX) && (idx_y_ >= 0) && (idx_y_ <= pathfind_parameters.XIDY))
											{
												obstmap[index_xy_].Status = 4;
												int i = idx_x - 1;
												int j = idx_y - 1;
												int dir1 = i * pathfind_parameters.XIDX + j + 1;
												int dir2 = i * pathfind_parameters.XIDX + j - 1;
												int dir3 = (i + 1) * pathfind_parameters.XIDX + j;
												int dir4 = (i - 1) * pathfind_parameters.XIDX + j;
												int dir5 = (i + 1) * pathfind_parameters.XIDX + j + 1;
												int dir6 = (i + 1) * pathfind_parameters.XIDX + j - 1;
												int dir7 = (i - 1) * pathfind_parameters.XIDX + j + 1;
												int dir8 = (i - 1) * pathfind_parameters.XIDX + j - 1;

												if (dir1 >= 0 && dir1 < pathfind_parameters.MAX_IDX && 
												dir2 >= 0 && dir2 < pathfind_parameters.MAX_IDX && 
												dir3 >= 0 && dir3 < pathfind_parameters.MAX_IDX && 
												dir4 >= 0 && dir4 < pathfind_parameters.MAX_IDX && 
												dir5 >= 0 && dir5 < pathfind_parameters.MAX_IDX && 
												dir6 >= 0 && dir6 < pathfind_parameters.MAX_IDX && 
												dir7 >= 0 && dir7 < pathfind_parameters.MAX_IDX && 
												dir8 >= 0 && dir8 < pathfind_parameters.MAX_IDX)
												{
													if (obstmap[dir1].Status != 0 && obstmap[dir1].Status != 3 && obstmap[dir1].Status != 5)
													{
														obstmap[dir1].Status = 9u;
													}
													if (obstmap[dir2].Status != 0 && obstmap[dir2].Status != 3 && obstmap[dir2].Status != 5)
													{
														obstmap[dir2].Status = 9u;
													}
													if (obstmap[dir3].Status != 0 && obstmap[dir3].Status != 3 && obstmap[dir3].Status != 5)
													{
														obstmap[dir3].Status = 9u;
													}
													if (obstmap[dir4].Status != 0 && obstmap[dir4].Status != 3 && obstmap[dir4].Status != 5)
													{
														obstmap[dir4].Status = 9u;
													}
													if (obstmap[dir5].Status != 0 && obstmap[dir5].Status != 3 && obstmap[dir5].Status != 5)
													{
														obstmap[dir5].Status = 9u;
													}
													if (obstmap[dir6].Status != 0 && obstmap[dir6].Status != 3 && obstmap[dir6].Status != 5)
													{
														obstmap[dir6].Status = 9u;
													}
													if (obstmap[dir7].Status != 0 && obstmap[dir7].Status != 3 && obstmap[dir7].Status != 5)
													{
														obstmap[dir7].Status = 9u;
													}
													if (obstmap[dir8].Status != 0 && obstmap[dir8].Status != 3 && obstmap[dir8].Status != 5)
													{
														obstmap[dir8].Status = 9u;
													}
												}
											}
										}
									}
								}
								else if (obstmap[index_xy].Status != 0)
								{
									obstmap[index_xy].Status = 3;
								}
								//obstmap[index_xy].Status = 3;
							}
						}

						for (int idx = 1; idx < 50; idx++)
						{
							vir_x = P3x_imag + idx * 0.3 * cos_P03;
							vir_y = P3y_imag + idx * 0.3 * sin_P03;
							idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 2)
								{
									obstmap[index_xy].Status = 3;
								}
							}
						}
						for (int idx = 1; idx < 50; idx++)
						{
							vir_x = P0x_imag - idx * 0.3 * cos_P03;
							vir_y = P0y_imag - idx * 0.3 * sin_P03;
							idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 2)
								{
									obstmap[index_xy].Status = 3;
								}
							}
						}

						double D_imag_12 = sqrt((P1x_imag - P2x_imag) * (P1x_imag - P2x_imag) + (P1y_imag - P2y_imag) * (P1y_imag - P2y_imag));
						int idx_imag_12 = ceil(D_imag_12 / 0.025);
						if (idx_imag_12 > 0)
						{
							for (int idx = 0; idx < idx_imag_12; idx++)
							{
								vir_x = P1x_imag + idx * 0.025 * cos_P12;
								vir_y = P1y_imag + idx * 0.025 * sin_P12;
								idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
								idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
								if (idx_x == 0)
								{
									idx_x = 1;
								}
								if (idx_y == 0)
								{
									idx_y = 1;
								}
								index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
								if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
								(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
								{
									if (obstmap[index_xy].Status == 5)
									{
										no_imag_map = 1;
										double SE_Usspark = (start_to_fus[0] - end_to_fus[0]) * (start_to_fus[0] - end_to_fus[0]) + (start_to_fus[1] - end_to_fus[1]) * (start_to_fus[1] - end_to_fus[1]);
										if (SE_Usspark < 2.25)
										{
											for (int Uss_start_index = 0; Uss_start_index < 2; Uss_start_index++)
											{
												int control_ob = 7 + Uss_start_index;
												double Uss_x = upa_x[control_ob];
												double Uss_y = upa_y[control_ob];
												double vir_x_;
												double vir_y_;
												vir_x_ = Uss_x * cos(start_to_fus[2]) - Uss_y * sin(start_to_fus[2]) + start_to_fus[0];
												vir_y_ = Uss_y * cos(start_to_fus[2]) + Uss_x * sin(start_to_fus[2]) + start_to_fus[1];
												int idx_x_ = ceil((pathfind_parameters.MAXX - vir_x_) / pathfind_parameters.MOTION_RESOLUTION);
												int idx_y_ = ceil((pathfind_parameters.MAXY - vir_y_) / pathfind_parameters.MOTION_RESOLUTION);
												if (idx_x_ == 0)
												{
													idx_x_ = 1;
												}
												if (idx_y_ == 0)
												{
													idx_y_ = 1;
												}
												int index_xy_ = (idx_x_ - 1) * pathfind_parameters.XIDX + (idx_y_ - 1);
												if ((index_xy_ >= 0) && (index_xy_ < pathfind_parameters.MAX_IDX) && 
												(idx_x_ >= 0) && (idx_x_ <= pathfind_parameters.XIDX) && (idx_y_ >= 0) && (idx_y_ <= pathfind_parameters.XIDY))
												{
													obstmap[index_xy_].Status = 4;
													int i = idx_x - 1;
													int j = idx_y - 1;
													int dir1 = i * pathfind_parameters.XIDX + j + 1;
													int dir2 = i * pathfind_parameters.XIDX + j - 1;
													int dir3 = (i + 1) * pathfind_parameters.XIDX + j;
													int dir4 = (i - 1) * pathfind_parameters.XIDX + j;
													int dir5 = (i + 1) * pathfind_parameters.XIDX + j + 1;
													int dir6 = (i + 1) * pathfind_parameters.XIDX + j - 1;
													int dir7 = (i - 1) * pathfind_parameters.XIDX + j + 1;
													int dir8 = (i - 1) * pathfind_parameters.XIDX + j - 1;

													if (dir1 >= 0 && dir1 < pathfind_parameters.MAX_IDX && 
													dir2 >= 0 && dir2 < pathfind_parameters.MAX_IDX && 
													dir3 >= 0 && dir3 < pathfind_parameters.MAX_IDX && 
													dir4 >= 0 && dir4 < pathfind_parameters.MAX_IDX && 
													dir5 >= 0 && dir5 < pathfind_parameters.MAX_IDX && 
													dir6 >= 0 && dir6 < pathfind_parameters.MAX_IDX && 
													dir7 >= 0 && dir7 < pathfind_parameters.MAX_IDX && 
													dir8 >= 0 && dir8 < pathfind_parameters.MAX_IDX)
													{
														if (obstmap[dir1].Status != 0 && obstmap[dir1].Status != 3 && obstmap[dir1].Status != 5)
														{
															obstmap[dir1].Status = 9u;
														}
														if (obstmap[dir2].Status != 0 && obstmap[dir2].Status != 3 && obstmap[dir2].Status != 5)
														{
															obstmap[dir2].Status = 9u;
														}
														if (obstmap[dir3].Status != 0 && obstmap[dir3].Status != 3 && obstmap[dir3].Status != 5)
														{
															obstmap[dir3].Status = 9u;
														}
														if (obstmap[dir4].Status != 0 && obstmap[dir4].Status != 3 && obstmap[dir4].Status != 5)
														{
															obstmap[dir4].Status = 9u;
														}
														if (obstmap[dir5].Status != 0 && obstmap[dir5].Status != 3 && obstmap[dir5].Status != 5)
														{
															obstmap[dir5].Status = 9u;
														}
														if (obstmap[dir6].Status != 0 && obstmap[dir6].Status != 3 && obstmap[dir6].Status != 5)
														{
															obstmap[dir6].Status = 9u;
														}
														if (obstmap[dir7].Status != 0 && obstmap[dir7].Status != 3 && obstmap[dir7].Status != 5)
														{
															obstmap[dir7].Status = 9u;
														}
														if (obstmap[dir8].Status != 0 && obstmap[dir8].Status != 3 && obstmap[dir8].Status != 5)
														{
															obstmap[dir8].Status = 9u;
														}
													}
												}
											}
										}
									}
									else if (obstmap[index_xy].Status != 0)
									{
										obstmap[index_xy].Status = 3;
									}
									//obstmap[index_xy].Status = 3;
								}

							}

						}

						double cos_theta_add = -sin_P03;
						double sin_theta_add = cos_P03;
						double cos_theta_diff = sin_P03;
						double sin_theta_diff = -cos_P03;
						double P0x_towards_1 = P0x + 5 * cos_theta_add;
						double P0y_towards_1 = P0y + 5 * sin_theta_add;
						double P0x_towards_2 = P0x + 5 * cos_theta_diff;
						double P0y_towards_2 = P0y + 5 * sin_theta_diff;
						double D_add = sqrt((P0x_towards_1 - end_to_fus[0]) * (P0x_towards_1 - end_to_fus[0]) + (P0y_towards_1 - end_to_fus[1]) * (P0y_towards_1 - end_to_fus[1]));
						double D_diff = sqrt((P0x_towards_2 - end_to_fus[0]) * (P0x_towards_2 - end_to_fus[0]) + (P0y_towards_2 - end_to_fus[1]) * (P0y_towards_2 - end_to_fus[1]));
						double P0x_towards = 0;
						double P0y_towards = 0;
						if (D_add > D_diff)
						{
							P0x_towards = P0x_towards_1;
							P0y_towards = P0y_towards_1;
						}
						else
						{
							P0x_towards = P0x_towards_2;
							P0y_towards = P0y_towards_2;
						}
						for (int idx = 0; idx < 80; idx++)
						{
							vir_x = P0x_towards + idx * 0.3 * cos_P03;
							vir_y = P0y_towards + idx * 0.3 * sin_P03;
							idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 2)
								{
									obstmap[index_xy].Status = 3;
								}
							}
						}
						for (int idx = 1; idx < 80; idx++)
						{
							vir_x = P0x_towards - idx * 0.3 * cos_P03;
							vir_y = P0y_towards - idx * 0.3 * sin_P03;
							idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 2)
								{
									obstmap[index_xy].Status = 3;
								}
							}
						}

						double D_P01_imag = sqrt((P1x_imag - P0x_imag) * (P1x_imag - P0x_imag) + (P1y_imag - P0y_imag) * (P1y_imag - P0y_imag));
						if (D_P01_imag < 0.1)
						{
							return 1;
						}
						double cos_theta_P01imag = (P1x_imag - P0x_imag) / D_P01_imag;
						double sin_theta_P01imag = (P1y_imag - P0y_imag) / D_P01_imag;
						int index_imag_P01 = ceil(D_P01_imag / 0.3);
						if (index_imag_P01 >= 1)
						{
							for (int idx = 1; idx < index_imag_P01; idx++)
							{
								vir_x = P0x_imag + idx * 0.3 * cos_theta_P01imag;
								vir_y = P0y_imag + idx * 0.3 * sin_theta_P01imag;
								idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
								idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
								if (idx_x == 0)
								{
									idx_x = 1;
								}
								if (idx_y == 0)
								{
									idx_y = 1;
								}
								index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
								if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
								(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
								{
									if (obstmap[index_xy].Status == 2)
									{
										obstmap[index_xy].Status = 3;
									}
								}
							}
						}

						double D_P23_imag = sqrt((P2x_imag - P3x_imag) * (P2x_imag - P3x_imag) + (P2y_imag - P3y_imag) * (P2y_imag - P3y_imag));
						if (D_P23_imag < 0.1)
						{
							return 1;
						}
						double cos_theta_P23imag = (P3x_imag - P2x_imag) / D_P23_imag;
						double sin_theta_P23imag = (P3y_imag - P2y_imag) / D_P23_imag;
						int index_imag_P23 = ceil(D_P23_imag / 0.3);
						if (index_imag_P23 >= 1)
						{
							for (int idx = 1; idx < index_imag_P23; idx++)
							{
								vir_x = P2x_imag + idx * 0.3 * cos_theta_P23imag;
								vir_y = P2y_imag + idx * 0.3 * sin_theta_P23imag;
								idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
								idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
								if (idx_x == 0)
								{
									idx_x = 1;
								}
								if (idx_y == 0)
								{
									idx_y = 1;
								}
								index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
								if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
								(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
								{
									if (obstmap[index_xy].Status == 2)
									{
										obstmap[index_xy].Status = 3;
									}
								}
							}
						}
					}
					else // 车头泊入
					{
						double P_mean_x = (P0x + P1x + P2x + P3x) / 4;
						double P_mean_y = (P0y + P1y + P2y + P3y) / 4;

						int idx_x;
						int idx_y;
						int index_xy;
						double vir_x;
						double vir_y;

						double D_P03 = sqrt((P0x - P3x) * (P0x - P3x) + (P0y - P3y) * (P0y - P3y));
						double D_P12 = sqrt((P1x - P2x) * (P1x - P2x) + (P1y - P2y) * (P1y - P2y));
						double Diff_xP03 = P3x - P0x;
						double Diff_yP03 = P3y - P0y;
						double Diff_xP12 = P2x - P1x;
						double Diff_yP12 = P2y - P1y;
						if ((D_P03 < 0.1) || (D_P12 < 0.1))
						{
							return 1;
						}
						double cos_P03 = Diff_xP03 / D_P03;
						double sin_P03 = Diff_yP03 / D_P03;
						double P0x_imag = P0x - 0.5 * cos_P03;
						double P0y_imag = P0y - 0.5 * sin_P03;
						double P3x_imag = P3x + 0.5 * cos_P03;
						double P3y_imag = P3y + 0.5 * sin_P03;

						double D_P1_mean = sqrt((P_mean_x - P1x) * (P_mean_x - P1x) + (P_mean_y - P1y) * (P_mean_y - P1y));
						double D_P2_mean = sqrt((P_mean_x - P2x) * (P_mean_x - P2x) + (P_mean_y - P2y) * (P_mean_y - P2y));
						if ((D_P1_mean < 0.1) && (D_P2_mean < 0.1))
						{
							return 1;
						}
						double cos_theta_P1 = (P_mean_x - P1x) / D_P1_mean;
						double sin_theta_P1 = (P_mean_y - P1y) / D_P1_mean;
						double cos_theta_P2 = (P_mean_x - P2x) / D_P2_mean;
						double sin_theta_P2 = (P_mean_y - P2y) / D_P2_mean;
						double P1x_imag = P_mean_x - (D_P1_mean + 2) * cos_theta_P1;
						double P1y_imag = P_mean_y - (D_P1_mean + 2) * sin_theta_P1;
						double P2x_imag = P_mean_x - (D_P2_mean + 2) * cos_theta_P2;
						double P2y_imag = P_mean_y - (D_P2_mean + 2) * sin_theta_P2;

						double cos_P12 = Diff_xP12 / D_P12;
						double sin_P12 = Diff_yP12 / D_P12;
						//double P1x_imag = P1x - 0.5 * cos_P12;
						//double P1x_imag = P1y - 0.5 * sin_P12;
						//double P2x_imag = P2x + 0.5 * cos_P12;
						//double P2x_imag = P2y + 0.5 * sin_P12;
						////////////////起始位置如果有虚拟障碍物就不要/////////////////////
						for (unsigned int map_index = 0; map_index < Car_x.size(); map_index++)
						{
							vir_x = Car_x[map_index] * cos(start_to_fus[2]) - Car_y[map_index] * sin(start_to_fus[2]) + start_to_fus[0];
							vir_y = Car_y[map_index] * cos(start_to_fus[2]) + Car_x[map_index] * sin(start_to_fus[2]) + start_to_fus[1];
							int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							int index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								obstmap[index_xy].Status = 5;
							}
						}
						/////////////////////////////////////////////////////////////////////////
						for (unsigned int map_vertical_index = 0; map_vertical_index <  map_image_vertical_x.size(); map_vertical_index++)
						{
							vir_x = (-1 * map_image_vertical_x[map_vertical_index] + vehicle_parameters.LF - vehicle_parameters.LB) * cos(end_to_fus[2]) - map_image_vertical_y[map_vertical_index] * sin(end_to_fus[2]) + end_to_fus[0];
							vir_y = map_image_vertical_y[map_vertical_index] * cos(end_to_fus[2]) + (-1 * map_image_vertical_x[map_vertical_index] + vehicle_parameters.LF - vehicle_parameters.LB) * sin(end_to_fus[2]) + end_to_fus[1];
							int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							int index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 5)
								{
									no_imag_map = 1;
									double SE_Usspark = (start_to_fus[0] - end_to_fus[0]) * (start_to_fus[0] - end_to_fus[0]) + (start_to_fus[1] - end_to_fus[1]) * (start_to_fus[1] - end_to_fus[1]);
									if (SE_Usspark < 2.25)
									{
										for (int Uss_start_index = 0; Uss_start_index < 2; Uss_start_index++)
										{
											int control_ob = 0 + Uss_start_index;
											double Uss_x = upa_x[control_ob];
											double Uss_y = upa_y[control_ob];
											double vir_x_;
											double vir_y_;
											vir_x_ = Uss_x * cos(start_to_fus[2]) - Uss_y * sin(start_to_fus[2]) + start_to_fus[0];
											vir_y_ = Uss_y * cos(start_to_fus[2]) + Uss_x * sin(start_to_fus[2]) + start_to_fus[1];
											int idx_x_ = ceil((pathfind_parameters.MAXX - vir_x_) / pathfind_parameters.MOTION_RESOLUTION);
											int idx_y_ = ceil((pathfind_parameters.MAXY - vir_y_) / pathfind_parameters.MOTION_RESOLUTION);
											if (idx_x_ == 0)
											{
												idx_x_ = 1;
											}
											if (idx_y_ == 0)
											{
												idx_y_ = 1;
											}
											int index_xy_ = (idx_x_ - 1) * pathfind_parameters.XIDX + (idx_y_ - 1);
											if ((index_xy_ >= 0) && (index_xy_ < pathfind_parameters.MAX_IDX) && 
											(idx_x_ >= 0) && (idx_x_ <= pathfind_parameters.XIDX) && (idx_y_ >= 0) && (idx_y_ <= pathfind_parameters.XIDY))
											{
												obstmap[index_xy_].Status = 4;
												int i = idx_x - 1;
												int j = idx_y - 1;
												int dir1 = i * pathfind_parameters.XIDX + j + 1;
												int dir2 = i * pathfind_parameters.XIDX + j - 1;
												int dir3 = (i + 1) * pathfind_parameters.XIDX + j;
												int dir4 = (i - 1) * pathfind_parameters.XIDX + j;
												int dir5 = (i + 1) * pathfind_parameters.XIDX + j + 1;
												int dir6 = (i + 1) * pathfind_parameters.XIDX + j - 1;
												int dir7 = (i - 1) * pathfind_parameters.XIDX + j + 1;
												int dir8 = (i - 1) * pathfind_parameters.XIDX + j - 1;

												if (dir1 >= 0 && dir1 < pathfind_parameters.MAX_IDX && 
												dir2 >= 0 && dir2 < pathfind_parameters.MAX_IDX && 
												dir3 >= 0 && dir3 < pathfind_parameters.MAX_IDX && 
												dir4 >= 0 && dir4 < pathfind_parameters.MAX_IDX && 
												dir5 >= 0 && dir5 < pathfind_parameters.MAX_IDX && 
												dir6 >= 0 && dir6 < pathfind_parameters.MAX_IDX && 
												dir7 >= 0 && dir7 < pathfind_parameters.MAX_IDX && 
												dir8 >= 0 && dir8 < pathfind_parameters.MAX_IDX)
												{
													if (obstmap[dir1].Status != 0 && obstmap[dir1].Status != 3 && obstmap[dir1].Status != 5)
													{
														obstmap[dir1].Status = 9u;
													}
													if (obstmap[dir2].Status != 0 && obstmap[dir2].Status != 3 && obstmap[dir2].Status != 5)
													{
														obstmap[dir2].Status = 9u;
													}
													if (obstmap[dir3].Status != 0 && obstmap[dir3].Status != 3 && obstmap[dir3].Status != 5)
													{
														obstmap[dir3].Status = 9u;
													}
													if (obstmap[dir4].Status != 0 && obstmap[dir4].Status != 3 && obstmap[dir4].Status != 5)
													{
														obstmap[dir4].Status = 9u;
													}
													if (obstmap[dir5].Status != 0 && obstmap[dir5].Status != 3 && obstmap[dir5].Status != 5)
													{
														obstmap[dir5].Status = 9u;
													}
													if (obstmap[dir6].Status != 0 && obstmap[dir6].Status != 3 && obstmap[dir6].Status != 5)
													{
														obstmap[dir6].Status = 9u;
													}
													if (obstmap[dir7].Status != 0 && obstmap[dir7].Status != 3 && obstmap[dir7].Status != 5)
													{
														obstmap[dir7].Status = 9u;
													}
													if (obstmap[dir8].Status != 0 && obstmap[dir8].Status != 3 && obstmap[dir8].Status != 5)
													{
														obstmap[dir8].Status = 9u;
													}
												}
											}
										}
									}
								}
								else if (obstmap[index_xy].Status != 0)
								{
									obstmap[index_xy].Status = 3;
								}
								//obstmap[index_xy].Status = 3;
							}
						}

						for (int idx = 1; idx < 50; idx++)
						{
							vir_x = P3x_imag + idx * 0.3 * cos_P03;
							vir_y = P3y_imag + idx * 0.3 * sin_P03;
							idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 2)
								{
									obstmap[index_xy].Status = 3;
								}
							}
						}
						for (int idx = 1; idx < 50; idx++)
						{
							vir_x = P0x_imag - idx * 0.3 * cos_P03;
							vir_y = P0y_imag - idx * 0.3 * sin_P03;
							idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 2)
								{
									obstmap[index_xy].Status = 3;
								}
							}
						}

						double D_imag_12 = sqrt((P1x_imag - P2x_imag) * (P1x_imag - P2x_imag) + (P1y_imag - P2y_imag) * (P1y_imag - P2y_imag));
						int idx_imag_12 = ceil(D_imag_12 / 0.025);
						if (idx_imag_12 > 0)
						{
							for (int idx = 0; idx < idx_imag_12; idx++)
							{
								vir_x = P1x_imag + idx * 0.025 * cos_P12;
								vir_y = P1y_imag + idx * 0.025 * sin_P12;
								idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
								idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
								if (idx_x == 0)
								{
									idx_x = 1;
								}
								if (idx_y == 0)
								{
									idx_y = 1;
								}
								index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
								if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
								(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
								{
									if (obstmap[index_xy].Status == 5)
									{
										no_imag_map = 1;
										double SE_Usspark = (start_to_fus[0] - end_to_fus[0]) * (start_to_fus[0] - end_to_fus[0]) + (start_to_fus[1] - end_to_fus[1]) * (start_to_fus[1] - end_to_fus[1]);
										if (SE_Usspark < 2.25)
										{
											for (int Uss_start_index = 0; Uss_start_index < 2; Uss_start_index++)
											{
												int control_ob = 1 + Uss_start_index;
												double Uss_x = upa_x[control_ob];
												double Uss_y = upa_y[control_ob];
												double vir_x_;
												double vir_y_;
												vir_x_ = Uss_x * cos(start_to_fus[2]) - Uss_y * sin(start_to_fus[2]) + start_to_fus[0];
												vir_y_ = Uss_y * cos(start_to_fus[2]) + Uss_x * sin(start_to_fus[2]) + start_to_fus[1];
												int idx_x_ = ceil((pathfind_parameters.MAXX - vir_x_) / pathfind_parameters.MOTION_RESOLUTION);
												int idx_y_ = ceil((pathfind_parameters.MAXY - vir_y_) / pathfind_parameters.MOTION_RESOLUTION);
												if (idx_x_ == 0)
												{
													idx_x_ = 1;
												}
												if (idx_y_ == 0)
												{
													idx_y_ = 1;
												}
												int index_xy_ = (idx_x_ - 1) * pathfind_parameters.XIDX + (idx_y_ - 1);
												if ((index_xy_ >= 0) && (index_xy_ < pathfind_parameters.MAX_IDX) && 
												(idx_x_ >= 0) && (idx_x_ <= pathfind_parameters.XIDX) && (idx_y_ >= 0) && (idx_y_ <= pathfind_parameters.XIDY))
												{
													obstmap[index_xy_].Status = 4;
													int i = idx_x - 1;
													int j = idx_y - 1;
													int dir1 = i * pathfind_parameters.XIDX + j + 1;
													int dir2 = i * pathfind_parameters.XIDX + j - 1;
													int dir3 = (i + 1) * pathfind_parameters.XIDX + j;
													int dir4 = (i - 1) * pathfind_parameters.XIDX + j;
													int dir5 = (i + 1) * pathfind_parameters.XIDX + j + 1;
													int dir6 = (i + 1) * pathfind_parameters.XIDX + j - 1;
													int dir7 = (i - 1) * pathfind_parameters.XIDX + j + 1;
													int dir8 = (i - 1) * pathfind_parameters.XIDX + j - 1;

													if (dir1 >= 0 && dir1 < pathfind_parameters.MAX_IDX && 
													dir2 >= 0 && dir2 < pathfind_parameters.MAX_IDX && 
													dir3 >= 0 && dir3 < pathfind_parameters.MAX_IDX && 
													dir4 >= 0 && dir4 < pathfind_parameters.MAX_IDX && 
													dir5 >= 0 && dir5 < pathfind_parameters.MAX_IDX && 
													dir6 >= 0 && dir6 < pathfind_parameters.MAX_IDX && 
													dir7 >= 0 && dir7 < pathfind_parameters.MAX_IDX && 
													dir8 >= 0 && dir8 < pathfind_parameters.MAX_IDX)
													{
														if (obstmap[dir1].Status != 0 && obstmap[dir1].Status != 3 && obstmap[dir1].Status != 5)
														{
															obstmap[dir1].Status = 9u;
														}
														if (obstmap[dir2].Status != 0 && obstmap[dir2].Status != 3 && obstmap[dir2].Status != 5)
														{
															obstmap[dir2].Status = 9u;
														}
														if (obstmap[dir3].Status != 0 && obstmap[dir3].Status != 3 && obstmap[dir3].Status != 5)
														{
															obstmap[dir3].Status = 9u;
														}
														if (obstmap[dir4].Status != 0 && obstmap[dir4].Status != 3 && obstmap[dir4].Status != 5)
														{
															obstmap[dir4].Status = 9u;
														}
														if (obstmap[dir5].Status != 0 && obstmap[dir5].Status != 3 && obstmap[dir5].Status != 5)
														{
															obstmap[dir5].Status = 9u;
														}
														if (obstmap[dir6].Status != 0 && obstmap[dir6].Status != 3 && obstmap[dir6].Status != 5)
														{
															obstmap[dir6].Status = 9u;
														}
														if (obstmap[dir7].Status != 0 && obstmap[dir7].Status != 3 && obstmap[dir7].Status != 5)
														{
															obstmap[dir7].Status = 9u;
														}
														if (obstmap[dir8].Status != 0 && obstmap[dir8].Status != 3 && obstmap[dir8].Status != 5)
														{
															obstmap[dir8].Status = 9u;
														}
													}
												}
											}
										}
									}
									else if (obstmap[index_xy].Status != 0)
									{
										obstmap[index_xy].Status = 3;
									}
									//obstmap[index_xy].Status = 3;
								}

							}

						}

						double cos_theta_add = -sin_P03;
						double sin_theta_add = cos_P03;
						double cos_theta_diff = sin_P03;
						double sin_theta_diff = -cos_P03;
						double P0x_towards_1 = P0x + 5 * cos_theta_add;
						double P0y_towards_1 = P0y + 5 * sin_theta_add;
						double P0x_towards_2 = P0x + 5 * cos_theta_diff;
						double P0y_towards_2 = P0y + 5 * sin_theta_diff;
						double D_add = sqrt((P0x_towards_1 - end_to_fus[0]) * (P0x_towards_1 - end_to_fus[0]) + (P0y_towards_1 - end_to_fus[1]) * (P0y_towards_1 - end_to_fus[1]));
						double D_diff = sqrt((P0x_towards_2 - end_to_fus[0]) * (P0x_towards_2 - end_to_fus[0]) + (P0y_towards_2 - end_to_fus[1]) * (P0y_towards_2 - end_to_fus[1]));
						double P0x_towards = 0;
						double P0y_towards = 0;
						if (D_add > D_diff)
						{
							P0x_towards = P0x_towards_1;
							P0y_towards = P0y_towards_1;
						}
						else
						{
							P0x_towards = P0x_towards_2;
							P0y_towards = P0y_towards_2;
						}
						for (int idx = 0; idx < 80; idx++)
						{
							vir_x = P0x_towards + idx * 0.3 * cos_P03;
							vir_y = P0y_towards + idx * 0.3 * sin_P03;
							idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 2)
								{
									obstmap[index_xy].Status = 3;
								}
							}
						}
						for (int idx = 1; idx < 80; idx++)
						{
							vir_x = P0x_towards - idx * 0.3 * cos_P03;
							vir_y = P0y_towards - idx * 0.3 * sin_P03;
							idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
							idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
							if (idx_x == 0)
							{
								idx_x = 1;
							}
							if (idx_y == 0)
							{
								idx_y = 1;
							}
							index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
							if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
							(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
							{
								if (obstmap[index_xy].Status == 2)
								{
									obstmap[index_xy].Status = 3;
								}
							}
						}

						double D_P01_imag = sqrt((P1x_imag - P0x_imag) * (P1x_imag - P0x_imag) + (P1y_imag - P0y_imag) * (P1y_imag - P0y_imag));
						if (D_P01_imag < 0.1)
						{
							return 1;
						}
						double cos_theta_P01imag = (P1x_imag - P0x_imag) / D_P01_imag;
						double sin_theta_P01imag = (P1y_imag - P0y_imag) / D_P01_imag;
						int index_imag_P01 = ceil(D_P01_imag / 0.3);
						if (index_imag_P01 >= 1)
						{
							for (int idx = 1; idx < index_imag_P01; idx++)
							{
								vir_x = P0x_imag + idx * 0.3 * cos_theta_P01imag;
								vir_y = P0y_imag + idx * 0.3 * sin_theta_P01imag;
								idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
								idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
								if (idx_x == 0)
								{
									idx_x = 1;
								}
								if (idx_y == 0)
								{
									idx_y = 1;
								}
								index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
								if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
								(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
								{
									if (obstmap[index_xy].Status == 2)
									{
										obstmap[index_xy].Status = 3;
									}
								}
							}
						}

						double D_P23_imag = sqrt((P2x_imag - P3x_imag) * (P2x_imag - P3x_imag) + (P2y_imag - P3y_imag) * (P2y_imag - P3y_imag));
						if (D_P23_imag < 0.1)
						{
							return 1;
						}
						double cos_theta_P23imag = (P3x_imag - P2x_imag) / D_P23_imag;
						double sin_theta_P23imag = (P3y_imag - P2y_imag) / D_P23_imag;
						int index_imag_P23 = ceil(D_P23_imag / 0.3);
						if (index_imag_P23 >= 1)
						{
							for (int idx = 1; idx < index_imag_P23; idx++)
							{
								vir_x = P2x_imag + idx * 0.3 * cos_theta_P23imag;
								vir_y = P2y_imag + idx * 0.3 * sin_theta_P23imag;
								idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
								idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
								if (idx_x == 0)
								{
									idx_x = 1;
								}
								if (idx_y == 0)
								{
									idx_y = 1;
								}
								index_xy = (idx_x - 1) * pathfind_parameters.XIDX + (idx_y - 1);
								if ((index_xy >= 0) && (index_xy < pathfind_parameters.MAX_IDX) && 
								(idx_x >= 0) && (idx_x <= pathfind_parameters.XIDX) && (idx_y >= 0) && (idx_y <= pathfind_parameters.XIDY))
								{
									if (obstmap[index_xy].Status == 2)
									{
										obstmap[index_xy].Status = 3;
									}
								}
							}
						}
					}
				}
			}

			return 0;
		}
		else
		{
			return 1;
		}
	}

    void ExpandObstaclePoint()
    {
        for (int i = 0; i < pathfind_parameters.XIDX; i++) 
        {
            for (int j = 0; j < pathfind_parameters.XIDY; j++) 
            {
                if ((obstmap[i * pathfind_parameters.XIDX + j].Status == 0) || (obstmap[i * pathfind_parameters.XIDX + j].Status == 3))
                {
					dis_map[j][249-i]=1;
                    int dir1 = i * pathfind_parameters.XIDX + j + 1;
                    int dir2 = i * pathfind_parameters.XIDX + j - 1;
                    int dir3 = (i + 1) * pathfind_parameters.XIDX + j;
                    int dir4 = (i - 1) * pathfind_parameters.XIDX + j;
                    int dir5 = (i + 1) * pathfind_parameters.XIDX + j + 1;
                    int dir6 = (i + 1) * pathfind_parameters.XIDX+ j - 1;
                    int dir7 = (i - 1) * pathfind_parameters.XIDX + j + 1;
                    int dir8 = (i - 1) * pathfind_parameters.XIDX+ j - 1;

                    if (dir1 >= 0 && dir1 < pathfind_parameters.MAX_IDX && obstmap[dir1].Status != 0 && obstmap[dir1].Status != 3)
                    {
                        obstmap[dir1].Status = 9u;
                    }
                    if (dir2 >= 0 && dir2 < pathfind_parameters.MAX_IDX && obstmap[dir2].Status != 0 && obstmap[dir2].Status != 3)
                    {
                        obstmap[dir2].Status = 9u;
                    }
                    if (dir3 >= 0 && dir3 < pathfind_parameters.MAX_IDX && obstmap[dir3].Status != 0 && obstmap[dir3].Status != 3)
                    {
                        obstmap[dir3].Status = 9u;
                    }
                    if (dir4 >= 0 && dir4 < pathfind_parameters.MAX_IDX && obstmap[dir4].Status != 0 && obstmap[dir4].Status != 3)
                    {
                        obstmap[dir4].Status = 9u;
                    }
                    if (dir5 >= 0 && dir5 < pathfind_parameters.MAX_IDX && obstmap[dir5].Status != 0 && obstmap[dir5].Status != 3)
                    {
                        obstmap[dir5].Status = 9u;
                    }
                    if (dir6 >= 0 && dir6 < pathfind_parameters.MAX_IDX && obstmap[dir6].Status != 0 && obstmap[dir6].Status != 3)
                    {
                        obstmap[dir6].Status = 9u;
                    }
                    if (dir7 >= 0 && dir7 < pathfind_parameters.MAX_IDX && obstmap[dir7].Status != 0 && obstmap[dir7].Status != 3)
                    {
                        obstmap[dir7].Status = 9u;
                    }
                    if (dir8 >= 0 && dir8 < pathfind_parameters.MAX_IDX && obstmap[dir8].Status != 0 && obstmap[dir8].Status != 3)
                    {
                        obstmap[dir8].Status = 9u;
                    }
                }
            }
        }
    }
    void ModifyMapHybirdAStar()
    {
        hybird_astar_imagmap_get();
        ExpandObstaclePoint();
    }

}
