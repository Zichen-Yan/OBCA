#include "findpath.h"
//#include "apa_api.h" 
//#include <bclcpp/bclcpp.hpp> 

#define DEBUG_PC
// #define LOG_ALL
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////txt////////////////////////////////////////////////////////
using namespace std;
FILE* pF;
std::string filename;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
Plan plan;
App app;
Fusion fusion;
Control control;
Calculation calculation;

int Read_obstmap = 0;
int APAStatus_before = 0;

int SEorES = 0; // 起点到终点为0，终点到起点为其他
int heartrunning = 0;

int index_request = 0;
int ErrorCode = 100;
int parking_index = 1;
int Gears = 0;
int no_imag_map = 0;
int aaa = 0;
int bbb = 0;
int ccc = 0;
double b_depth = 0;
double ctrl_nav_x = 0;
double ctrl_nav_y = 0;
int PathLong = 0;
int PlanOnlyOne = 0;
int PathOnlyOneNow = 0;
// 2022.12.06: 增加全局变量
double Start_last[3] = { 0, 0, 0 };
double d_s2s = 0;
double d_s2e = 0;
double d_phi = 0;
int StartRecordFlag = 0;
double park0_x_imag1[37296] = { 0 };
double park0_y_imag1[37296] = { 0 };
const int park0_y_imag1_INDEX = 37296;
double park0_x_imag2[42441] = { 0 };
double park0_y_imag2[42441] = { 0 };
const int park0_y_imag2_INDEX = 42441;

// 2022.12.06

double Start[3] = { 0, 0, 0 };
double End[3] = { 0, 0, 0 };
double End_before[3] = { 0, 0, 0 };
double End_level_small[3] = { 0, 0, 0 };
double Theta_se = 0;
double Y_se = 0;
double X_local = 0;
double Y_local = 0;

double back_path = 100;
double front_path = 100;
int front_D = 100;
int back_D = 100;
int small_level_park = 0;

double P0x = 0;
double P0y = 0;
double P1x = 0;
double P1y = 0;
double P2x = 0;
double P2y = 0;
double P3x = 0;
double P3y = 0;

// 扣车模
const double Car_x[3962] = { 4.0856,4.0856,4.0856,4.0856,4.0856,4.0856,4.0856,4.0856,4.0845,4.0809,4.077,4.073,4.0688,4.0643,4.0597,4.0549,4.0498,4.045,4.045,4.0353,4.0247,4.0132,4.0008,3.9876,3.9735,3.9586,3.9429,3.9264,3.9092,3.8911,3.8723,3.8528,3.85,3.85,3.8315,3.8112,3.7891,3.7654,3.7403,3.714,3.6866,3.6582,3.6292,3.6118,3.6118,3.5819,3.5521,3.5222,3.4923,3.4624,3.4324,3.4025,3.3725,3.3425,3.3361,3.3361,3.3061,3.2761,3.2461,3.2161,3.1861,3.1561,3.1261,3.0961,3.0661,3.0361,3.0061,2.9761,2.9461,2.9161,2.8861,2.8561,2.8261,2.7961,2.7661,2.7361,2.7061,2.6761,2.6461,2.6161,2.5861,2.5561,2.5261,2.4961,2.4661,2.4361,2.4061,2.3761,2.3461,2.3161,2.2861,2.2561,2.2261,2.1961,2.1661,2.1361,2.1061,2.0761,2.0461,2.0161,1.9861,1.9561,1.9261,1.8961,1.8661,1.8361,1.8061,1.7761,1.7461,1.7161,1.6861,1.6561,1.6261,1.5961,1.5661,1.5361,1.5061,1.4761,1.4461,1.4161,1.3861,1.3561,1.3261,1.2961,1.2661,1.2361,1.2061,1.1761,1.1461,1.1161,1.0861,1.0561,1.0261,0.9961,0.9661,0.9361,0.9061,0.8761,0.8461,0.8161,0.7861,0.7561,0.7261,0.6961,0.6661,0.6361,0.6061,0.5761,0.5461,0.5161,0.4861,0.4561,0.4261,0.3961,0.3661,0.3361,0.3061,0.2761,0.2461,0.2161,0.1861,0.1561,0.1261,0.0961,0.0661,0.0361,0.0061,-0.0239,-0.0539,-0.0839,-0.0983,-0.0983,-0.1283,-0.15829,-0.18827,-0.21824,-0.24819,-0.27813,-0.30803,-0.33791,-0.36776,-0.3811,-0.3811,-0.41079,-0.44045,-0.47009,-0.49969,-0.52927,-0.55882,-0.58835,-0.61784,-0.64729,-0.67672,-0.70611,-0.73546,-0.757,-0.757,-0.78655,-0.81588,-0.84496,-0.87375,-0.9022,-0.93028,-0.95794,-0.9657,-0.9657,-0.98725,-1.007,-1.0247,-1.0404,-1.0539,-1.0618,-1.0618,-1.0711,-1.0799,-1.0881,-1.0957,-1.1028,-1.1093,-1.1152,-1.1205,-1.1253,-1.1295,-1.1331,-1.1361,-1.1367,-1.1367,-1.1397,-1.1424,-1.145,-1.1473,-1.1494,-1.1512,-1.1529,-1.1543,-1.1555,-1.1564,-1.1571,-1.1571,-1.1564,-1.1555,-1.1543,-1.1529,-1.1512,-1.1494,-1.1473,-1.145,-1.1424,-1.1397,-1.1367,-1.1367,-1.1361,-1.1331,-1.1295,-1.1253,-1.1205,-1.1152,-1.1093,-1.1028,-1.0957,-1.0881,-1.0799,-1.0711,-1.0618,-1.0618,-1.0539,-1.0404,-1.0247,-1.007,-0.98725,-0.9657,-0.9657,-0.95794,-0.93028,-0.9022,-0.87375,-0.84496,-0.81588,-0.78655,-0.757,-0.757,-0.73546,-0.70611,-0.67672,-0.64729,-0.61784,-0.58835,-0.55882,-0.52927,-0.49969,-0.47009,-0.44045,-0.41079,-0.3811,-0.3811,-0.36776,-0.33791,-0.30803,-0.27813,-0.24819,-0.21824,-0.18827,-0.15829,-0.1283,-0.0983,-0.0983,-0.0839,-0.0539,-0.0239,0.0061,0.0361,0.0661,0.0961,0.1261,0.1561,0.1861,0.2161,0.2461,0.2761,0.3061,0.3361,0.3661,0.3961,0.4261,0.4561,0.4861,0.5161,0.5461,0.5761,0.6061,0.6361,0.6661,0.6961,0.7261,0.7561,0.7861,0.8161,0.8461,0.8761,0.9061,0.9361,0.9661,0.9961,1.0261,1.0561,1.0861,1.1161,1.1461,1.1761,1.2061,1.2361,1.2661,1.2961,1.3261,1.3561,1.3861,1.4161,1.4461,1.4761,1.5061,1.5361,1.5661,1.5961,1.6261,1.6561,1.6861,1.7161,1.7461,1.7761,1.8061,1.8361,1.8661,1.8961,1.9261,1.9561,1.9861,2.0161,2.0461,2.0761,2.1061,2.1361,2.1661,2.1961,2.2261,2.2561,2.2861,2.3161,2.3461,2.3761,2.4061,2.4361,2.4661,2.4961,2.5261,2.5561,2.5861,2.6161,2.6461,2.6761,2.7061,2.7361,2.7661,2.7961,2.8261,2.8561,2.8861,2.9161,2.9461,2.9761,3.0061,3.0361,3.0661,3.0961,3.1261,3.1561,3.1861,3.2161,3.2461,3.2761,3.3061,3.3361,3.3361,3.3425,3.3725,3.4025,3.4324,3.4624,3.4923,3.5222,3.5521,3.5819,3.6118,3.6118,3.6292,3.6582,3.6866,3.714,3.7403,3.7654,3.7891,3.8112,3.8315,3.85,3.85,3.8528,3.8723,3.8911,3.9092,3.9264,3.9429,3.9586,3.9735,3.9876,4.0008,4.0132,4.0247,4.0353,4.045,4.045,4.0498,4.0549,4.0597,4.0643,4.0688,4.073,4.077,4.0809,4.0845,4.0856,4.0856,4.0856,4.0856,4.0856,4.0856,4.0856,4.0856,4.1156,4.1156,4.1156,4.1156,4.1156,4.1156,4.1156,4.1156,4.1143,4.1107,4.1068,4.1028,4.0986,4.0942,4.0895,4.0847,4.0797,4.0745,4.0735,4.0638,4.0532,4.0418,4.0295,4.0164,4.0025,3.9878,3.9723,3.956,3.9389,3.9211,3.9026,3.8834,3.8724,3.8744,3.8559,3.8358,3.814,3.7908,3.7661,3.7403,3.7134,3.6855,3.6569,3.6277,3.6167,3.6149,3.585,3.5551,3.5252,3.4953,3.4654,3.4355,3.4055,3.3756,3.3456,3.3373,3.3361,3.3061,3.2761,3.2461,3.2161,3.1861,3.1561,3.1261,3.0961,3.0661,3.0361,3.0061,2.9761,2.9461,2.9161,2.8861,2.8561,2.8261,2.7961,2.7661,2.7361,2.7061,2.6761,2.6461,2.6161,2.5861,2.5561,2.5261,2.4961,2.4661,2.4361,2.4061,2.3761,2.3461,2.3161,2.2861,2.2561,2.2261,2.1961,2.1661,2.1361,2.1061,2.0761,2.0461,2.0161,1.9861,1.9561,1.9261,1.8961,1.8661,1.8361,1.8061,1.7761,1.7461,1.7161,1.6861,1.6561,1.6261,1.5961,1.5661,1.5361,1.5061,1.4761,1.4461,1.4161,1.3861,1.3561,1.3261,1.2961,1.2661,1.2361,1.2061,1.1761,1.1461,1.1161,1.0861,1.0561,1.0261,0.9961,0.9661,0.9361,0.9061,0.8761,0.8461,0.8161,0.7861,0.7561,0.7261,0.6961,0.6661,0.6361,0.6061,0.5761,0.5461,0.5161,0.4861,0.4561,0.4261,0.3961,0.3661,0.3361,0.3061,0.2761,0.2461,0.2161,0.1861,0.1561,0.1261,0.0961,0.0661,0.0361,0.0061,-0.0239,-0.0539,-0.0839,-0.0983,-0.098501,-0.1285,-0.15849,-0.18847,-0.21844,-0.2484,-0.27833,-0.30824,-0.33812,-0.36798,-0.38441,-0.38533,-0.41502,-0.44468,-0.47432,-0.50393,-0.53351,-0.56306,-0.59258,-0.62208,-0.65153,-0.68096,-0.71035,-0.73971,-0.76339,-0.76163,-0.79118,-0.82053,-0.84963,-0.87846,-0.90697,-0.93512,-0.96289,-0.9781,-0.98565,-1.0073,-1.0272,-1.0454,-1.0616,-1.0759,-1.088,-1.0898,-1.0902,-1.0996,-1.1083,-1.1166,-1.1242,-1.1313,-1.1379,-1.1439,-1.1493,-1.1542,-1.1584,-1.1622,-1.1653,-1.1666,-1.1665,-1.1695,-1.1723,-1.1748,-1.1771,-1.1792,-1.1811,-1.1827,-1.1842,-1.1854,-1.1863,-1.1871,-1.1871,-1.1863,-1.1854,-1.1842,-1.1827,-1.1811,-1.1792,-1.1771,-1.1748,-1.1723,-1.1695,-1.1665,-1.1666,-1.1653,-1.1622,-1.1584,-1.1542,-1.1493,-1.1439,-1.1379,-1.1313,-1.1242,-1.1166,-1.1083,-1.0996,-1.0902,-1.0898,-1.088,-1.0759,-1.0616,-1.0454,-1.0272,-1.0073,-0.98565,-0.9781,-0.96289,-0.93512,-0.90697,-0.87846,-0.84963,-0.82053,-0.79118,-0.76163,-0.76339,-0.73971,-0.71035,-0.68096,-0.65153,-0.62208,-0.59258,-0.56306,-0.53351,-0.50393,-0.47432,-0.44468,-0.41502,-0.38533,-0.38441,-0.36798,-0.33812,-0.30824,-0.27833,-0.2484,-0.21844,-0.18847,-0.15849,-0.1285,-0.098501,-0.0983,-0.0839,-0.0539,-0.0239,0.0061,0.0361,0.0661,0.0961,0.1261,0.1561,0.1861,0.2161,0.2461,0.2761,0.3061,0.3361,0.3661,0.3961,0.4261,0.4561,0.4861,0.5161,0.5461,0.5761,0.6061,0.6361,0.6661,0.6961,0.7261,0.7561,0.7861,0.8161,0.8461,0.8761,0.9061,0.9361,0.9661,0.9961,1.0261,1.0561,1.0861,1.1161,1.1461,1.1761,1.2061,1.2361,1.2661,1.2961,1.3261,1.3561,1.3861,1.4161,1.4461,1.4761,1.5061,1.5361,1.5661,1.5961,1.6261,1.6561,1.6861,1.7161,1.7461,1.7761,1.8061,1.8361,1.8661,1.8961,1.9261,1.9561,1.9861,2.0161,2.0461,2.0761,2.1061,2.1361,2.1661,2.1961,2.2261,2.2561,2.2861,2.3161,2.3461,2.3761,2.4061,2.4361,2.4661,2.4961,2.5261,2.5561,2.5861,2.6161,2.6461,2.6761,2.7061,2.7361,2.7661,2.7961,2.8261,2.8561,2.8861,2.9161,2.9461,2.9761,3.0061,3.0361,3.0661,3.0961,3.1261,3.1561,3.1861,3.2161,3.2461,3.2761,3.3061,3.3361,3.3373,3.3456,3.3756,3.4055,3.4355,3.4654,3.4953,3.5252,3.5551,3.585,3.6149,3.6167,3.6277,3.6569,3.6855,3.7134,3.7403,3.7661,3.7908,3.814,3.8358,3.8559,3.8744,3.8724,3.8834,3.9026,3.9211,3.9389,3.956,3.9723,3.9878,4.0025,4.0164,4.0295,4.0418,4.0532,4.0638,4.0735,4.0745,4.0797,4.0847,4.0895,4.0942,4.0986,4.1028,4.1068,4.1107,4.1143,4.1156,4.1156,4.1156,4.1156,4.1156,4.1156,4.1156,4.1156,4.1456,4.1456,4.1456,4.1456,4.1456,4.1456,4.1456,4.1456,4.1441,4.1405,4.1366,4.1326,4.1284,4.124,4.1193,4.1145,4.1095,4.1043,4.104,4.1021,4.0924,4.0818,4.0705,4.0583,4.0453,4.0315,4.0169,4.0016,3.9855,3.9687,3.9511,3.9328,3.9138,3.8948,3.8987,3.8804,3.8604,3.8389,3.816,3.7918,3.7664,3.7399,3.7126,3.6844,3.6556,3.6262,3.6216,3.6179,3.5881,3.5582,3.5283,3.4984,3.4685,3.4386,3.4086,3.3786,3.3487,3.3385,3.3361,3.3061,3.2761,3.2461,3.2161,3.1861,3.1561,3.1261,3.0961,3.0661,3.0361,3.0061,2.9761,2.9461,2.9161,2.8861,2.8561,2.8261,2.7961,2.7661,2.7361,2.7061,2.6761,2.6461,2.6161,2.5861,2.5561,2.5261,2.4961,2.4661,2.4361,2.4061,2.3761,2.3461,2.3161,2.2861,2.2561,2.2261,2.1961,2.1661,2.1361,2.1061,2.0761,2.0461,2.0161,1.9861,1.9561,1.9261,1.8961,1.8661,1.8361,1.8061,1.7761,1.7461,1.7161,1.6861,1.6561,1.6261,1.5961,1.5661,1.5361,1.5061,1.4761,1.4461,1.4161,1.3861,1.3561,1.3261,1.2961,1.2661,1.2361,1.2061,1.1761,1.1461,1.1161,1.0861,1.0561,1.0261,0.9961,0.9661,0.9361,0.9061,0.8761,0.8461,0.8161,0.7861,0.7561,0.7261,0.6961,0.6661,0.6361,0.6061,0.5761,0.5461,0.5161,0.4861,0.4561,0.4261,0.3961,0.3661,0.3361,0.3061,0.2761,0.2461,0.2161,0.1861,0.1561,0.1261,0.0961,0.0661,0.0361,0.0061,-0.0239,-0.0539,-0.0839,-0.0983,-0.098701,-0.1287,-0.15869,-0.18867,-0.21864,-0.2486,-0.27853,-0.30845,-0.33833,-0.36819,-0.38772,-0.38957,-0.41926,-0.44892,-0.47856,-0.50817,-0.53775,-0.5673,-0.59682,-0.62632,-0.65578,-0.6852,-0.7146,-0.74396,-0.76979,-0.76626,-0.79581,-0.82517,-0.8543,-0.88316,-0.91172,-0.93994,-0.9678,-0.9905,-1.0056,-1.0273,-1.0474,-1.0659,-1.0826,-1.0975,-1.1105,-1.1178,-1.1186,-1.128,-1.1368,-1.145,-1.1527,-1.1599,-1.1665,-1.1726,-1.1781,-1.183,-1.1874,-1.1912,-1.1945,-1.1965,-1.1964,-1.1994,-1.2021,-1.2047,-1.207,-1.2091,-1.211,-1.2126,-1.2141,-1.2153,-1.2163,-1.217,-1.2171,-1.2171,-1.217,-1.2163,-1.2153,-1.2141,-1.2126,-1.211,-1.2091,-1.207,-1.2047,-1.2021,-1.1994,-1.1964,-1.1965,-1.1945,-1.1912,-1.1874,-1.183,-1.1781,-1.1726,-1.1665,-1.1599,-1.1527,-1.145,-1.1368,-1.128,-1.1186,-1.1178,-1.1105,-1.0975,-1.0826,-1.0659,-1.0474,-1.0273,-1.0056,-0.9905,-0.9678,-0.93994,-0.91172,-0.88316,-0.8543,-0.82517,-0.79581,-0.76626,-0.76979,-0.74396,-0.7146,-0.6852,-0.65578,-0.62632,-0.59682,-0.5673,-0.53775,-0.50817,-0.47856,-0.44892,-0.41926,-0.38957,-0.38772,-0.36819,-0.33833,-0.30845,-0.27853,-0.2486,-0.21864,-0.18867,-0.15869,-0.1287,-0.098701,-0.0983,-0.0839,-0.0539,-0.0239,0.0061,0.0361,0.0661,0.0961,0.1261,0.1561,0.1861,0.2161,0.2461,0.2761,0.3061,0.3361,0.3661,0.3961,0.4261,0.4561,0.4861,0.5161,0.5461,0.5761,0.6061,0.6361,0.6661,0.6961,0.7261,0.7561,0.7861,0.8161,0.8461,0.8761,0.9061,0.9361,0.9661,0.9961,1.0261,1.0561,1.0861,1.1161,1.1461,1.1761,1.2061,1.2361,1.2661,1.2961,1.3261,1.3561,1.3861,1.4161,1.4461,1.4761,1.5061,1.5361,1.5661,1.5961,1.6261,1.6561,1.6861,1.7161,1.7461,1.7761,1.8061,1.8361,1.8661,1.8961,1.9261,1.9561,1.9861,2.0161,2.0461,2.0761,2.1061,2.1361,2.1661,2.1961,2.2261,2.2561,2.2861,2.3161,2.3461,2.3761,2.4061,2.4361,2.4661,2.4961,2.5261,2.5561,2.5861,2.6161,2.6461,2.6761,2.7061,2.7361,2.7661,2.7961,2.8261,2.8561,2.8861,2.9161,2.9461,2.9761,3.0061,3.0361,3.0661,3.0961,3.1261,3.1561,3.1861,3.2161,3.2461,3.2761,3.3061,3.3361,3.3385,3.3487,3.3786,3.4086,3.4386,3.4685,3.4984,3.5283,3.5582,3.5881,3.6179,3.6216,3.6262,3.6556,3.6844,3.7126,3.7399,3.7664,3.7918,3.816,3.8389,3.8604,3.8804,3.8987,3.8948,3.9138,3.9328,3.9511,3.9687,3.9855,4.0016,4.0169,4.0315,4.0453,4.0583,4.0705,4.0818,4.0924,4.1021,4.104,4.1043,4.1095,4.1145,4.1193,4.124,4.1284,4.1326,4.1366,4.1405,4.1441,4.1456,4.1456,4.1456,4.1456,4.1456,4.1456,4.1456,4.1456,4.1756,4.1756,4.1756,4.1756,4.1756,4.1756,4.1756,4.1756,4.1739,4.1703,4.1664,4.1624,4.1582,4.1538,4.1492,4.1443,4.1393,4.1341,4.1336,4.1306,4.1209,4.1104,4.0991,4.087,4.0741,4.0604,4.046,4.0309,4.0149,3.9983,3.9809,3.9629,3.9442,3.9248,3.9172,3.9231,3.9048,3.8849,3.8637,3.8411,3.8173,3.7923,3.7663,3.7393,3.7116,3.6832,3.6542,3.6266,3.621,3.5911,3.5613,3.5314,3.5015,3.4716,3.4416,3.4117,3.3817,3.3517,3.3397,3.3361,3.3061,3.2761,3.2461,3.2161,3.1861,3.1561,3.1261,3.0961,3.0661,3.0361,3.0061,2.9761,2.9461,2.9161,2.8861,2.8561,2.8261,2.7961,2.7661,2.7361,2.7061,2.6761,2.6461,2.6161,2.5861,2.5561,2.5261,2.4961,2.4661,2.4361,2.4061,2.3761,2.3461,2.3161,2.2861,2.2561,2.2261,2.1961,2.1661,2.1361,2.1061,2.0761,2.0461,2.0161,1.9861,1.9561,1.9261,1.8961,1.8661,1.8361,1.8061,1.7761,1.7461,1.7161,1.6861,1.6561,1.6261,1.5961,1.5661,1.5361,1.5061,1.4761,1.4461,1.4161,1.3861,1.3561,1.3261,1.2961,1.2661,1.2361,1.2061,1.1761,1.1461,1.1161,1.0861,1.0561,1.0261,0.9961,0.9661,0.9361,0.9061,0.8761,0.8461,0.8161,0.7861,0.7561,0.7261,0.6961,0.6661,0.6361,0.6061,0.5761,0.5461,0.5161,0.4861,0.4561,0.4261,0.3961,0.3661,0.3361,0.3061,0.2761,0.2461,0.2161,0.1861,0.1561,0.1261,0.0961,0.0661,0.0361,0.0061,-0.0239,-0.0539,-0.0839,-0.0983,-0.098902,-0.1289,-0.15889,-0.18888,-0.21885,-0.2488,-0.27874,-0.30865,-0.33854,-0.3684,-0.39103,-0.3938,-0.42349,-0.45315,-0.48279,-0.5124,-0.54198,-0.57154,-0.60106,-0.63056,-0.66002,-0.68945,-0.71884,-0.74821,-0.77618,-0.77088,-0.80044,-0.82981,-0.85896,-0.88785,-0.91646,-0.94475,-0.97269,-1.0002,-1.0029,-1.0255,-1.0473,-1.0676,-1.0863,-1.1035,-1.119,-1.1327,-1.1446,-1.1458,-1.1471,-1.1564,-1.1652,-1.1735,-1.1812,-1.1884,-1.1951,-1.2012,-1.2068,-1.2118,-1.2163,-1.2203,-1.2236,-1.2264,-1.2262,-1.2292,-1.232,-1.2345,-1.2368,-1.2389,-1.2408,-1.2425,-1.2439,-1.2452,-1.2462,-1.247,-1.2471,-1.2471,-1.247,-1.2462,-1.2452,-1.2439,-1.2425,-1.2408,-1.2389,-1.2368,-1.2345,-1.232,-1.2292,-1.2262,-1.2264,-1.2236,-1.2203,-1.2163,-1.2118,-1.2068,-1.2012,-1.1951,-1.1884,-1.1812,-1.1735,-1.1652,-1.1564,-1.1471,-1.1458,-1.1446,-1.1327,-1.119,-1.1035,-1.0863,-1.0676,-1.0473,-1.0255,-1.0029,-1.0002,-0.97269,-0.94475,-0.91646,-0.88785,-0.85896,-0.82981,-0.80044,-0.77088,-0.77618,-0.74821,-0.71884,-0.68945,-0.66002,-0.63056,-0.60106,-0.57154,-0.54198,-0.5124,-0.48279,-0.45315,-0.42349,-0.3938,-0.39103,-0.3684,-0.33854,-0.30865,-0.27874,-0.2488,-0.21885,-0.18888,-0.15889,-0.1289,-0.098902,-0.0983,-0.0839,-0.0539,-0.0239,0.0061,0.0361,0.0661,0.0961,0.1261,0.1561,0.1861,0.2161,0.2461,0.2761,0.3061,0.3361,0.3661,0.3961,0.4261,0.4561,0.4861,0.5161,0.5461,0.5761,0.6061,0.6361,0.6661,0.6961,0.7261,0.7561,0.7861,0.8161,0.8461,0.8761,0.9061,0.9361,0.9661,0.9961,1.0261,1.0561,1.0861,1.1161,1.1461,1.1761,1.2061,1.2361,1.2661,1.2961,1.3261,1.3561,1.3861,1.4161,1.4461,1.4761,1.5061,1.5361,1.5661,1.5961,1.6261,1.6561,1.6861,1.7161,1.7461,1.7761,1.8061,1.8361,1.8661,1.8961,1.9261,1.9561,1.9861,2.0161,2.0461,2.0761,2.1061,2.1361,2.1661,2.1961,2.2261,2.2561,2.2861,2.3161,2.3461,2.3761,2.4061,2.4361,2.4661,2.4961,2.5261,2.5561,2.5861,2.6161,2.6461,2.6761,2.7061,2.7361,2.7661,2.7961,2.8261,2.8561,2.8861,2.9161,2.9461,2.9761,3.0061,3.0361,3.0661,3.0961,3.1261,3.1561,3.1861,3.2161,3.2461,3.2761,3.3061,3.3361,3.3397,3.3517,3.3817,3.4117,3.4416,3.4716,3.5015,3.5314,3.5613,3.5911,3.621,3.6266,3.6542,3.6832,3.7116,3.7393,3.7663,3.7923,3.8173,3.8411,3.8637,3.8849,3.9048,3.9231,3.9172,3.9248,3.9442,3.9629,3.9809,3.9983,4.0149,4.0309,4.046,4.0604,4.0741,4.087,4.0991,4.1104,4.1209,4.1306,4.1336,4.1341,4.1393,4.1443,4.1492,4.1538,4.1582,4.1624,4.1664,4.1703,4.1739,4.1756,4.1756,4.1756,4.1756,4.1756,4.1756,4.1756,4.1756,4.2056,4.2056,4.2056,4.2056,4.2056,4.2056,4.2056,4.2056,4.2037,4.2,4.1962,4.1922,4.188,4.1836,4.179,4.1742,4.1692,4.164,4.1631,4.1591,4.1494,4.139,4.1277,4.1157,4.1029,4.0894,4.0751,4.0601,4.0443,4.0279,4.0107,3.9929,3.9744,3.9553,3.9395,3.9474,3.9292,3.9095,3.8884,3.8661,3.8426,3.818,3.7924,3.7659,3.7385,3.7105,3.6819,3.6527,3.6315,3.6241,3.5942,3.5643,3.5344,3.5045,3.4746,3.4447,3.4147,3.3848,3.3548,3.3409,3.3361,3.3061,3.2761,3.2461,3.2161,3.1861,3.1561,3.1261,3.0961,3.0661,3.0361,3.0061,2.9761,2.9461,2.9161,2.8861,2.8561,2.8261,2.7961,2.7661,2.7361,2.7061,2.6761,2.6461,2.6161,2.5861,2.5561,2.5261,2.4961,2.4661,2.4361,2.4061,2.3761,2.3461,2.3161,2.2861,2.2561,2.2261,2.1961,2.1661,2.1361,2.1061,2.0761,2.0461,2.0161,1.9861,1.9561,1.9261,1.8961,1.8661,1.8361,1.8061,1.7761,1.7461,1.7161,1.6861,1.6561,1.6261,1.5961,1.5661,1.5361,1.5061,1.4761,1.4461,1.4161,1.3861,1.3561,1.3261,1.2961,1.2661,1.2361,1.2061,1.1761,1.1461,1.1161,1.0861,1.0561,1.0261,0.9961,0.9661,0.9361,0.9061,0.8761,0.8461,0.8161,0.7861,0.7561,0.7261,0.6961,0.6661,0.6361,0.6061,0.5761,0.5461,0.5161,0.4861,0.4561,0.4261,0.3961,0.3661,0.3361,0.3061,0.2761,0.2461,0.2161,0.1861,0.1561,0.1261,0.0961,0.0661,0.0361,0.0061,-0.0239,-0.0539,-0.0839,-0.0983,-0.099103,-0.1291,-0.15909,-0.18908,-0.21905,-0.249,-0.27894,-0.30886,-0.33875,-0.36861,-0.39434,-0.39804,-0.42773,-0.45739,-0.48703,-0.51664,-0.54622,-0.57577,-0.6053,-0.6348,-0.66426,-0.69369,-0.72309,-0.75245,-0.78178,-0.78257,-0.77551,-0.80507,-0.83445,-0.86362,-0.89254,-0.9212,-0.94954,-0.97756,-1.0052,-1.0153,-1.0304,-1.0455,-1.0672,-1.0877,-1.1067,-1.1242,-1.1402,-1.1545,-1.1672,-1.1738,-1.1755,-1.1848,-1.1937,-1.202,-1.2097,-1.217,-1.2237,-1.2299,-1.2355,-1.2407,-1.2452,-1.2493,-1.2528,-1.2557,-1.2563,-1.2561,-1.259,-1.2618,-1.2644,-1.2667,-1.2688,-1.2707,-1.2724,-1.2738,-1.2751,-1.2761,-1.2769,-1.2771,-1.2771,-1.2769,-1.2761,-1.2751,-1.2738,-1.2724,-1.2707,-1.2688,-1.2667,-1.2644,-1.2618,-1.259,-1.2561,-1.2563,-1.2557,-1.2528,-1.2493,-1.2452,-1.2407,-1.2355,-1.2299,-1.2237,-1.217,-1.2097,-1.202,-1.1937,-1.1848,-1.1755,-1.1738,-1.1672,-1.1545,-1.1402,-1.1242,-1.1067,-1.0877,-1.0672,-1.0455,-1.0304,-1.0153,-1.0052,-0.97756,-0.94954,-0.9212,-0.89254,-0.86362,-0.83445,-0.80507,-0.77551,-0.78257,-0.78178,-0.75245,-0.72309,-0.69369,-0.66426,-0.6348,-0.6053,-0.57577,-0.54622,-0.51664,-0.48703,-0.45739,-0.42773,-0.39804,-0.39434,-0.36861,-0.33875,-0.30886,-0.27894,-0.249,-0.21905,-0.18908,-0.15909,-0.1291,-0.099103,-0.0983,-0.0839,-0.0539,-0.0239,0.0061,0.0361,0.0661,0.0961,0.1261,0.1561,0.1861,0.2161,0.2461,0.2761,0.3061,0.3361,0.3661,0.3961,0.4261,0.4561,0.4861,0.5161,0.5461,0.5761,0.6061,0.6361,0.6661,0.6961,0.7261,0.7561,0.7861,0.8161,0.8461,0.8761,0.9061,0.9361,0.9661,0.9961,1.0261,1.0561,1.0861,1.1161,1.1461,1.1761,1.2061,1.2361,1.2661,1.2961,1.3261,1.3561,1.3861,1.4161,1.4461,1.4761,1.5061,1.5361,1.5661,1.5961,1.6261,1.6561,1.6861,1.7161,1.7461,1.7761,1.8061,1.8361,1.8661,1.8961,1.9261,1.9561,1.9861,2.0161,2.0461,2.0761,2.1061,2.1361,2.1661,2.1961,2.2261,2.2561,2.2861,2.3161,2.3461,2.3761,2.4061,2.4361,2.4661,2.4961,2.5261,2.5561,2.5861,2.6161,2.6461,2.6761,2.7061,2.7361,2.7661,2.7961,2.8261,2.8561,2.8861,2.9161,2.9461,2.9761,3.0061,3.0361,3.0661,3.0961,3.1261,3.1561,3.1861,3.2161,3.2461,3.2761,3.3061,3.3361,3.3409,3.3548,3.3848,3.4147,3.4447,3.4746,3.5045,3.5344,3.5643,3.5942,3.6241,3.6315,3.6527,3.6819,3.7105,3.7385,3.7659,3.7924,3.818,3.8426,3.8661,3.8884,3.9095,3.9292,3.9474,3.9395,3.9553,3.9744,3.9929,4.0107,4.0279,4.0443,4.0601,4.0751,4.0894,4.1029,4.1157,4.1277,4.139,4.1494,4.1591,4.1631,4.164,4.1692,4.1742,4.179,4.1836,4.188,4.1922,4.1962,4.2,4.2037,4.2056,4.2056,4.2056,4.2056,4.2056,4.2056,4.2056,4.2056,4.2356,4.2356,4.2356,4.2356,4.2356,4.2356,4.2356,4.2356,4.2335,4.2298,4.226,4.222,4.2178,4.2134,4.2088,4.204,4.199,4.1938,4.1926,4.1876,4.178,4.1675,4.1564,4.1444,4.1317,4.1183,4.1041,4.0893,4.0737,4.0574,4.0405,4.0229,4.0046,3.9857,3.9661,3.9619,3.9718,3.9536,3.934,3.9131,3.8911,3.8679,3.8436,3.8184,3.7922,3.7653,3.7376,3.7093,3.6805,3.6513,3.6364,3.6271,3.5973,3.5674,3.5375,3.5076,3.4777,3.4477,3.4178,3.3878,3.3579,3.3421,3.3361,3.3061,3.2761,3.2461,3.2161,3.1861,3.1561,3.1261,3.0961,3.0661,3.0361,3.0061,2.9761,2.9461,2.9161,2.8861,2.8561,2.8261,2.7961,2.7661,2.7361,2.7061,2.6761,2.6461,2.6161,2.5861,2.5561,2.5261,2.4961,2.4661,2.4361,2.4061,2.3761,2.3461,2.3161,2.2861,2.2561,2.2261,2.1961,2.1661,2.1361,2.1061,2.0761,2.0461,2.0161,1.9861,1.9561,1.9261,1.8961,1.8661,1.8361,1.8061,1.7761,1.7461,1.7161,1.6861,1.6561,1.6261,1.5961,1.5661,1.5361,1.5061,1.4761,1.4461,1.4161,1.3861,1.3561,1.3261,1.2961,1.2661,1.2361,1.2061,1.1761,1.1461,1.1161,1.0861,1.0561,1.0261,0.9961,0.9661,0.9361,0.9061,0.8761,0.8461,0.8161,0.7861,0.7561,0.7261,0.6961,0.6661,0.6361,0.6061,0.5761,0.5461,0.5161,0.4861,0.4561,0.4261,0.3961,0.3661,0.3361,0.3061,0.2761,0.2461,0.2161,0.1861,0.1561,0.1261,0.0961,0.0661,0.0361,0.0061,-0.0239,-0.0539,-0.0839,-0.0983,-0.099304,-0.1293,-0.15929,-0.18928,-0.21925,-0.24921,-0.27914,-0.30906,-0.33895,-0.36882,-0.39765,-0.40227,-0.43196,-0.46162,-0.49126,-0.52087,-0.55046,-0.58001,-0.60954,-0.63903,-0.6685,-0.69793,-0.72733,-0.7567,-0.78603,-0.78897,-0.78014,-0.8097,-0.83909,-0.86828,-0.89723,-0.92592,-0.95433,-0.98241,-1.0102,-1.0277,-1.0466,-1.0654,-1.0872,-1.1078,-1.127,-1.1448,-1.1612,-1.1761,-1.1894,-1.2011,-1.2018,-1.2039,-1.2133,-1.2221,-1.2304,-1.2382,-1.2455,-1.2523,-1.2585,-1.2643,-1.2695,-1.2741,-1.2783,-1.2819,-1.285,-1.2861,-1.2859,-1.2889,-1.2916,-1.2942,-1.2965,-1.2987,-1.3006,-1.3023,-1.3037,-1.305,-1.306,-1.3069,-1.3071,-1.3071,-1.3069,-1.306,-1.305,-1.3037,-1.3023,-1.3006,-1.2987,-1.2965,-1.2942,-1.2916,-1.2889,-1.2859,-1.2861,-1.285,-1.2819,-1.2783,-1.2741,-1.2695,-1.2643,-1.2585,-1.2523,-1.2455,-1.2382,-1.2304,-1.2221,-1.2133,-1.2039,-1.2018,-1.2011,-1.1894,-1.1761,-1.1612,-1.1448,-1.127,-1.1078,-1.0872,-1.0654,-1.0466,-1.0277,-1.0102,-0.98241,-0.95433,-0.92592,-0.89723,-0.86828,-0.83909,-0.8097,-0.78014,-0.78897,-0.78603,-0.7567,-0.72733,-0.69793,-0.6685,-0.63903,-0.60954,-0.58001,-0.55046,-0.52087,-0.49126,-0.46162,-0.43196,-0.40227,-0.39765,-0.36882,-0.33895,-0.30906,-0.27914,-0.24921,-0.21925,-0.18928,-0.15929,-0.1293,-0.099304,-0.0983,-0.0839,-0.0539,-0.0239,0.0061,0.0361,0.0661,0.0961,0.1261,0.1561,0.1861,0.2161,0.2461,0.2761,0.3061,0.3361,0.3661,0.3961,0.4261,0.4561,0.4861,0.5161,0.5461,0.5761,0.6061,0.6361,0.6661,0.6961,0.7261,0.7561,0.7861,0.8161,0.8461,0.8761,0.9061,0.9361,0.9661,0.9961,1.0261,1.0561,1.0861,1.1161,1.1461,1.1761,1.2061,1.2361,1.2661,1.2961,1.3261,1.3561,1.3861,1.4161,1.4461,1.4761,1.5061,1.5361,1.5661,1.5961,1.6261,1.6561,1.6861,1.7161,1.7461,1.7761,1.8061,1.8361,1.8661,1.8961,1.9261,1.9561,1.9861,2.0161,2.0461,2.0761,2.1061,2.1361,2.1661,2.1961,2.2261,2.2561,2.2861,2.3161,2.3461,2.3761,2.4061,2.4361,2.4661,2.4961,2.5261,2.5561,2.5861,2.6161,2.6461,2.6761,2.7061,2.7361,2.7661,2.7961,2.8261,2.8561,2.8861,2.9161,2.9461,2.9761,3.0061,3.0361,3.0661,3.0961,3.1261,3.1561,3.1861,3.2161,3.2461,3.2761,3.3061,3.3361,3.3421,3.3579,3.3878,3.4178,3.4477,3.4777,3.5076,3.5375,3.5674,3.5973,3.6271,3.6364,3.6513,3.6805,3.7093,3.7376,3.7653,3.7922,3.8184,3.8436,3.8679,3.8911,3.9131,3.934,3.9536,3.9718,3.9619,3.9661,3.9857,4.0046,4.0229,4.0405,4.0574,4.0737,4.0893,4.1041,4.1183,4.1317,4.1444,4.1564,4.1675,4.178,4.1876,4.1926,4.1938,4.199,4.204,4.2088,4.2134,4.2178,4.222,4.226,4.2298,4.2335,4.2356,4.2356,4.2356,4.2356,4.2356,4.2356,4.2356,4.2356,4.2656,4.2656,4.2656,4.2656,4.2656,4.2656,4.2656,4.2656,4.2633,4.2596,4.2558,4.2518,4.2476,4.2432,4.2386,4.2338,4.2288,4.2236,4.2221,4.2162,4.2065,4.1961,4.185,4.1731,4.1605,4.1472,4.1331,4.1184,4.103,4.0869,4.0701,4.0527,4.0347,4.016,3.9967,3.9843,3.9961,3.9779,3.9585,3.9378,3.916,3.8931,3.8691,3.8442,3.8184,3.7918,3.7645,3.7366,3.7081,3.6791,3.6498,3.6413,3.6302,3.6003,3.5705,3.5406,3.5107,3.4807,3.4508,3.4209,3.3909,3.3609,3.3434,3.3361,3.3061,3.2761,3.2461,3.2161,3.1861,3.1561,3.1261,3.0961,3.0661,3.0361,3.0061,2.9761,2.9461,2.9161,2.8861,2.8561,2.8261,2.7961,2.7661,2.7361,2.7061,2.6761,2.6461,2.6161,2.5861,2.5561,2.5261,2.4961,2.4661,2.4361,2.4061,2.3761,2.3461,2.3161,2.2861,2.2561,2.2261,2.1961,2.1661,2.1361,2.1061,2.0761,2.0461,2.0161,1.9861,1.9561,1.9261,1.8961,1.8661,1.8361,1.8061,1.7761,1.7461,1.7161,1.6861,1.6561,1.6261,1.5961,1.5661,1.5361,1.5061,1.4761,1.4461,1.4161,1.3861,1.3561,1.3261,1.2961,1.2661,1.2361,1.2061,1.1761,1.1461,1.1161,1.0861,1.0561,1.0261,0.9961,0.9661,0.9361,0.9061,0.8761,0.8461,0.8161,0.7861,0.7561,0.7261,0.6961,0.6661,0.6361,0.6061,0.5761,0.5461,0.5161,0.4861,0.4561,0.4261,0.3961,0.3661,0.3361,0.3061,0.2761,0.2461,0.2161,0.1861,0.1561,0.1261,0.0961,0.0661,0.0361,0.0061,-0.0239,-0.0539,-0.0839,-0.0983,-0.099504,-0.1295,-0.15949,-0.18948,-0.21945,-0.24941,-0.27935,-0.30927,-0.33916,-0.36903,-0.39886,-0.40096,-0.40651,-0.4362,-0.46586,-0.4955,-0.52511,-0.55469,-0.58425,-0.61378,-0.64327,-0.67274,-0.70218,-0.73158,-0.76095,-0.79028,-0.79536,-0.78477,-0.81433,-0.84373,-0.87293,-0.90191,-0.93064,-0.9591,-0.98725,-1.0151,-1.0401,-1.0627,-1.0854,-1.1072,-1.1279,-1.1473,-1.1654,-1.1822,-1.1975,-1.2114,-1.2237,-1.2298,-1.2323,-1.2417,-1.2505,-1.2589,-1.2667,-1.2741,-1.2809,-1.2872,-1.293,-1.2983,-1.303,-1.3073,-1.311,-1.3142,-1.316,-1.3157,-1.3187,-1.3215,-1.324,-1.3264,-1.3285,-1.3304,-1.3321,-1.3336,-1.3349,-1.3359,-1.3368,-1.3371,-1.3371,-1.3368,-1.3359,-1.3349,-1.3336,-1.3321,-1.3304,-1.3285,-1.3264,-1.324,-1.3215,-1.3187,-1.3157,-1.316,-1.3142,-1.311,-1.3073,-1.303,-1.2983,-1.293,-1.2872,-1.2809,-1.2741,-1.2667,-1.2589,-1.2505,-1.2417,-1.2323,-1.2298,-1.2237,-1.2114,-1.1975,-1.1822,-1.1654,-1.1473,-1.1279,-1.1072,-1.0854,-1.0627,-1.0401,-1.0151,-0.98725,-0.9591,-0.93064,-0.90191,-0.87293,-0.84373,-0.81433,-0.78477,-0.79536,-0.79028,-0.76095,-0.73158,-0.70218,-0.67274,-0.64327,-0.61378,-0.58425,-0.55469,-0.52511,-0.4955,-0.46586,-0.4362,-0.40651,-0.40096,-0.39886,-0.36903,-0.33916,-0.30927,-0.27935,-0.24941,-0.21945,-0.18948,-0.15949,-0.1295,-0.099504,-0.0983,-0.0839,-0.0539,-0.0239,0.0061,0.0361,0.0661,0.0961,0.1261,0.1561,0.1861,0.2161,0.2461,0.2761,0.3061,0.3361,0.3661,0.3961,0.4261,0.4561,0.4861,0.5161,0.5461,0.5761,0.6061,0.6361,0.6661,0.6961,0.7261,0.7561,0.7861,0.8161,0.8461,0.8761,0.9061,0.9361,0.9661,0.9961,1.0261,1.0561,1.0861,1.1161,1.1461,1.1761,1.2061,1.2361,1.2661,1.2961,1.3261,1.3561,1.3861,1.4161,1.4461,1.4761,1.5061,1.5361,1.5661,1.5961,1.6261,1.6561,1.6861,1.7161,1.7461,1.7761,1.8061,1.8361,1.8661,1.8961,1.9261,1.9561,1.9861,2.0161,2.0461,2.0761,2.1061,2.1361,2.1661,2.1961,2.2261,2.2561,2.2861,2.3161,2.3461,2.3761,2.4061,2.4361,2.4661,2.4961,2.5261,2.5561,2.5861,2.6161,2.6461,2.6761,2.7061,2.7361,2.7661,2.7961,2.8261,2.8561,2.8861,2.9161,2.9461,2.9761,3.0061,3.0361,3.0661,3.0961,3.1261,3.1561,3.1861,3.2161,3.2461,3.2761,3.3061,3.3361,3.3434,3.3609,3.3909,3.4209,3.4508,3.4807,3.5107,3.5406,3.5705,3.6003,3.6302,3.6413,3.6498,3.6791,3.7081,3.7366,3.7645,3.7918,3.8184,3.8442,3.8691,3.8931,3.916,3.9378,3.9585,3.9779,3.9961,3.9843,3.9967,4.016,4.0347,4.0527,4.0701,4.0869,4.103,4.1184,4.1331,4.1472,4.1605,4.1731,4.185,4.1961,4.2065,4.2162,4.2221,4.2236,4.2288,4.2338,4.2386,4.2432,4.2476,4.2518,4.2558,4.2596,4.2633,4.2656,4.2656,4.2656,4.2656,4.2656,4.2656,4.2656,4.2656,4.2856,4.2856,4.2856,4.2856,4.2856,4.2856,4.2856,4.2856,4.2831,4.2795,4.2757,4.2717,4.2675,4.2631,4.2585,4.2537,4.2487,4.2435,4.2418,4.2352,4.2255,4.2152,4.204,4.1922,4.1797,4.1664,4.1525,4.1378,4.1225,4.1065,4.0899,4.0726,4.0547,4.0362,4.017,3.9992,4.0124,3.9942,3.9748,3.9542,3.9326,3.9098,3.886,3.8613,3.8358,3.8094,3.7824,3.7546,3.7264,3.6976,3.6684,3.6446,3.6322,3.6024,3.5725,3.5426,3.5127,3.4828,3.4529,3.4229,3.393,3.363,3.3442,3.3361,3.3061,3.2761,3.2461,3.2161,3.1861,3.1561,3.1261,3.0961,3.0661,3.0361,3.0061,2.9761,2.9461,2.9161,2.8861,2.8561,2.8261,2.7961,2.7661,2.7361,2.7061,2.6761,2.6461,2.6161,2.5861,2.5561,2.5261,2.4961,2.4661,2.4361,2.4061,2.3761,2.3461,2.3161,2.2861,2.2561,2.2261,2.1961,2.1661,2.1361,2.1061,2.0761,2.0461,2.0161,1.9861,1.9561,1.9261,1.8961,1.8661,1.8361,1.8061,1.7761,1.7461,1.7161,1.6861,1.6561,1.6261,1.5961,1.5661,1.5361,1.5061,1.4761,1.4461,1.4161,1.3861,1.3561,1.3261,1.2961,1.2661,1.2361,1.2061,1.1761,1.1461,1.1161,1.0861,1.0561,1.0261,0.9961,0.9661,0.9361,0.9061,0.8761,0.8461,0.8161,0.7861,0.7561,0.7261,0.6961,0.6661,0.6361,0.6061,0.5761,0.5461,0.5161,0.4861,0.4561,0.4261,0.3961,0.3661,0.3361,0.3061,0.2761,0.2461,0.2161,0.1861,0.1561,0.1261,0.0961,0.0661,0.0361,0.0061,-0.0239,-0.0539,-0.0839,-0.0983,-0.099638,-0.12964,-0.15963,-0.18961,-0.21959,-0.24954,-0.27948,-0.3094,-0.3393,-0.36917,-0.399,-0.40317,-0.40933,-0.43902,-0.46868,-0.49832,-0.52793,-0.55752,-0.58707,-0.6166,-0.6461,-0.67557,-0.70501,-0.73441,-0.76378,-0.79312,-0.79962,-0.78785,-0.81742,-0.84682,-0.87603,-0.90503,-0.93378,-0.96227,-0.99046,-1.0183,-1.0459,-1.0484,-1.0735,-1.0987,-1.1205,-1.1413,-1.1608,-1.1791,-1.196,-1.2117,-1.2259,-1.2387,-1.2485,-1.2513,-1.2606,-1.2695,-1.2779,-1.2857,-1.2931,-1.2999,-1.3063,-1.3121,-1.3175,-1.3223,-1.3266,-1.3304,-1.3336,-1.336,-1.3356,-1.3386,-1.3414,-1.3439,-1.3463,-1.3484,-1.3503,-1.352,-1.3535,-1.3548,-1.3559,-1.3567,-1.3571,-1.3571,-1.3567,-1.3559,-1.3548,-1.3535,-1.352,-1.3503,-1.3484,-1.3463,-1.3439,-1.3414,-1.3386,-1.3356,-1.336,-1.3336,-1.3304,-1.3266,-1.3223,-1.3175,-1.3121,-1.3063,-1.2999,-1.2931,-1.2857,-1.2779,-1.2695,-1.2606,-1.2513,-1.2485,-1.2387,-1.2259,-1.2117,-1.196,-1.1791,-1.1608,-1.1413,-1.1205,-1.0987,-1.0735,-1.0484,-1.0459,-1.0183,-0.99046,-0.96227,-0.93378,-0.90503,-0.87603,-0.84682,-0.81742,-0.78785,-0.79962,-0.79312,-0.76378,-0.73441,-0.70501,-0.67557,-0.6461,-0.6166,-0.58707,-0.55752,-0.52793,-0.49832,-0.46868,-0.43902,-0.40933,-0.40317,-0.399,-0.36917,-0.3393,-0.3094,-0.27948,-0.24954,-0.21959,-0.18961,-0.15963,-0.12964,-0.099638,-0.0983,-0.0839,-0.0539,-0.0239,0.0061,0.0361,0.0661,0.0961,0.1261,0.1561,0.1861,0.2161,0.2461,0.2761,0.3061,0.3361,0.3661,0.3961,0.4261,0.4561,0.4861,0.5161,0.5461,0.5761,0.6061,0.6361,0.6661,0.6961,0.7261,0.7561,0.7861,0.8161,0.8461,0.8761,0.9061,0.9361,0.9661,0.9961,1.0261,1.0561,1.0861,1.1161,1.1461,1.1761,1.2061,1.2361,1.2661,1.2961,1.3261,1.3561,1.3861,1.4161,1.4461,1.4761,1.5061,1.5361,1.5661,1.5961,1.6261,1.6561,1.6861,1.7161,1.7461,1.7761,1.8061,1.8361,1.8661,1.8961,1.9261,1.9561,1.9861,2.0161,2.0461,2.0761,2.1061,2.1361,2.1661,2.1961,2.2261,2.2561,2.2861,2.3161,2.3461,2.3761,2.4061,2.4361,2.4661,2.4961,2.5261,2.5561,2.5861,2.6161,2.6461,2.6761,2.7061,2.7361,2.7661,2.7961,2.8261,2.8561,2.8861,2.9161,2.9461,2.9761,3.0061,3.0361,3.0661,3.0961,3.1261,3.1561,3.1861,3.2161,3.2461,3.2761,3.3061,3.3361,3.3442,3.363,3.393,3.4229,3.4529,3.4828,3.5127,3.5426,3.5725,3.6024,3.6322,3.6446,3.6684,3.6976,3.7264,3.7546,3.7824,3.8094,3.8358,3.8613,3.886,3.9098,3.9326,3.9542,3.9748,3.9942,4.0124,3.9992,4.017,4.0362,4.0547,4.0726,4.0899,4.1065,4.1225,4.1378,4.1525,4.1664,4.1797,4.1922,4.204,4.2152,4.2255,4.2352,4.2418,4.2435,4.2487,4.2537,4.2585,4.2631,4.2675,4.2717,4.2757,4.2795,4.2831,4.2856,4.2856,4.2856,4.2856,4.2856,4.2856,4.2856,4.2856};
const double Car_y[3962] = { 0,0.03,0.06,0.09,0.12,0.15,0.18,0.1983,0.1983,0.22808,0.25784,0.28756,0.31726,0.34693,0.37657,0.40618,0.43575,0.4629,0.4629,0.49128,0.51934,0.54705,0.57438,0.60131,0.62781,0.65385,0.67942,0.70447,0.729,0.75296,0.77635,0.79913,0.8023,0.8023,0.82591,0.84794,0.86823,0.88666,0.9031,0.91744,0.92958,0.93945,0.94698,0.9503,0.9503,0.95326,0.95603,0.95859,0.96095,0.96311,0.96507,0.96683,0.96838,0.96974,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.9704,0.97003,0.96934,0.96831,0.96696,0.96527,0.96326,0.96092,0.95825,0.95525,0.9538,0.9538,0.94948,0.94499,0.94033,0.9355,0.9305,0.92533,0.91999,0.91448,0.9088,0.90295,0.89694,0.89075,0.8861,0.8861,0.88092,0.87465,0.86728,0.85884,0.84933,0.83877,0.82717,0.8237,0.8237,0.80284,0.78025,0.75608,0.73052,0.70373,0.6848,0.6848,0.65629,0.6276,0.59874,0.56973,0.54057,0.51128,0.48187,0.45235,0.42273,0.39302,0.36324,0.33339,0.3263,0.3263,0.29645,0.26657,0.23668,0.20677,0.17684,0.1469,0.11695,0.086979,0.057003,0.027019,8.3267e-16,-8.3267e-16,-0.027019,-0.057003,-0.086979,-0.11695,-0.1469,-0.17684,-0.20677,-0.23668,-0.26657,-0.29645,-0.3263,-0.3263,-0.33339,-0.36324,-0.39302,-0.42273,-0.45235,-0.48187,-0.51128,-0.54057,-0.56973,-0.59874,-0.6276,-0.65629,-0.6848,-0.6848,-0.70373,-0.73052,-0.75608,-0.78025,-0.80284,-0.8237,-0.8237,-0.82717,-0.83877,-0.84933,-0.85884,-0.86728,-0.87465,-0.88092,-0.8861,-0.8861,-0.89075,-0.89694,-0.90295,-0.9088,-0.91448,-0.91999,-0.92533,-0.9305,-0.9355,-0.94033,-0.94499,-0.94948,-0.9538,-0.9538,-0.95525,-0.95825,-0.96092,-0.96326,-0.96527,-0.96696,-0.96831,-0.96934,-0.97003,-0.9704,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.97,-0.96974,-0.96838,-0.96683,-0.96507,-0.96311,-0.96095,-0.95859,-0.95603,-0.95326,-0.9503,-0.9503,-0.94698,-0.93945,-0.92958,-0.91744,-0.9031,-0.88666,-0.86823,-0.84794,-0.82591,-0.8023,-0.8023,-0.79913,-0.77635,-0.75296,-0.729,-0.70447,-0.67942,-0.65385,-0.62781,-0.60131,-0.57438,-0.54705,-0.51934,-0.49128,-0.4629,-0.4629,-0.43575,-0.40618,-0.37657,-0.34693,-0.31726,-0.28756,-0.25784,-0.22808,-0.1983,-0.1983,-0.18,-0.15,-0.12,-0.09,-0.06,-0.03,-0,0,0.03,0.06,0.09,0.12,0.15,0.18,0.1983,0.20182,0.2316,0.26136,0.29109,0.32079,0.35046,0.3801,0.4097,0.43928,0.46823,0.47218,0.50056,0.52863,0.55637,0.58375,0.61073,0.63731,0.66345,0.68912,0.71431,0.73899,0.76314,0.78673,0.80975,0.82227,0.81982,0.84349,0.8657,0.88634,0.90527,0.9224,0.93762,0.95085,0.96201,0.97105,0.9779,0.97989,0.98014,0.98311,0.98587,0.98844,0.9908,0.99297,0.99494,0.9967,0.99827,0.99963,0.99998,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1.0004,1,0.99935,0.99833,0.99699,0.99532,0.99332,0.99101,0.98836,0.98539,0.98362,0.9835,0.97918,0.97469,0.97003,0.96521,0.96021,0.95504,0.94971,0.94421,0.93854,0.9327,0.92669,0.92052,0.91541,0.91574,0.91058,0.90437,0.8971,0.88879,0.87946,0.8691,0.85774,0.85102,0.84611,0.82532,0.80292,0.77904,0.75384,0.72745,0.70004,0.69556,0.6944,0.66589,0.63721,0.60836,0.57936,0.55021,0.52094,0.49154,0.46204,0.43243,0.40274,0.37297,0.34313,0.32888,0.32939,0.29954,0.26966,0.23977,0.20986,0.17993,0.14999,0.12004,0.09007,0.060094,0.030111,0.00065315,-0.00065315,-0.030111,-0.060094,-0.09007,-0.12004,-0.14999,-0.17993,-0.20986,-0.23977,-0.26966,-0.29954,-0.32939,-0.32888,-0.34313,-0.37297,-0.40274,-0.43243,-0.46204,-0.49154,-0.52094,-0.55021,-0.57936,-0.60836,-0.63721,-0.66589,-0.6944,-0.69556,-0.70004,-0.72745,-0.75384,-0.77904,-0.80292,-0.82532,-0.84611,-0.85102,-0.85774,-0.8691,-0.87946,-0.88879,-0.8971,-0.90437,-0.91058,-0.91574,-0.91541,-0.92052,-0.92669,-0.9327,-0.93854,-0.94421,-0.94971,-0.95504,-0.96021,-0.96521,-0.97003,-0.97469,-0.97918,-0.9835,-0.98362,-0.98539,-0.98836,-0.99101,-0.99332,-0.99532,-0.99699,-0.99833,-0.99935,-1,-1.0004,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-0.99998,-0.99963,-0.99827,-0.9967,-0.99494,-0.99297,-0.9908,-0.98844,-0.98587,-0.98311,-0.98014,-0.97989,-0.9779,-0.97105,-0.96201,-0.95085,-0.93762,-0.9224,-0.90527,-0.88634,-0.8657,-0.84349,-0.81982,-0.82227,-0.80975,-0.78673,-0.76314,-0.73899,-0.71431,-0.68912,-0.66345,-0.63731,-0.61073,-0.58375,-0.55637,-0.52863,-0.50056,-0.47218,-0.46823,-0.43928,-0.4097,-0.3801,-0.35046,-0.32079,-0.29109,-0.26136,-0.2316,-0.20182,-0.1983,-0.18,-0.15,-0.12,-0.09,-0.06,-0.03,-0,0,0.03,0.06,0.09,0.12,0.15,0.18,0.1983,0.20534,0.23512,0.26488,0.29461,0.32431,0.35398,0.38362,0.41323,0.44281,0.47235,0.47357,0.48146,0.50984,0.53793,0.56569,0.59311,0.62015,0.64679,0.67302,0.6988,0.72411,0.74894,0.77325,0.79704,0.82027,0.84225,0.83734,0.86106,0.88343,0.90435,0.92371,0.94142,0.95739,0.97154,0.9838,0.99411,1.0024,1.0087,1.0095,1.01,1.013,1.0157,1.0183,1.0207,1.0228,1.0248,1.0266,1.0282,1.0295,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.03,1.0304,1.03,1.0294,1.0283,1.027,1.0254,1.0234,1.0211,1.0185,1.0155,1.0134,1.0132,1.0089,1.0044,0.99974,0.99491,0.98992,0.98476,0.97943,0.97394,0.96828,0.96245,0.95645,0.95029,0.94472,0.94538,0.94024,0.93408,0.9269,0.91872,0.90955,0.89938,0.88825,0.87833,0.86852,0.84779,0.82555,0.80193,0.77705,0.75102,0.724,0.70633,0.70401,0.6755,0.64682,0.61798,0.58898,0.55985,0.53059,0.50121,0.47172,0.44213,0.41245,0.3827,0.35287,0.33146,0.33248,0.30262,0.27275,0.24286,0.21295,0.18302,0.15308,0.12313,0.093161,0.063186,0.033203,0.0032128,0.0013063,-0.0013063,-0.0032128,-0.033203,-0.063186,-0.093161,-0.12313,-0.15308,-0.18302,-0.21295,-0.24286,-0.27275,-0.30262,-0.33248,-0.33146,-0.35287,-0.3827,-0.41245,-0.44213,-0.47172,-0.50121,-0.53059,-0.55985,-0.58898,-0.61798,-0.64682,-0.6755,-0.70401,-0.70633,-0.724,-0.75102,-0.77705,-0.80193,-0.82555,-0.84779,-0.86852,-0.87833,-0.88825,-0.89938,-0.90955,-0.91872,-0.9269,-0.93408,-0.94024,-0.94538,-0.94472,-0.95029,-0.95645,-0.96245,-0.96828,-0.97394,-0.97943,-0.98476,-0.98992,-0.99491,-0.99974,-1.0044,-1.0089,-1.0132,-1.0134,-1.0155,-1.0185,-1.0211,-1.0234,-1.0254,-1.027,-1.0283,-1.0294,-1.03,-1.0304,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.03,-1.0295,-1.0282,-1.0266,-1.0248,-1.0228,-1.0207,-1.0183,-1.0157,-1.013,-1.01,-1.0095,-1.0087,-1.0024,-0.99411,-0.9838,-0.97154,-0.95739,-0.94142,-0.92371,-0.90435,-0.88343,-0.86106,-0.83734,-0.84225,-0.82027,-0.79704,-0.77325,-0.74894,-0.72411,-0.6988,-0.67302,-0.64679,-0.62015,-0.59311,-0.56569,-0.53793,-0.50984,-0.48146,-0.47357,-0.47235,-0.44281,-0.41323,-0.38362,-0.35398,-0.32431,-0.29461,-0.26488,-0.23512,-0.20534,-0.1983,-0.18,-0.15,-0.12,-0.09,-0.06,-0.03,-0,0,0.03,0.06,0.09,0.12,0.15,0.18,0.1983,0.20887,0.23865,0.2684,0.29813,0.32783,0.35751,0.38715,0.41676,0.44634,0.47588,0.4789,0.49073,0.51912,0.54723,0.57501,0.60246,0.62955,0.65626,0.68257,0.70844,0.73387,0.75884,0.78331,0.80727,0.8307,0.85359,0.86222,0.85485,0.87862,0.90113,0.9223,0.94202,0.96023,0.97684,0.99177,1.005,1.0164,1.0259,1.0336,1.0391,1.0398,1.0428,1.0456,1.0481,1.0505,1.0527,1.0547,1.0565,1.058,1.0594,1.0599,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.06,1.0604,1.06,1.0594,1.0584,1.057,1.0554,1.0534,1.0512,1.0486,1.0457,1.0433,1.0429,1.0386,1.0341,1.0294,1.0246,1.0196,1.0145,1.0092,1.0037,0.99801,0.99219,0.98621,0.98006,0.97403,0.97502,0.9699,0.96379,0.9567,0.94863,0.93961,0.92963,0.9187,0.90685,0.90565,0.89093,0.87025,0.84816,0.82476,0.80016,0.77447,0.74779,0.72026,0.71709,0.71361,0.68511,0.65643,0.62759,0.59861,0.56949,0.54024,0.51087,0.4814,0.45182,0.42216,0.39242,0.36261,0.33403,0.33556,0.30571,0.27584,0.24595,0.21604,0.18611,0.15617,0.12622,0.096252,0.066277,0.036295,0.0063052,0.0019594,-0.0019594,-0.0063052,-0.036295,-0.066277,-0.096252,-0.12622,-0.15617,-0.18611,-0.21604,-0.24595,-0.27584,-0.30571,-0.33556,-0.33403,-0.36261,-0.39242,-0.42216,-0.45182,-0.4814,-0.51087,-0.54024,-0.56949,-0.59861,-0.62759,-0.65643,-0.68511,-0.71361,-0.71709,-0.72026,-0.74779,-0.77447,-0.80016,-0.82476,-0.84816,-0.87025,-0.89093,-0.90565,-0.90685,-0.9187,-0.92963,-0.93961,-0.94863,-0.9567,-0.96379,-0.9699,-0.97502,-0.97403,-0.98006,-0.98621,-0.99219,-0.99801,-1.0037,-1.0092,-1.0145,-1.0196,-1.0246,-1.0294,-1.0341,-1.0386,-1.0429,-1.0433,-1.0457,-1.0486,-1.0512,-1.0534,-1.0554,-1.057,-1.0584,-1.0594,-1.06,-1.0604,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.06,-1.0599,-1.0594,-1.058,-1.0565,-1.0547,-1.0527,-1.0505,-1.0481,-1.0456,-1.0428,-1.0398,-1.0391,-1.0336,-1.0259,-1.0164,-1.005,-0.99177,-0.97684,-0.96023,-0.94202,-0.9223,-0.90113,-0.87862,-0.85485,-0.86222,-0.85359,-0.8307,-0.80727,-0.78331,-0.75884,-0.73387,-0.70844,-0.68257,-0.65626,-0.62955,-0.60246,-0.57501,-0.54723,-0.51912,-0.49073,-0.4789,-0.47588,-0.44634,-0.41676,-0.38715,-0.35751,-0.32783,-0.29813,-0.2684,-0.23865,-0.20887,-0.1983,-0.18,-0.15,-0.12,-0.09,-0.06,-0.03,-0,0,0.03,0.06,0.09,0.12,0.15,0.18,0.1983,0.21239,0.24217,0.27192,0.30165,0.33136,0.36103,0.39067,0.42029,0.44986,0.47941,0.48423,0.50001,0.52841,0.55652,0.58433,0.61181,0.63895,0.66572,0.6921,0.71807,0.74361,0.7687,0.79331,0.81744,0.84106,0.86416,0.8822,0.87237,0.89617,0.9188,0.94018,0.96023,0.97887,0.99602,1.0116,1.0256,1.038,1.0486,1.0575,1.0647,1.0687,1.0697,1.0726,1.0754,1.078,1.0804,1.0825,1.0845,1.0863,1.0879,1.0893,1.0899,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.09,1.0904,1.09,1.0894,1.0884,1.0871,1.0854,1.0835,1.0813,1.0787,1.0758,1.0731,1.0726,1.0683,1.0638,1.0591,1.0543,1.0493,1.0442,1.0389,1.0334,1.0278,1.0219,1.016,1.0098,1.0035,1.0033,1.0047,0.99956,0.99349,0.98648,0.97853,0.96964,0.95983,0.9491,0.93748,0.93297,0.92315,0.91334,0.8927,0.87074,0.84754,0.8232,0.7978,0.77145,0.74425,0.72785,0.72322,0.69471,0.66604,0.63721,0.60824,0.57913,0.54989,0.52054,0.49107,0.46151,0.43187,0.40214,0.37234,0.34249,0.33661,0.33865,0.3088,0.27893,0.24903,0.21913,0.1892,0.15926,0.12931,0.099343,0.069369,0.039387,0.0093976,0.0026126,-0.0026126,-0.0093976,-0.039387,-0.069369,-0.099343,-0.12931,-0.15926,-0.1892,-0.21913,-0.24903,-0.27893,-0.3088,-0.33865,-0.33661,-0.34249,-0.37234,-0.40214,-0.43187,-0.46151,-0.49107,-0.52054,-0.54989,-0.57913,-0.60824,-0.63721,-0.66604,-0.69471,-0.72322,-0.72785,-0.74425,-0.77145,-0.7978,-0.8232,-0.84754,-0.87074,-0.8927,-0.91334,-0.92315,-0.93297,-0.93748,-0.9491,-0.95983,-0.96964,-0.97853,-0.98648,-0.99349,-0.99956,-1.0047,-1.0033,-1.0035,-1.0098,-1.016,-1.0219,-1.0278,-1.0334,-1.0389,-1.0442,-1.0493,-1.0543,-1.0591,-1.0638,-1.0683,-1.0726,-1.0731,-1.0758,-1.0787,-1.0813,-1.0835,-1.0854,-1.0871,-1.0884,-1.0894,-1.09,-1.0904,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.09,-1.0899,-1.0893,-1.0879,-1.0863,-1.0845,-1.0825,-1.0804,-1.078,-1.0754,-1.0726,-1.0697,-1.0687,-1.0647,-1.0575,-1.0486,-1.038,-1.0256,-1.0116,-0.99602,-0.97887,-0.96023,-0.94018,-0.9188,-0.89617,-0.87237,-0.8822,-0.86416,-0.84106,-0.81744,-0.79331,-0.7687,-0.74361,-0.71807,-0.6921,-0.66572,-0.63895,-0.61181,-0.58433,-0.55652,-0.52841,-0.50001,-0.48423,-0.47941,-0.44986,-0.42029,-0.39067,-0.36103,-0.33136,-0.30165,-0.27192,-0.24217,-0.21239,-0.1983,-0.18,-0.15,-0.12,-0.09,-0.06,-0.03,-0,0,0.03,0.06,0.09,0.12,0.15,0.18,0.1983,0.21591,0.24569,0.27545,0.30518,0.33488,0.36455,0.3942,0.42381,0.45339,0.48294,0.48956,0.50929,0.53769,0.56581,0.59365,0.62116,0.64834,0.67517,0.70162,0.72767,0.75331,0.77852,0.80327,0.82756,0.85135,0.87464,0.89741,0.90217,0.88989,0.91372,0.93646,0.95803,0.97835,0.99736,1.015,1.0312,1.0459,1.0591,1.0707,1.0806,1.0889,1.0956,1.0983,1.0995,1.1025,1.1053,1.1078,1.1102,1.1124,1.1144,1.1162,1.1178,1.1192,1.1199,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.12,1.1204,1.12,1.1194,1.1184,1.1171,1.1155,1.1136,1.1113,1.1088,1.1059,1.1029,1.1023,1.098,1.0935,1.0888,1.084,1.0791,1.0739,1.0686,1.0631,1.0575,1.0517,1.0457,1.0396,1.0333,1.0327,1.0343,1.0292,1.0232,1.0163,1.0084,0.99965,0.99,0.97946,0.96804,0.96028,0.94802,0.93575,0.91515,0.89331,0.87028,0.84617,0.82104,0.79499,0.7681,0.74048,0.73862,0.73282,0.70432,0.67565,0.64683,0.61786,0.58876,0.55954,0.5302,0.50075,0.4712,0.44157,0.41186,0.38208,0.35223,0.33919,0.34174,0.31189,0.28201,0.25212,0.22221,0.19229,0.16235,0.1324,0.10243,0.07246,0.042478,0.01249,0.0032657,-0.0032657,-0.01249,-0.042478,-0.07246,-0.10243,-0.1324,-0.16235,-0.19229,-0.22221,-0.25212,-0.28201,-0.31189,-0.34174,-0.33919,-0.35223,-0.38208,-0.41186,-0.44157,-0.4712,-0.50075,-0.5302,-0.55954,-0.58876,-0.61786,-0.64683,-0.67565,-0.70432,-0.73282,-0.73862,-0.74048,-0.7681,-0.79499,-0.82104,-0.84617,-0.87028,-0.89331,-0.91515,-0.93575,-0.94802,-0.96028,-0.96804,-0.97946,-0.99,-0.99965,-1.0084,-1.0163,-1.0232,-1.0292,-1.0343,-1.0327,-1.0333,-1.0396,-1.0457,-1.0517,-1.0575,-1.0631,-1.0686,-1.0739,-1.0791,-1.084,-1.0888,-1.0935,-1.098,-1.1023,-1.1029,-1.1059,-1.1088,-1.1113,-1.1136,-1.1155,-1.1171,-1.1184,-1.1194,-1.12,-1.1204,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.12,-1.1199,-1.1192,-1.1178,-1.1162,-1.1144,-1.1124,-1.1102,-1.1078,-1.1053,-1.1025,-1.0995,-1.0983,-1.0956,-1.0889,-1.0806,-1.0707,-1.0591,-1.0459,-1.0312,-1.015,-0.99736,-0.97835,-0.95803,-0.93646,-0.91372,-0.88989,-0.90217,-0.89741,-0.87464,-0.85135,-0.82756,-0.80327,-0.77852,-0.75331,-0.72767,-0.70162,-0.67517,-0.64834,-0.62116,-0.59365,-0.56581,-0.53769,-0.50929,-0.48956,-0.48294,-0.45339,-0.42381,-0.3942,-0.36455,-0.33488,-0.30518,-0.27545,-0.24569,-0.21591,-0.1983,-0.18,-0.15,-0.12,-0.09,-0.06,-0.03,-0,0,0.03,0.06,0.09,0.12,0.15,0.18,0.1983,0.21943,0.24921,0.27897,0.3087,0.3384,0.36808,0.39772,0.42734,0.45692,0.48647,0.4949,0.51857,0.54697,0.57511,0.60296,0.6305,0.65773,0.6846,0.71112,0.73726,0.76299,0.78831,0.81319,0.83762,0.86158,0.88505,0.90802,0.92214,0.90741,0.93127,0.9541,0.97583,0.9964,1.0157,1.0338,1.0505,1.0658,1.0797,1.0922,1.1031,1.1124,1.1202,1.1264,1.1279,1.1294,1.1323,1.1351,1.1377,1.1401,1.1423,1.1443,1.1461,1.1477,1.1491,1.1499,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.15,1.1504,1.15,1.1494,1.1484,1.1471,1.1455,1.1436,1.1414,1.1389,1.1361,1.1329,1.1327,1.132,1.1277,1.1232,1.1186,1.1137,1.1088,1.1036,1.0983,1.0929,1.0872,1.0814,1.0755,1.0694,1.0631,1.062,1.0639,1.0589,1.0529,1.046,1.0383,1.0296,1.0201,1.0098,0.99855,0.9876,0.97288,0.95816,0.9376,0.91585,0.89299,0.86908,0.8442,0.81842,0.79182,0.7645,0.74938,0.74243,0.71392,0.68526,0.65645,0.62749,0.5984,0.56919,0.53986,0.51042,0.48089,0.45127,0.42157,0.3918,0.36198,0.34177,0.34483,0.31497,0.2851,0.25521,0.2253,0.19538,0.16544,0.13549,0.10552,0.075552,0.04557,0.015582,0.0039189,-0.0039189,-0.015582,-0.04557,-0.075552,-0.10552,-0.13549,-0.16544,-0.19538,-0.2253,-0.25521,-0.2851,-0.31497,-0.34483,-0.34177,-0.36198,-0.3918,-0.42157,-0.45127,-0.48089,-0.51042,-0.53986,-0.56919,-0.5984,-0.62749,-0.65645,-0.68526,-0.71392,-0.74243,-0.74938,-0.7645,-0.79182,-0.81842,-0.8442,-0.86908,-0.89299,-0.91585,-0.9376,-0.95816,-0.97288,-0.9876,-0.99855,-1.0098,-1.0201,-1.0296,-1.0383,-1.046,-1.0529,-1.0589,-1.0639,-1.062,-1.0631,-1.0694,-1.0755,-1.0814,-1.0872,-1.0929,-1.0983,-1.1036,-1.1088,-1.1137,-1.1186,-1.1232,-1.1277,-1.132,-1.1327,-1.1329,-1.1361,-1.1389,-1.1414,-1.1436,-1.1455,-1.1471,-1.1484,-1.1494,-1.15,-1.1504,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.15,-1.1499,-1.1491,-1.1477,-1.1461,-1.1443,-1.1423,-1.1401,-1.1377,-1.1351,-1.1323,-1.1294,-1.1279,-1.1264,-1.1202,-1.1124,-1.1031,-1.0922,-1.0797,-1.0658,-1.0505,-1.0338,-1.0157,-0.9964,-0.97583,-0.9541,-0.93127,-0.90741,-0.92214,-0.90802,-0.88505,-0.86158,-0.83762,-0.81319,-0.78831,-0.76299,-0.73726,-0.71112,-0.6846,-0.65773,-0.6305,-0.60296,-0.57511,-0.54697,-0.51857,-0.4949,-0.48647,-0.45692,-0.42734,-0.39772,-0.36808,-0.3384,-0.3087,-0.27897,-0.24921,-0.21943,-0.1983,-0.18,-0.15,-0.12,-0.09,-0.06,-0.03,-0,0,0.03,0.06,0.09,0.12,0.15,0.18,0.1983,0.22178,0.25156,0.28132,0.31105,0.34075,0.37043,0.40007,0.42969,0.45927,0.48882,0.49845,0.52475,0.55316,0.5813,0.60917,0.63673,0.66398,0.69089,0.71745,0.74363,0.76943,0.79482,0.81978,0.8443,0.86836,0.89195,0.91505,0.93546,0.91909,0.94297,0.96585,0.98769,1.0084,1.0279,1.0462,1.0633,1.079,1.0933,1.1062,1.1177,1.1277,1.1362,1.1431,1.1476,1.1493,1.1522,1.155,1.1576,1.16,1.1622,1.1642,1.166,1.1676,1.169,1.1698,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.17,1.1704,1.17,1.1694,1.1684,1.1671,1.1656,1.1637,1.1615,1.159,1.1562,1.153,1.1526,1.1518,1.1475,1.143,1.1384,1.1335,1.1286,1.1234,1.1181,1.1127,1.1071,1.1013,1.0953,1.0892,1.0829,1.0815,1.0837,1.0786,1.0727,1.0659,1.0582,1.0496,1.0402,1.03,1.0189,1.0069,1.0058,0.98945,0.9731,0.95256,0.93088,0.90811,0.88433,0.85959,0.83399,0.80758,0.78044,0.75656,0.74883,0.72033,0.69167,0.66286,0.63391,0.60482,0.57562,0.5463,0.51687,0.48735,0.45774,0.42805,0.39829,0.36847,0.34349,0.34688,0.31703,0.28716,0.25727,0.22736,0.19744,0.1675,0.13755,0.10759,0.077612,0.047631,0.017644,0.0043543,-0.0043543,-0.017644,-0.047631,-0.077612,-0.10759,-0.13755,-0.1675,-0.19744,-0.22736,-0.25727,-0.28716,-0.31703,-0.34688,-0.34349,-0.36847,-0.39829,-0.42805,-0.45774,-0.48735,-0.51687,-0.5463,-0.57562,-0.60482,-0.63391,-0.66286,-0.69167,-0.72033,-0.74883,-0.75656,-0.78044,-0.80758,-0.83399,-0.85959,-0.88433,-0.90811,-0.93088,-0.95256,-0.9731,-0.98945,-1.0058,-1.0069,-1.0189,-1.03,-1.0402,-1.0496,-1.0582,-1.0659,-1.0727,-1.0786,-1.0837,-1.0815,-1.0829,-1.0892,-1.0953,-1.1013,-1.1071,-1.1127,-1.1181,-1.1234,-1.1286,-1.1335,-1.1384,-1.143,-1.1475,-1.1518,-1.1526,-1.153,-1.1562,-1.159,-1.1615,-1.1637,-1.1656,-1.1671,-1.1684,-1.1694,-1.17,-1.1704,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.17,-1.1698,-1.169,-1.1676,-1.166,-1.1642,-1.1622,-1.16,-1.1576,-1.155,-1.1522,-1.1493,-1.1476,-1.1431,-1.1362,-1.1277,-1.1177,-1.1062,-1.0933,-1.079,-1.0633,-1.0462,-1.0279,-1.0084,-0.98769,-0.96585,-0.94297,-0.91909,-0.93546,-0.91505,-0.89195,-0.86836,-0.8443,-0.81978,-0.79482,-0.76943,-0.74363,-0.71745,-0.69089,-0.66398,-0.63673,-0.60917,-0.5813,-0.55316,-0.52475,-0.49845,-0.48882,-0.45927,-0.42969,-0.40007,-0.37043,-0.34075,-0.31105,-0.28132,-0.25156,-0.22178,-0.1983,-0.18,-0.15,-0.12,-0.09,-0.06,-0.03,-0};
const int Car_idx = 3962;
// 虚拟障碍物
// 5m车位
const double map_image_x[124] = { -1.50000000000000,-1,-0.500000000000000,0,0.500000000000000,1,1.50000000000000,2,2.50000000000000,3,3.50000000000000,4,-1.50000000000000,-1.50000000000000,-1.50000000000000,-1.50000000000000,-1.50000000000000,-1.50000000000000,-1.50000000000000,-1.50000000000000,-1.50000000000000,-1.50000000000000,-1.50000000000000,-1.50000000000000,-1,-0.500000000000000,0,0.500000000000000,1,1.50000000000000,2,2.50000000000000,3,3.50000000000000,4,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,4.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000,9.30000000000000 };
const double map_image_y[124] = { -2.50000000000000,-2.50000000000000,-2.50000000000000,-2.50000000000000,-2.50000000000000,-2.50000000000000,-2.50000000000000,-2.50000000000000,-2.50000000000000,-2.50000000000000,-2.50000000000000,-2.50000000000000,-2.50000000000000,-2,-1.50000000000000,-1,-0.500000000000000,0,0.500000000000000,1,1.50000000000000,2,2.50000000000000,2.50000000000000,2.50000000000000,2.50000000000000,2.50000000000000,2.50000000000000,2.50000000000000,2.50000000000000,2.50000000000000,2.50000000000000,2.50000000000000,2.50000000000000,2.50000000000000,-2.50000000000000,-3,-3.50000000000000,-4,-4.50000000000000,-5,-5.50000000000000,-6,-6.50000000000000,-7,-7.50000000000000,-8,-8.50000000000000,-9,-9.50000000000000,-10,-10.5000000000000,-11,-11.5000000000000,-12,2.50000000000000,3,3.50000000000000,4,4.50000000000000,5,5.50000000000000,6,6.50000000000000,7,7.50000000000000,8,8.50000000000000,9,9.50000000000000,10,10.5000000000000,11,11.5000000000000,12,-12,-11.5000000000000,-11,-10.5000000000000,-10,-9.50000000000000,-9,-8.50000000000000,-8,-7.50000000000000,-7,-6.50000000000000,-6,-5.50000000000000,-5,-4.50000000000000,-4,-3.50000000000000,-3,-2.50000000000000,-2,-1.50000000000000,-1,-0.500000000000000,0,0.500000000000000,1,1.50000000000000,2,2.50000000000000,3,3.50000000000000,4,4.50000000000000,5,5.50000000000000,6,6.50000000000000,7,7.50000000000000,8,8.50000000000000,9,9.50000000000000,10,10.5000000000000,11,11.5000000000000,12 };
const int MAP_INDEX = 124;
// 0.025m后
const double map_image_vertical_x[201] = {};
const double map_image_vertical_y[201] = { -2.50000000000000,-2.47500000000000,-2.45000000000000,-2.42500000000000,-2.40000000000000,-2.37500000000000,-2.35000000000000,-2.32500000000000,-2.30000000000000,-2.27500000000000,-2.25000000000000,-2.22500000000000,-2.20000000000000,-2.17500000000000,-2.15000000000000,-2.12500000000000,-2.10000000000000,-2.07500000000000,-2.05000000000000,-2.02500000000000,-2,-1.97500000000000,-1.95000000000000,-1.92500000000000,-1.90000000000000,-1.87500000000000,-1.85000000000000,-1.82500000000000,-1.80000000000000,-1.77500000000000,-1.75000000000000,-1.72500000000000,-1.70000000000000,-1.67500000000000,-1.65000000000000,-1.62500000000000,-1.60000000000000,-1.57500000000000,-1.55000000000000,-1.52500000000000,-1.50000000000000,-1.47500000000000,-1.45000000000000,-1.42500000000000,-1.40000000000000,-1.37500000000000,-1.35000000000000,-1.32500000000000,-1.30000000000000,-1.27500000000000,-1.25000000000000,-1.22500000000000,-1.20000000000000,-1.17500000000000,-1.15000000000000,-1.12500000000000,-1.10000000000000,-1.07500000000000,-1.05000000000000,-1.02500000000000,-1,-0.975000000000000,-0.950000000000000,-0.925000000000000,-0.900000000000000,-0.875000000000000,-0.850000000000000,-0.825000000000000,-0.800000000000000,-0.775000000000000,-0.750000000000000,-0.725000000000000,-0.700000000000000,-0.675000000000000,-0.650000000000000,-0.625000000000000,-0.600000000000000,-0.575000000000000,-0.550000000000000,-0.525000000000000,-0.500000000000000,-0.475000000000000,-0.450000000000000,-0.425000000000000,-0.400000000000000,-0.375000000000000,-0.350000000000000,-0.325000000000000,-0.300000000000000,-0.275000000000000,-0.250000000000000,-0.225000000000000,-0.200000000000000,-0.175000000000000,-0.150000000000000,-0.125000000000000,-0.0999999999999996,-0.0749999999999997,-0.0499999999999998,-0.0249999999999999,0,0.0250000000000004,0.0500000000000003,0.0750000000000002,0.100000000000000,0.125000000000000,0.150000000000000,0.175000000000000,0.200000000000000,0.225000000000000,0.250000000000000,0.275000000000000,0.300000000000000,0.325000000000000,0.350000000000000,0.375000000000000,0.400000000000000,0.425000000000000,0.450000000000000,0.475000000000000,0.500000000000000,0.525000000000000,0.550000000000000,0.575000000000000,0.600000000000000,0.625000000000000,0.650000000000000,0.675000000000000,0.700000000000000,0.725000000000000,0.750000000000000,0.775000000000000,0.800000000000000,0.825000000000000,0.850000000000000,0.875000000000000,0.900000000000000,0.925000000000000,0.950000000000000,0.975000000000000,1,1.02500000000000,1.05000000000000,1.07500000000000,1.10000000000000,1.12500000000000,1.15000000000000,1.17500000000000,1.20000000000000,1.22500000000000,1.25000000000000,1.27500000000000,1.30000000000000,1.32500000000000,1.35000000000000,1.37500000000000,1.40000000000000,1.42500000000000,1.45000000000000,1.47500000000000,1.50000000000000,1.52500000000000,1.55000000000000,1.57500000000000,1.60000000000000,1.62500000000000,1.65000000000000,1.67500000000000,1.70000000000000,1.72500000000000,1.75000000000000,1.77500000000000,1.80000000000000,1.82500000000000,1.85000000000000,1.87500000000000,1.90000000000000,1.92500000000000,1.95000000000000,1.97500000000000,2,2.02500000000000,2.05000000000000,2.07500000000000,2.10000000000000,2.12500000000000,2.15000000000000,2.17500000000000,2.20000000000000,2.22500000000000,2.25000000000000,2.27500000000000,2.30000000000000,2.32500000000000,2.35000000000000,2.37500000000000,2.40000000000000,2.42500000000000,2.45000000000000,2.47500000000000,2.50000000000000 };
const int MAP_vertical_INDEX = 201;
// 超声波虚拟障碍物
// 30 车模扩20
const double upa_x[10] = { 4.20873319732158,4.45627722749663,4.45627722749663,4.20873319732158,0,0,-1.32752002492481,-1.53160957075897,-1.53160957075897,-1.32752002492481 };
const double upa_y[10] = { 0.955689500945464,0.376459240384026,-0.376459240384026,-0.955689500945464,0,0,-1.00059497968910,-0.360440934840353,0.360440934840353,1.00059497968910 };

//#define PC_version

#define MAP_FILE "../map.txt"
#define MAP_SIZE (62500)
void readMap() {

	char buf[MAP_SIZE * 2 + 1] = { 0 };
	int fp = open(MAP_FILE, O_RDONLY);

	int ret = read(fp, &buf, MAP_SIZE * 2);
	if (0 == ret) {
		LOG_DEBUG("read buf size = 0!");
	}

	// char buf1[MAP_SIZE] = {0};
	for (int i = 0; i < MAP_SIZE * 2; i += 2) {
		fusion.freeSpaceCell[i / 2].Status = buf[i] - '0';
	}

	close(fp);
	return;
}

void loadData() {

	APAStatus_before = 7;
	app.APAStatus = 2;
	app.APA_Park_Function = 1;
	control.PlanningRequest = 2;
	control.ObsUssInfo = 1;
	Gears = 0;
	//index_request = 3;

	fusion.TraceParkingID_Cam = 0;
	fusion.TraceParkingID_USS = 1;
	double fus_pos[3] = { 0,0,0 };
	fusion.position.X = fus_pos[0];
	fusion.position.Y = fus_pos[1];
	fusion.position.Heading = fus_pos[2];

	fusion.depth_block = -1.0;
	fusion.Theta = 90;
	fusion.distance_01 = -1.000000;
	double prk_pos[8] = { 900,0, 900,-540, 1190,-540, 1190,0 };

	fusion.parkingSpaceInfo.P0_X = prk_pos[0];  // 1110 
	fusion.parkingSpaceInfo.P0_Y = prk_pos[1];  // -1110
	fusion.parkingSpaceInfo.P1_X = prk_pos[2];  // 1110
	fusion.parkingSpaceInfo.P1_Y = prk_pos[3];  // -1350
	fusion.parkingSpaceInfo.P2_X = prk_pos[4];  // 1350
	fusion.parkingSpaceInfo.P2_Y = prk_pos[5];  // -1350
	fusion.parkingSpaceInfo.P3_X = prk_pos[6];  // 1350
	fusion.parkingSpaceInfo.P3_Y = prk_pos[7];  // -1110
	fusion.parkingSpaceInfo.ParkingSpaceType = 1;

	double nav_pos[3] = { 700,250,0 };
	calculation.nav_pos_X = nav_pos[0];
	calculation.nav_pos_Y = nav_pos[1]; 
	calculation.nav_heading = nav_pos[2];

	readMap();
}

int main()
{
	bydapa::common::Log::GetInstance()->SetFilename("HybridAstar", false);
	for (int map_y_idx = 0; map_y_idx < 126; map_y_idx++)
	{
		double map_y = -1.25 + map_y_idx * 0.02;
		for (int map_x_idx = 0; map_x_idx < 296; map_x_idx++)
		{
			double map_x = -1.4 + map_x_idx * 0.02;
			park0_x_imag1[map_y_idx * 296 + map_x_idx] = map_x;
			park0_y_imag1[map_y_idx * 296 + map_x_idx] = map_y;
		}
	}

	for (int map_y_idx = 0; map_y_idx < 141; map_y_idx++)
	{
		double map_y = -1.4 + map_y_idx * 0.02;
		for (int map_x_idx = 0; map_x_idx < 301; map_x_idx++)
		{
			double map_x = -1.5 + map_x_idx * 0.02;
			park0_x_imag2[map_y_idx * 301 + map_x_idx] = map_x;
			park0_y_imag2[map_y_idx * 301 + map_x_idx] = map_y;
		}
	}

	fusion.ParkInMode = 0;
	loadData();
	while (1)
	{
		aaa = 0;
		usleep(10000);
		no_imag_map = 0;
		if ((APAStatus_before == 7) && (app.APAStatus == 2))
		{
			index_request = 0;
			Gears = 0;
			parking_index = parking_index + 1;
			filename = "../plan_HybridAstar.txt"; // 保存输出日志
			
			pF = fopen(filename.c_str(), "w");
			fprintf(pF, "Path_HybridAstar_DDS_PC"); // 软件版本号
			back_path = 100;
			front_path = 100;
		}

		if ((APAStatus_before == 2) && ((app.APAStatus == 4) || (app.APAStatus == 5) || (app.APAStatus == 6)))
		{
			fflush(pF);
			fclose(pF);
		}

		parameter_initi(); // 初始化参数
		StateClear(); // 状态清空条件

		if (((fusion.Theta >= 0) && (fusion.Theta <= 360)) && ((fusion.TraceParkingID_Cam != 0u) || (fusion.TraceParkingID_USS != 0u))) // 检测是否为有效车位
		{
			// 2022.12.06:当前只剩一条不换挡路径，开始记录上一次规划的起点坐标 
			if((PathOnlyOneNow == 1) && (StartRecordFlag == 1))
			{
				// 每次的起点是否在同一个坐标系？？？
			    Start_last[0] = Start[0]; //  
			    Start_last[1] = Start[1]; //
				Start_last[2] = Start[2];
				StartRecordFlag = 0;
				PlanOnlyOne++;  // >0 动态规划启动
			}
			// 2022.12.06

			ErrorCode = start_end_get(); // 计算起始点和终点
			
			// 2022.12.06:
			if (PathOnlyOneNow == 1)
			{
				d_s2s = ((Start[0] - Start_last[0])*(Start[0] - Start_last[0]) + (Start[1] - Start_last[1])*(Start[1] - Start_last[1])); // 距上次起点直线距离 近似航迹?
			    d_s2e = ((Start[0] - End[0])*(Start[0] - End[0]) + (Start[1] - End[1])*(Start[1] - End[1])); // 距终点距离
			    d_phi = fabs(mod2pi(Start[2] - End[2])); // 与目标角度的偏差
			}
            // 2022.12.06

			///////////////////////////////////////////////////////////////////////////////////////
			if (plan_request == 2u) // 检测规划请求上升沿
			{
				Read_obstmap = 1;
				bydapa::common::TicToc tictoc_request1;
				tictoc_request1.tic();
				while (Read_obstmap)
				{
					usleep(10);
					double nseconds_request1 = tictoc_request1.toc();
					nseconds_request1 = nseconds_request1 * 0.000000001;

					if (nseconds_request1 > 1)
					{
						LOG_WARNING("Read map error!");
						break;
					}
				}
				/*if (app.APA_Park_Function == 1)
				{
					int ErrorCode1 = imagmap_get(); // 虚拟地图
				}*/
				int ErrorCode1 = imagmap_get(); // 虚拟地图

				delete_map();
				/////////////////////////////////////////////////////////////
				// for (int i = 0; i < 250; i++) {
				//     for (int j = 0; j < 250; j++) {
				//         std::cout << int(obstmap[i*250+j].Status) << " ";
				//     }
				//     std::cout << std::endl;
				// }

				// cv::Mat image(250, 250, CV_8UC3);
				// for (int i = 0; i < 250; i++) {
				// 	for (int j = 0; j < 250; j++) {
				// 		int colorValue = static_cast<int>(double(obstmap[i*250+j].Status)/5 * 255);
				// 		cv::Vec3b color(255 - colorValue, 0, 255);
				// 		image.at<cv::Vec3b>(i, j) = color;
						
				// 		// if (obstmap[i*250+j].Status == 0)
				// 		// {	
				// 		// 	int colorValue = 0;
				// 		// 	cv::Vec3b color(colorValue, 0, 0);
				// 		// 	image.at<cv::Vec3b>(i, j) = color;
				// 		// }
				// 		// else
				// 		// {
				// 		// 	int colorValue = 128;
				// 		// 	cv::Vec3b color(colorValue, 255, 255);
				// 		// 	image.at<cv::Vec3b>(i, j) = color;
				// 		// } 
				// 	}
				// }
				// // 显示热力图
				// cv::imshow("Heatmap", image);
				// cv::waitKey(0);
				/////////////////////////////////////////////////////////////

				bydapa::common::TicToc tictoc_plan;
				tictoc_plan.tic();
				SEorES = 0;
				index_request = index_request + 1; // 记录请求次数
				/////////////////////车位车库输入//////////////////////////////////////////////
				if (ErrorCode == 1)
				{
					ErrorLog(); // 错误起点日志
					plan.PlanningStatus = 2;
					#ifndef DEBUG_PC
					status_publisher("");
					#endif
				}
				///////////////////////////////////////////////////////////////////////////////
				Uss_map(); // 超声波虚拟障碍物
				double nseconds_planUss_map = tictoc_plan.toc();
				nseconds_planUss_map = nseconds_planUss_map * 0.000000001;
				LOG_WARNING("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%nseconds_planUss_map%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% = %lf", nseconds_planUss_map);
				is_Completed();  // 判断是否在车位内
				double nseconds_planis_Completed = tictoc_plan.toc();
				nseconds_planis_Completed = nseconds_planis_Completed * 0.000000001;
				LOG_WARNING("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%nseconds_planis_Completed%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% = %lf", nseconds_planis_Completed);
				InformationLog(); // 输入信息日志
				double nseconds_planInformationLog = tictoc_plan.toc();
				nseconds_planInformationLog = nseconds_planInformationLog * 0.000000001;
				LOG_WARNING("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%nseconds_planInformationLog%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% = %lf", nseconds_planInformationLog);
				/////////////////////////////////////////////////////////////////////////////////
				if (plan.IsPlanningCompleted == 1)  // 判断泊车完成，未完成才进入规划
				{
					double nseconds_planPlanLog_before = tictoc_plan.toc();
					nseconds_planPlanLog_before = nseconds_planPlanLog_before * 0.000000001;
					LOG_WARNING("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%nseconds_planPlanLog_before%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% = %lf", nseconds_planPlanLog_before);
					PlanLog();
					double nseconds_planPlanLog = tictoc_plan.toc();
					nseconds_planPlanLog = nseconds_planPlanLog * 0.000000001;
					LOG_WARNING("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%nseconds_planPlanLog%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% = %lf", nseconds_planPlanLog);
					
					fprintf(pF, "plan.IsPlanningCompleted=%d,\n", (int)plan.IsPlanningCompleted);
					fprintf(pF, "start=%lf, %lf, %lf,\n", Start[0], Start[1], Start[2]);
					fprintf(pF, "end=%lf, %lf, %lf,\n", End[0], End[1], End[2]);
					fflush(pF);
				}
				else // plan.IsPlanningCompleted为“0”
				{
					ParkingVertical(); // 垂直车位
					ParkingLevel(); // 水平车位
					ParkingOblique(); // 斜车位
					SEorES = 0;
					fprintf(pF, "nseconds_time=%lf,\n", nseconds);
					double nseconds_plan = tictoc_plan.toc();
					nseconds_plan = nseconds_plan * 0.000000001;
					LOG_WARNING("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Astar_nseconds_plan%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% = %lf", nseconds_plan);
					if (plan.PlanningStatus == 1)
					{
						#ifndef DEBUG_PC
						path_publisher("");
						#endif
					}
					printf("plan.PlanningStatus = %d\n",plan.PlanningStatus);
					if (plan.PlanningStatus != 0)
					{
						return 0;
					}
					fflush(pF);
				}
				plan_request = 0u; // 记录路径规划请求状态

				double nseconds_plan_a = tictoc_plan.toc();
				nseconds_plan_a = nseconds_plan_a * 0.000000001;
				LOG_WARNING("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Pub_Astar_nseconds_plan%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% = %lf", nseconds_plan_a);
				//fflush(pF);
			}
			else if ((PlanOnlyOne > 0) && (PathOnlyOneNow == 1) &&  (plan_request == 0u) && (d_s2s > 0.01) && (d_s2e > 1) && (d_phi > 0.0524) && (fusion.parkingSpaceInfo.ParkingSpaceType != 2))  //2022.12.06:增加 起点、终点距离 角度 限制
			{
				double End_EndBefore_dy1[3] = { 0, 0, 0 };
				End_EndBefore_dy1[2] = End_before[2] - End[2];
				double X_local_stop_dy1 = (End_before[0] - End[0]) * cos(End[2]) + (End_before[1] - End[1]) * sin(End[2]);
				double Y_local_stop_dy1 = (End_before[1] - End[1]) * cos(End[2]) - (End_before[0] - End[0]) * sin(End[2]);
				End_EndBefore_dy1[0] = X_local_stop_dy1;
				End_EndBefore_dy1[1] = Y_local_stop_dy1;
				if ((fabs(End_EndBefore_dy1[1]) > 0.01) || (fabs(End_EndBefore_dy1[2]) > 0.017453292519943 * 0.3))
				{
					Read_obstmap = 1;
					bydapa::common::TicToc tictoc_request2;
					tictoc_request2.tic();
					while (Read_obstmap)
					{
						usleep(10);
						double nseconds_request2 = tictoc_request2.toc();
						nseconds_request2 = nseconds_request2 * 0.000000001;

						if (nseconds_request2 > 1)
						{
							LOG_WARNING("Read map error!");
							break;
						}
					}

					if (app.APA_Park_Function == 1)
					{
						int ErrorCode2 = imagmap_get(); // 虚拟地图
					}
					//int ErrorCode2 = imagmap_get(); // 虚拟地图

					delete_map();

					printf("*****************Dynamic multi start! 1111***************\n");
					// 2022.12.07:增加log:Start_last, d_s2s, d_s2e, d_phi;
					//fprintf(pF, "动态规划开始,\n");
					//fprintf(pF, "start_last=%lf, %lf, %lf,\n", Start_last[0], Start_last[1], Start_last[2]);
					//fprintf(pF, "d_s2s=%lf,\n", d_s2s);
					//fprintf(pF, "d_s2e=%lf,\n", d_s2e);
					//fprintf(pF, "d_phi=%lf,\n", d_phi);
					// 2022.12.07:增加log
					//InformationLog(); // 输入信息日志
					// 2022.12.07

					if (dynamic_vertical_multi(Start, End) == 1) // 2022.12.06
					{
						InformationLog(); // 输入信息日志
										  // 2022.12.06: 成功进行一次动态规划，记录一次规划起点
						StartRecordFlag = 1;
						// 2022.12.06:
						hypathchange(); // 将得到的路规范化
						plan.PlanningStatus = 3;
						// 2022.12.07:提前打印日志
						//InformationLog(); // 输入信息日志
						// 2022.12.07:
						fprintf(pF, "动态规划成功,");
						printf("////////////////////////////////////Dynamic multi success! 1111////////////////////////////////////");
						//fflush(pF);
						PlanLog();  // 规划信息日志
									//fflush(pF);
						fprintf(pF, "nseconds_time=%lf,\n", nseconds);
						#ifndef DEBUG_PC
						status_publisher("");
						path_publisher("");
						#endif
						fflush(pF);
					}
					else
					{
						plan.PlanningStatus = 0;
					}
				}
			}
			else if ((PathOnlyOneNow == 1) && (PlanOnlyOne > 0) && (plan_request == 0u) && (d_s2s > 0.0625) && (d_s2e > 1) && (d_phi < 0.0524) && (fusion.parkingSpaceInfo.ParkingSpaceType != 2))  // 2022.12.06 修改 是否需要???
			{
				double End_EndBefore_dy2[3] = { 0, 0, 0 };
				End_EndBefore_dy2[2] = End_before[2] - End[2];
				double X_local_stop_dy2 = (End_before[0] - End[0]) * cos(End[2]) + (End_before[1] - End[1]) * sin(End[2]);
				double Y_local_stop_dy2 = (End_before[1] - End[1]) * cos(End[2]) - (End_before[0] - End[0]) * sin(End[2]);
				End_EndBefore_dy2[0] = X_local_stop_dy2;
				End_EndBefore_dy2[1] = Y_local_stop_dy2;
				if ((fabs(End_EndBefore_dy2[1]) > 0.01) || (fabs(End_EndBefore_dy2[2]) > 0.017453292519943 * 0.3))
				{
					Read_obstmap = 1;
					bydapa::common::TicToc tictoc_request3;
					tictoc_request3.tic();
					while (Read_obstmap)
					{
						usleep(10);
						double nseconds_request3 = tictoc_request3.toc();
						nseconds_request3 = nseconds_request3 * 0.000000001;

						if (nseconds_request3 > 1)
						{
							LOG_WARNING("Read map error!");
							break;
						}
					}
					if (app.APA_Park_Function == 1)
					{
						int ErrorCode3 = imagmap_get(); // 虚拟地图
					}
					//int ErrorCode3 = imagmap_get(); // 虚拟地图

					delete_map();

					printf("*****************Dynamic CC_road start! 2222***************\n");
					// 2022.12.07:增加log:Start_last, d_s2s, d_s2e, d_phi;
					//fprintf(pF, "扭一扭动态规划开始,\n");
					//fprintf(pF, "start_last=%lf, %lf, %lf,\n", Start_last[0], Start_last[1], Start_last[2]);
					//fprintf(pF, "d_s2s=%lf,\n", d_s2s);
					//fprintf(pF, "d_s2e=%lf,\n", d_s2e);
					//fprintf(pF, "d_phi=%lf,\n", d_phi);
					// 2022.12.07:增加log
					//InformationLog(); // 输入信息日志
					// 2022.12.07:

					if (dynamic_CC_road(Start, End) == 1)
					{
						InformationLog(); // 输入信息日志
										  // 2022.12.06: 成功进行一次动态规划，记录一次规划起点
						StartRecordFlag = 1; // 2022.12.07
											 // 2022.12.06:
											 /*if (d_s2e < 6.25)
											 {
											 PathOnlyOneNow = 0; // 2022.12.07:成功进行扭一扭规划，则不再进行动态规划
											 }*/
											 //PathOnlyOneNow = 0; // 2022.12.07:成功进行扭一扭规划，则不再进行动态规划
						hypathchange(); // 将得到的路规范化
						plan.PlanningStatus = 3;
						// 2022.12.07:提前打印日志
						//InformationLog(); // 输入信息日志
						// 2022.12.07:
						fprintf(pF, "扭一扭动态规划成功,");
						printf("////////////////////////////////////Dynamic CC_road success! 2222////////////////////////////////////");
						//fflush(pF);
						PlanLog();  // 规划信息日志
									//fflush(pF);
						fprintf(pF, "nseconds_time=%lf,\n", nseconds);
						#ifndef DEBUG_PC
						status_publisher("");
						path_publisher("");
						#endif
						fflush(pF);
					}
					else
					{
						plan.PlanningStatus = 0;
					}
				}
			}
			else if ((PathOnlyOneNow == 1) && (PlanOnlyOne > 0) && (plan_request == 0u) && (d_s2s > 0.0625) && (d_s2e < 1) && (d_s2e > 0.1) && (fusion.parkingSpaceInfo.ParkingSpaceType != 2))
			{
				double End_EndBefore_ctrl[3] = { 0, 0, 0 };
				End_EndBefore_ctrl[2] = End_before[2] - End[2];
				double X_local_stop_ctrl = (End_before[0] - End[0]) * cos(End[2]) + (End_before[1] - End[1]) * sin(End[2]);
				double Y_local_stop_ctrl = (End_before[1] - End[1]) * cos(End[2]) - (End_before[0] - End[0]) * sin(End[2]);
				End_EndBefore_ctrl[0] = X_local_stop_ctrl;
				End_EndBefore_ctrl[1] = Y_local_stop_ctrl;
				if (fabs(End_EndBefore_ctrl[2]) > 0.017453292519943 * 0.5)
				{
					plan.PlanningStatus = 3;
					InformationLog(); // 输入信息日志
									  // 2022.12.06: 成功进行一次动态规划，记录一次规划起点
					StartRecordFlag = 1;
					fprintf(pF, "终点动态规划成功,");

					for (int clear_i = 0; clear_i < 300; clear_i++)    // 多余的结构体“置0”
					{
						plan.coordinate[clear_i].Yaw = 0;
						plan.coordinate[clear_i].X = 0;
						plan.coordinate[clear_i].Y = 0;
						plan.coordinate[clear_i].rajectoryDirection = 0;
						plan.coordinate[clear_i].Curvature = 0;
					}

					End_before[0] = End[0];
					End_before[1] = End[1];
					End_before[2] = End[2];
					plan.TrajectoryLength = 10;
					
					double End_th = End[2];
					if (End[2] < 0)   // 航向角转化为0°到360°
					{
						End_th = End[2] + 6.283185307179586;
					}
					plan.coordinate[0].Yaw = End_th * 57.295779513082323;
					plan.coordinate[0].X = End[0] * 100;
					plan.coordinate[0].Y = End[1] * 100;
					plan.coordinate[0].rajectoryDirection = 2;
					plan.coordinate[0].Curvature = 0;

					PlanLog();  // 规划信息日志
								//fflush(pF);
					fprintf(pF, "nseconds_time=%lf,\n", nseconds);
					#ifndef DEBUG_PC
					status_publisher("");
					path_publisher("");
					#endif
					fflush(pF);
				}
			}
			if ((bbb == 0) && (plan_request == 0u) && (PlanOnlyOne > 0) && (PathOnlyOneNow == 1) && (plan.PlanningStatus != 3) && (fusion.parkingSpaceInfo.ParkingSpaceType != 2) && (index_request > 0) && ((d_s2e < 9) || (d_phi < 0.0873)))
			{
				double End_EndBefore[3] = { 0, 0, 0 };
				End_EndBefore[2] = End_before[2] - End[2];
				double X_local_stop = (End_before[0] - End[0]) * cos(End[2]) + (End_before[1] - End[1]) * sin(End[2]);
				double Y_local_stop = (End_before[1] - End[1]) * cos(End[2]) - (End_before[0] - End[0]) * sin(End[2]);
				End_EndBefore[0] = X_local_stop;
				End_EndBefore[1] = Y_local_stop;
				if ((fabs(End_EndBefore[1]) > 0.1) || (fabs(End_EndBefore[2]) > 0.017453292519943 * 3))
				{
					InformationLog(); // 输入信息日志
					bbb = 1;
					plan.PlanningStatus = 4;
					#ifndef DEBUG_PC
					status_publisher("");
					#endif
					fprintf(pF, "偏差过大停车,");
					PlanLog();  // 规划信息日志
								//fflush(pF);
					fprintf(pF, "nseconds_time=%lf,\n", nseconds);
					fflush(pF);
				}
			}
			//fflush(pF);
		}
		if (aaa == 1)
		{
			printf("**********************************************************\n");
			printf("**********************************************************\n");
			printf("******************HybridAstar_error***********************\n");
			printf("**********************************************************\n");
			printf("**********************************************************\n");
		}
		APAStatus_before = app.APAStatus;
		plan.PlanningStatus = 0;
	}

	return 0;
}

void parameter_initi()
{
	// Motion resolution define 运动分辨率定义
	pathfind_parameters.MOTION_RESOLUTION = 0.1; //[m] path interporate resolution 路径插值分辨率
	pathfind_parameters.N_STEER = 1.0; //20.0; % number of steer command 转向指令数
	pathfind_parameters.EXTEND_AREA = 0;//[m] map extend length 地图延伸长度
	pathfind_parameters.XY_GRID_RESOLUTION = 0.1;
	pathfind_parameters.YAW_GRID_RESOLUTION = 3;

	//Grid bound 网格边界
	pathfind_parameters.MINX = -12.5;
	pathfind_parameters.MAXX = 12.5;
	pathfind_parameters.MINY = -12.5;
	pathfind_parameters.MAXY = 12.5;
	pathfind_parameters.MINYAW = -3.141592653589793;
	pathfind_parameters.MAXYAW = 3.141592653589793;

	//Cost related define 成本相关定义
	pathfind_parameters.SB_COST = 2.0; // % 0.9 switch back penalty cost 切换回惩罚成本
	pathfind_parameters.BACK_COST = 1; // 1; %1.5; % backward penalty cost 反向惩罚成本
	pathfind_parameters.STEER_CHANGE_COST = 0.9; // 0; %1.5; % steer angle change penalty cost 转向角改变惩罚成本
	pathfind_parameters.STEER_COST = 0; // steer angle change penalty cost 转向角惩罚成本
	pathfind_parameters.H_COST = 2; // Heuristic cost 启发式成本

	//车辆参数
	vehicle_parameters.WB = 3.10;  //[m] wheel base : rear to front steer 轴距
	vehicle_parameters.W = 1.96; //[m] width of vehicle 车宽
	vehicle_parameters.LF = 4.086; //[m] distance from rear to vehicle front end of vehicle 后轴中心到车辆最前端的距离
	vehicle_parameters.LB = 1.151; //[m] distance from rear to vehicle back end of vehicle 后轴中心到车辆最后端的距离
	vehicle_parameters.MAX_STEER = 0.4769; // 0.4881; //[rad] maximum steering angle 车辆轮胎最大转角
	vehicle_parameters.MIN_CIRCLE = vehicle_parameters.WB / tan(vehicle_parameters.MAX_STEER); //[m] mininum steering circle radius 车辆最小转弯半径 汉_5.5
	//vehicle_parameters.MIN_CIRCLE = 10;

	//角度设置
	find_steer_degree.clear();
	find_steer_degree.push_back(-vehicle_parameters.MAX_STEER);
	// find_steer_degree.push_back(-vehicle_parameters.MAX_STEER/3.0*2.0);
	// find_steer_degree.push_back(-vehicle_parameters.MAX_STEER/3.0*1.0);
	find_steer_degree.push_back(0);
	// find_steer_degree.push_back(vehicle_parameters.MAX_STEER/3.0*1.0);
	// find_steer_degree.push_back(vehicle_parameters.MAX_STEER/3.0*2.0);
	find_steer_degree.push_back(vehicle_parameters.MAX_STEER);

	pathfind_parameters.XIDX = ceil((pathfind_parameters.MAXX - pathfind_parameters.MINX) / pathfind_parameters.XY_GRID_RESOLUTION);
	pathfind_parameters.XIDY = ceil((pathfind_parameters.MAXY - pathfind_parameters.MINY) / pathfind_parameters.XY_GRID_RESOLUTION);

}

//在（0,0）坐标原点时，某点的值为（x_global,y_global）单位（米，米），坐标系原点变到（x_origin,y_origin，theta）单位（米，米，度），此点的坐标为（x_local?,y_local?）
void origin_transformation_l(double x_global, double y_global, double x_origin, double y_origin, double theta)
{
	X_local = (x_global - x_origin) * cos(theta) + (y_global - y_origin) * sin(theta);
	Y_local = (y_global - y_origin) * cos(theta) - (x_global - x_origin) * sin(theta);
}

int start_end_get()
{
	End_level_small[0] = 0;
	End_level_small[1] = 0;
	End_level_small[2] = 0;

	if (control.ObsUssInfo == 20u)
	{
		ccc = ccc + 1;
		ctrl_nav_x = calculation.nav_pos_X*0.01;
		ctrl_nav_y = calculation.nav_pos_Y*0.01;
		control.ObsUssInfo = 21u;
	}
	
	if (((fusion.position.Heading >= 0) && (fusion.position.Heading <= 360)) && ((calculation.nav_heading >= 0) && (calculation.nav_heading <= 360)))
	{
		double fus_theta = mod2pi(fusion.position.Heading * 0.017453292519943);  //  坐标系转换弧度
		double cal_theta = mod2pi(calculation.nav_heading * 0.017453292519943);  //  坐标系转换弧度
		Start[2] = mod2pi(cal_theta - fus_theta);
		origin_transformation_l(calculation.nav_pos_X, calculation.nav_pos_Y, fusion.position.X, fusion.position.Y, fus_theta);
		Start[0] = X_local / 100;
		Start[1] = Y_local / 100;
		origin_transformation_l(fusion.parkingSpaceInfo.P0_X, fusion.parkingSpaceInfo.P0_Y, fusion.position.X, fusion.position.Y, fus_theta);
		P0x = X_local / 100;
		P0y = Y_local / 100;
		origin_transformation_l(fusion.parkingSpaceInfo.P1_X, fusion.parkingSpaceInfo.P1_Y, fusion.position.X, fusion.position.Y, fus_theta);
		P1x = X_local / 100;
		P1y = Y_local / 100;
		origin_transformation_l(fusion.parkingSpaceInfo.P2_X, fusion.parkingSpaceInfo.P2_Y, fusion.position.X, fusion.position.Y, fus_theta);
		P2x = X_local / 100;
		P2y = Y_local / 100;
		origin_transformation_l(fusion.parkingSpaceInfo.P3_X, fusion.parkingSpaceInfo.P3_Y, fusion.position.X, fusion.position.Y, fus_theta);
		P3x = X_local / 100;
		P3y = Y_local / 100;

		double ParkTheta = 0;
		if (fusion.ParkInMode == 0)
		{
			ParkTheta = fusion.Theta;
		}
		else if (fusion.ParkInMode == 1)
		{
			ParkTheta = fusion.Theta + 180;
		}
		else
		{
			ParkTheta = fusion.Theta;
		}
		double Ptheta = mod2pi(ParkTheta * 0.017453292519943) - fus_theta;
		Ptheta = mod2pi(Ptheta);

		if (ccc > 0)
		{
			if (fusion.parkingSpaceInfo.ParkingSpaceType == 1)
			{
				double ctrl_x0 = fusion.parkingSpaceInfo.P0_X * 0.01;
				double ctrl_y0 = fusion.parkingSpaceInfo.P0_Y * 0.01;
				double ctrl_x3 = fusion.parkingSpaceInfo.P3_X * 0.01;
				double ctrl_y3 = fusion.parkingSpaceInfo.P3_Y * 0.01;
				if (fabs(ctrl_y3 - ctrl_y0) > 0.0001 || fabs(ctrl_x0 - ctrl_x3) > 0.0001)
				{
					b_depth = 0.25 + fabs(((ctrl_y3 - ctrl_y0) * ctrl_nav_x + (ctrl_x0 - ctrl_x3) * ctrl_nav_y - ctrl_x0 * ctrl_y3 + ctrl_y0 * ctrl_x3) / sqrt((ctrl_y3 - ctrl_y0) * (ctrl_y3 - ctrl_y0) + (ctrl_x0 - ctrl_x3) * (ctrl_x0 - ctrl_x3)));
				}
				else
				{
					b_depth = fusion.depth_block / 100.0;
				}
			}
			else if (fusion.parkingSpaceInfo.ParkingSpaceType == 3)
			{
				double ctrl_x0 = (fusion.parkingSpaceInfo.P0_X + fusion.parkingSpaceInfo.P3_X)/2 * 0.01;
				double ctrl_y0 = (fusion.parkingSpaceInfo.P0_Y + fusion.parkingSpaceInfo.P3_Y)/2 * 0.01;
				double ParkTheta_ccc = mod2pi(ParkTheta * 0.017453292519943);
				double ctrl_x3 = ctrl_x0 + cos(ParkTheta_ccc + 3.141592653589793 / 2);
				double ctrl_y3 = ctrl_y0 + sin(ParkTheta_ccc + 3.141592653589793 / 2);
				if (fabs(ctrl_y3 - ctrl_y0) > 0.0001 || fabs(ctrl_x0 - ctrl_x3) > 0.0001)
				{
					b_depth = 0.25 + fabs(((ctrl_y3 - ctrl_y0) * ctrl_nav_x + (ctrl_x0 - ctrl_x3) * ctrl_nav_y - ctrl_x0 * ctrl_y3 + ctrl_y0 * ctrl_x3) / sqrt((ctrl_y3 - ctrl_y0) * (ctrl_y3 - ctrl_y0) + (ctrl_x0 - ctrl_x3) * (ctrl_x0 - ctrl_x3)));
				}
				else
				{
					b_depth = fusion.depth_block / 100.0;
				}
			}
		}
		else
		{
			b_depth = fusion.depth_block / 100.0; // fusion.depth_block 单位cm
		}
		/////////////求终点//////////////////
		double CarL = (vehicle_parameters.LF + vehicle_parameters.LB)/2- vehicle_parameters.LB;
		double D_fabs_point = 0.05;
		double theta_fabs_point = 10;
		// 垂直车位
		if (fusion.parkingSpaceInfo.ParkingSpaceType == 1)
		{
			// 车尾泊入
			if (fusion.ParkInMode != 1)
			{
				double Px = 0;
				double Py = 0;
				//2022.12.07:以轮档杆位置确定终点位置;
				if(b_depth - 0.1 > 0.0)  
				{
					double P_mean_x = (P0x + P1x + P2x + P3x) / 4;
					double P_mean_y = (P0y + P1y + P2y + P3y) / 4;
					double Px_b_depth = (P0x + P3x) / 2.0 - (b_depth - 0.2)*cos(Ptheta);
					double Py_b_depth = (P0y + P3y) / 2.0 - (b_depth - 0.2)*sin(Ptheta);
					double Px_no_depth = (P1x + P2x) / 2 + vehicle_parameters.LB * cos(Ptheta);
					double Py_no_depth = (P1y + P2y) / 2 + vehicle_parameters.LB * sin(Ptheta);
					double Pow_P_b_depth = (P_mean_x - Px_b_depth) * (P_mean_x - Px_b_depth) + (P_mean_y - Py_b_depth) * (P_mean_y - Py_b_depth);
					double Pow_P_no_depth = (P_mean_x - Px_no_depth) * (P_mean_x - Px_no_depth) + (P_mean_y - Py_no_depth) * (P_mean_y - Py_no_depth);

					if (Pow_P_b_depth - Pow_P_no_depth < 0)
					{
						Px = Px_b_depth;
						Py = Py_b_depth;
					}
					else
					{
						Px = Px_no_depth;
						Py = Py_no_depth;
					}
					/*End[0] = Px;
					End[1] = Py;
					End[2] = Ptheta;*/
					////////////////////////////////////////////
					if ((Ptheta-Start[2]) > 0.01745*theta_fabs_point)
					{
						End[0] = 0 * cos(Ptheta) + D_fabs_point * sin(Ptheta) + Px;
						End[1] = -D_fabs_point * cos(Ptheta) + 0 * sin(Ptheta) + Py;
						End[2] = Ptheta;
					}
					else if ((Ptheta-Start[2]) < -0.01745*theta_fabs_point)
					{
						End[0] = 0 * cos(Ptheta) - D_fabs_point * sin(Ptheta) + Px;
						End[1] = D_fabs_point * cos(Ptheta) + 0 * sin(Ptheta) + Py;
						End[2] = Ptheta;
					}
					else
					{
						End[0] = Px;
						End[1] = Py;
						End[2] = Ptheta;
					}
				}
				// 2022.12.07
				else
				{
					Px = (P1x + P2x) / 2 + vehicle_parameters.LB * cos(Ptheta);
				    Py = (P1y + P2y) / 2 + vehicle_parameters.LB * sin(Ptheta);
				    /*End[0] = Px;
				    End[1] = Py;
				    End[2] = Ptheta;*/
					/////////////////////////////////////////////
					if ((Ptheta-Start[2]) > 0.01745*theta_fabs_point)
					{
						End[0] = 0 * cos(Ptheta) + D_fabs_point * sin(Ptheta) + Px;
						End[1] = -D_fabs_point * cos(Ptheta) + 0 * sin(Ptheta) + Py;
						End[2] = Ptheta;
					}
					else if ((Ptheta-Start[2]) < -0.01745*theta_fabs_point)
					{
						End[0] = 0 * cos(Ptheta) - D_fabs_point * sin(Ptheta) + Px;
						End[1] = D_fabs_point * cos(Ptheta) + 0 * sin(Ptheta) + Py;
						End[2] = Ptheta;
					}
					else
					{
						End[0] = Px;
						End[1] = Py;
						End[2] = Ptheta;
					}
				}
			}
			// 车头泊入
			else
			{
				double Px = (P1x + P2x) / 2 - (vehicle_parameters.LF + 0.1) * cos(Ptheta);
				double Py = (P1y + P2y) / 2 - (vehicle_parameters.LF + 0.1) * sin(Ptheta);
				End[0] = Px;
				End[1] = Py;
				End[2] = Ptheta;
			}

            /*
			PathLong = (Start[0] - End[0]) * (Start[0] - End[0]) + (Start[1] - End[1]) * (Start[1] - End[1]);

			if ((PathLong < 16) && (PathLong > 9) && (PathOnlyOneNow == 1) && (PlanOnlyOne < 2))
			{
				PlanOnlyOne = PlanOnlyOne + 1;
			}
			*/
			
		}
		// 水平车位
		else if (fusion.parkingSpaceInfo.ParkingSpaceType == 2)
		{
			// double P_mean_x = (P0x + P1x + P2x + P3x) / 4;
			// double P_mean_y = (P0y + P1y + P2y + P3y) / 4;
			// double Px = P_mean_x - CarL * cos(Ptheta);
			// double Py = P_mean_y - CarL * sin(Ptheta);
			// End[0] = Px;
			// End[1] = Py;
			// End[2] = Ptheta;

			// 2022.12.07:水平车位终点朝P03边外移0.15m
			double end_bias = 0.0; //0.15
			double P_mean_03x = (P0x + P3x) / 2;
			double P_mean_03y = (P0y + P3y) / 2;
			double P_mean_x = (P0x + P1x + P2x + P3x) / 4;
			double P_mean_y = (P0y + P1y + P2y + P3y) / 4;
			double dist_P03 = sqrt((P_mean_03x - P_mean_x)*(P_mean_03x - P_mean_x) + (P_mean_03y - P_mean_y)*(P_mean_03y - P_mean_y));
			double cos_P03 = (P_mean_x - P_mean_03x) / dist_P03;
			double sin_P03 = (P_mean_y - P_mean_03y) / dist_P03;
			P_mean_x = P_mean_x - end_bias*cos_P03;
			P_mean_y = P_mean_y - end_bias*sin_P03;
			double Px = P_mean_x - (CarL) * cos(Ptheta);
			double Py = P_mean_y - (CarL) * sin(Ptheta);
			End[0] = Px;
			End[1] = Py;
			End[2] = Ptheta;
			// 2022.12.07
		}
		// 斜车位
		else
		{
			/*
			if (b_depth - 0.1 > 0.0)
			{
				double Px = 0;
				double Py = 0;
				double P_mean_x = (P0x + P1x + P2x + P3x) / 4;
				double P_mean_y = (P0y + P1y + P2y + P3y) / 4;
				double Px_b_depth = (P0x + P3x) / 2.0 - (b_depth - 0.25)*cos(Ptheta);
				double Py_b_depth = (P0y + P3y) / 2.0 - (b_depth - 0.25)*sin(Ptheta);
				double Px_no_depth = (P0x + P1x + P2x + P3x) / 4 - CarL * cos(Ptheta);
				double Py_no_depth = (P0y + P1y + P2y + P3y) / 4 - CarL * sin(Ptheta);
				double Pow_P_b_depth = (P_mean_x - Px_b_depth) * (P_mean_x - Px_b_depth) + (P_mean_y - Py_b_depth) * (P_mean_y - Py_b_depth);
				double Pow_P_no_depth = (P_mean_x - Px_no_depth) * (P_mean_x - Px_no_depth) + (P_mean_y - Py_no_depth) * (P_mean_y - Py_no_depth);

				if (Pow_P_b_depth - Pow_P_no_depth < 0)
				{
					Px = Px_b_depth;
					Py = Py_b_depth;
				}
				else
				{
					Px = Px_no_depth;
					Py = Py_no_depth;
				}
				End[0] = Px;
				End[1] = Py;
				End[2] = Ptheta;
			}
			else
			{
				double P_mean_x = (P0x + P1x + P2x + P3x) / 4;
				double P_mean_y = (P0y + P1y + P2y + P3y) / 4;
				double Px = (P0x + P1x + P2x + P3x) / 4 - CarL * cos(Ptheta);
				double Py = (P0y + P1y + P2y + P3y) / 4 - CarL * sin(Ptheta);
				End[0] = Px;
				End[1] = Py;
				End[2] = Ptheta;
			}
			*/	
			if (b_depth - 0.1 > 0.0)
			{
				double Px = (P0x + P3x) / 2.0 - (b_depth - 0.2) * cos(Ptheta);
				double Py = (P0y + P3y) / 2.0 - (b_depth - 0.2) * sin(Ptheta);
				if ((Ptheta-Start[2]) > 0.01745*theta_fabs_point)
				{
					End[0] = 0 * cos(Ptheta) + D_fabs_point * sin(Ptheta) + Px;
					End[1] = -D_fabs_point * cos(Ptheta) + 0 * sin(Ptheta) + Py;
					End[2] = Ptheta;
				}
				else if ((Ptheta-Start[2]) < -0.01745*theta_fabs_point)
				{
					End[0] = 0 * cos(Ptheta) - D_fabs_point * sin(Ptheta) + Px;
					End[1] = D_fabs_point * cos(Ptheta) + 0 * sin(Ptheta) + Py;
					End[2] = Ptheta;
				}
				else
				{
					End[0] = Px;
					End[1] = Py;
					End[2] = Ptheta;
				}
			}
			else
			{
				double D_P02 = sqrt((P0x - P2x) * (P0x - P2x) + (P0y - P2y) * (P0y - P2y));
				double D_P13 = sqrt((P1x - P3x) * (P1x - P3x) + (P1y - P3y) * (P1y - P3y));
				double P0x_img_ = 0;
				double P0y_img_ = 0;
				double P1x_img_ = 0;
				double P1y_img_ = 0;
				double P2x_img_ = 0;
				double P2y_img_ = 0;
				double P3x_img_ = 0;
				double P3y_img_ = 0;
				double P0x_img = 0;
				double P0y_img = 0;
				double P1x_img = 0;
				double P1y_img = 0;
				double P2x_img = 0;
				double P2y_img = 0;
				double P3x_img = 0;
				double P3y_img = 0;
				if (D_P02< D_P13)
				{
					origin_transformation_l(P0x, P0y, P2x, P2y, Ptheta);
					P1x_img_ = 0;
					P1y_img_ = Y_local;
					P3x_img_ = X_local;
					P3y_img_ = 0;

					P0x_img = P0x;
					P0y_img = P0y;
					P1x_img = P1x_img_ * cos(Ptheta) - P1y_img_ * sin(Ptheta) + P2x;
					P1y_img = P1y_img_ * cos(Ptheta) + P1x_img_ * sin(Ptheta) + P2y;
					P2x_img = P2x;
					P2y_img = P2y;
					P3x_img = P3x_img_ * cos(Ptheta) - P3y_img_ * sin(Ptheta) + P2x;
					P3y_img = P3y_img_ * cos(Ptheta) + P3x_img_ * sin(Ptheta) + P2y;
				}
				else
				{
					origin_transformation_l(P3x, P3y, P1x, P1y, Ptheta);
					P0x_img_ = X_local;
					P0y_img_ = 0;
					P2x_img_ = 0;
					P2y_img_ = Y_local;					

					P0x_img = P0x_img_ * cos(Ptheta) - P0y_img_ * sin(Ptheta) + P1x;
					P0y_img = P0y_img_ * cos(Ptheta) + P0x_img_ * sin(Ptheta) + P1y;
					P1x_img = P1x;
					P1y_img = P1y;
					P2x_img = P2x_img_ * cos(Ptheta) - P2y_img_ * sin(Ptheta) + P1x;
					P2y_img = P2y_img_ * cos(Ptheta) + P2x_img_ * sin(Ptheta) + P1y;
					P3x_img = P3x;
					P3y_img = P3y;
					//printf("P0_img=%lf,%lf\n",P0x_img,P0y_img);
					//printf("P1_img=%lf,%lf\n",P1x_img,P1y_img);
					//printf("P2_img=%lf,%lf\n",P2x_img,P2y_img);
					//printf("P3_img=%lf,%lf\n",P3x_img,P3y_img);
				}

				double D_imgP2P3 = sqrt((P3x_img - P2x_img) * (P3x_img - P2x_img) + (P3y_img - P2y_img) * (P3y_img - P2y_img));
				if (D_imgP2P3 >= 5)
				{
					double Px = (P3x_img + P0x_img) / 2 - vehicle_parameters.LF * cos(Ptheta);
					double Py = (P3y_img + P0y_img) / 2 - vehicle_parameters.LF * sin(Ptheta);
					if ((Ptheta-Start[2]) > 0.01745*theta_fabs_point)
					{
						End[0] = 0 * cos(Ptheta) + D_fabs_point * sin(Ptheta) + Px;
						End[1] = -D_fabs_point * cos(Ptheta) + 0 * sin(Ptheta) + Py;
						End[2] = Ptheta;
					}
					else if ((Ptheta-Start[2]) < -0.01745*theta_fabs_point)
					{
						End[0] = 0 * cos(Ptheta) - D_fabs_point * sin(Ptheta) + Px;
						End[1] = D_fabs_point * cos(Ptheta) + 0 * sin(Ptheta) + Py;
						End[2] = Ptheta;
					}
					else
					{
						End[0] = Px;
						End[1] = Py;
						End[2] = Ptheta;
					}
				}
				else
				{
					double Px = (P1x_img + P2x_img) / 2 + vehicle_parameters.LB * cos(Ptheta);
					double Py = (P1y_img + P2y_img) / 2 + vehicle_parameters.LB * sin(Ptheta);
					if ((Ptheta-Start[2]) > 0.01745*theta_fabs_point)
					{
						End[0] = 0 * cos(Ptheta) + D_fabs_point * sin(Ptheta) + Px;
						End[1] = -D_fabs_point * cos(Ptheta) + 0 * sin(Ptheta) + Py;
						End[2] = Ptheta;
					}
					else if ((Ptheta-Start[2]) < -0.01745*theta_fabs_point)
					{
						End[0] = 0 * cos(Ptheta) - D_fabs_point * sin(Ptheta) + Px;
						End[1] = D_fabs_point * cos(Ptheta) + 0 * sin(Ptheta) + Py;
						End[2] = Ptheta;
					}
					else
					{
						End[0] = Px;
						End[1] = Py;
						End[2] = Ptheta;
					}
				}
				
			}

			PathLong = (Start[0] - End[0]) * (Start[0] - End[0]) + (Start[1] - End[1]) * (Start[1] - End[1]);

			if ((PathLong < 16) && (PathLong > 9) && (PathOnlyOneNow == 1) && (PlanOnlyOne < 2))
			{
				PlanOnlyOne = PlanOnlyOne + 1;
			}
		}

		if ((fabs(Start[0]) < 12.5) && (fabs(Start[1]) < 12.5) && (fabs(End[0]) < 12.5) && (fabs(End[1]) < 12.5))
		{
			return 0;
		}
		else
		{
			PlanOnlyOne = 0;
			return 1;
		}
	}
	else
	{
		PlanOnlyOne = 0;
		return 1;
	}
}

int imagmap_get()
{
	if (((fusion.position.Heading >= 0) && (fusion.position.Heading <= 360)) && ((calculation.nav_heading >= 0) && (calculation.nav_heading <= 360)))
	{
		// 垂直车位
		if (fusion.parkingSpaceInfo.ParkingSpaceType == 1)
		{
			if (app.APA_Park_Function == 1)
			{
				// 车尾泊入
				if (fusion.ParkInMode != 1)
				{

					double vir_x;
					double vir_y;
					for (int map_index = 0; map_index < MAP_INDEX; map_index++)
					{
						vir_x = map_image_x[map_index] * cos(End[2]) - map_image_y[map_index] * sin(End[2]) + End[0];
						vir_y = map_image_y[map_index] * cos(End[2]) + map_image_x[map_index] * sin(End[2]) + End[1];
						int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
						int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
						if (idx_x == 0)
						{
							idx_x = 1;
						}
						if (idx_y == 0)
						{
							idx_y = 1;
						}
						int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
						if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
						{
							if (obstmap[index_xy].Status == 2)
							{
								obstmap[index_xy].Status = 3;
							}
						}
					}
					////////////////起始位置如果有虚拟障碍物就不要/////////////////////
					for (int map_index = 0; map_index < Car_idx; map_index++)
					{
						vir_x = Car_x[map_index] * cos(Start[2]) - Car_y[map_index] * sin(Start[2]) + Start[0];
						vir_y = Car_y[map_index] * cos(Start[2]) + Car_x[map_index] * sin(Start[2]) + Start[1];
						int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
						int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
						if (idx_x == 0)
						{
							idx_x = 1;
						}
						if (idx_y == 0)
						{
							idx_y = 1;
						}
						int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
						if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
						{
							obstmap[index_xy].Status = 5;
						}
					}
					/////////////////////////////////////////////////////////////////////////
					for (int map_vertical_index = 0; map_vertical_index < MAP_vertical_INDEX; map_vertical_index++)
					{
						vir_x = map_image_vertical_x[map_vertical_index] * cos(End[2]) - map_image_vertical_y[map_vertical_index] * sin(End[2]) + End[0];
						vir_y = map_image_vertical_y[map_vertical_index] * cos(End[2]) + map_image_vertical_x[map_vertical_index] * sin(End[2]) + End[1];
						int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
						int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
						if (idx_x == 0)
						{
							idx_x = 1;
						}
						if (idx_y == 0)
						{
							idx_y = 1;
						}
						int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
						if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
						{
							if (obstmap[index_xy].Status == 5)
							{
								no_imag_map = 1;
								double SE_Usspark = (Start[0] - End[0]) * (Start[0] - End[0]) + (Start[1] - End[1]) * (Start[1] - End[1]);
								if (SE_Usspark < 2.25)
								{
									for (int Uss_start_index = 0; Uss_start_index < 2; Uss_start_index++)
									{
										int control_ob = 7 + Uss_start_index;
										double Uss_x = upa_x[control_ob];
										double Uss_y = upa_y[control_ob];
										double vir_x_;
										double vir_y_;
										vir_x_ = Uss_x * cos(Start[2]) - Uss_y * sin(Start[2]) + Start[0];
										vir_y_ = Uss_y * cos(Start[2]) + Uss_x * sin(Start[2]) + Start[1];
										int idx_x_ = ceil((pathfind_parameters.MAXX - vir_x_) / pathfind_parameters.MOTION_RESOLUTION);
										int idx_y_ = ceil((pathfind_parameters.MAXY - vir_y_) / pathfind_parameters.MOTION_RESOLUTION);
										if (idx_x_ == 0)
										{
											idx_x_ = 1;
										}
										if (idx_y_ == 0)
										{
											idx_y_ = 1;
										}
										int index_xy_ = (idx_x_ - 1) * 250 + (idx_y_ - 1);
										if ((index_xy_ >= 0) && (index_xy_ < 62500) && (idx_x_ >= 0) && (idx_x_ <= 250) && (idx_y_ >= 0) && (idx_y_ <= 250))
										{
											obstmap[index_xy_].Status = 4;
										}
									}
								}
							}
							else if (obstmap[index_xy].Status != 0)
							{
								obstmap[index_xy].Status = 3;
							}
							//obstmap[index_xy].Status = 3;
						}
					}
				}
				// 车头泊入
				else
				{
					double vir_x;
					double vir_y;
					for (int map_index = 0; map_index < MAP_INDEX; map_index++)
					{
						vir_x = (-1 * map_image_x[map_index] + 2.792) * cos(End[2]) - map_image_y[map_index] * sin(End[2]) + End[0];
						vir_y = map_image_y[map_index] * cos(End[2]) + (-1 * map_image_x[map_index] + 2.792) * sin(End[2]) + End[1];
						int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
						int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
						if (idx_x == 0)
						{
							idx_x = 1;
						}
						if (idx_y == 0)
						{
							idx_y = 1;
						}
						int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
						if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
						{
							if (obstmap[index_xy].Status == 2)
							{
								obstmap[index_xy].Status = 3;
							}
						}
					}
				}
			}
			
		}
		// 水平车位
		else if (fusion.parkingSpaceInfo.ParkingSpaceType == 2)
		{
			if ((app.APA_Park_Function == 1)|| (app.APA_Park_Function == 3))
			{
				double P_mean_x = (P0x + P1x + P2x + P3x) / 4;
				double P_mean_y = (P0y + P1y + P2y + P3y) / 4;

				double D_P1_mean = sqrt((P_mean_x - P1x)*(P_mean_x - P1x) + (P_mean_y - P1y)*(P_mean_y - P1y));
				double D_P2_mean = sqrt((P_mean_x - P2x)*(P_mean_x - P2x) + (P_mean_y - P2y)*(P_mean_y - P2y));
				if ((D_P1_mean < 0.1) && (D_P2_mean < 0.1))
				{
					return 1;
				}
				double cos_theta_P1 = (P_mean_x - P1x) / D_P1_mean;
				double sin_theta_P1 = (P_mean_y - P1y) / D_P1_mean;
				double cos_theta_P2 = (P_mean_x - P2x) / D_P2_mean;
				double sin_theta_P2 = (P_mean_y - P2y) / D_P2_mean;
				double P1x_imag = P_mean_x - (D_P1_mean + 1) * cos_theta_P1;
				double P1y_imag = P_mean_y - (D_P1_mean + 1) * sin_theta_P1;
				double P2x_imag = P_mean_x - (D_P2_mean + 1) * cos_theta_P2;
				double P2y_imag = P_mean_y - (D_P2_mean + 1) * sin_theta_P2;
				double D_P12_imag = sqrt((P1x_imag - P2x_imag)*(P1x_imag - P2x_imag) + (P1y_imag - P2y_imag)*(P1y_imag - P2y_imag));
				if (D_P12_imag < 0.1)
				{
					return 1;
				}
				double cos_theta_P12imag = (P2x_imag - P1x_imag) / D_P12_imag;
				double sin_theta_P12imag = (P2y_imag - P1y_imag) / D_P12_imag;
				int index_imag_P12 = ceil(D_P12_imag / 0.025);

				int idx_x;
				int idx_y;
				int index_xy;
				double vir_x;
				double vir_y;
				////////////////起始位置如果有虚拟障碍物就不要/////////////////////
				for (int map_index = 0; map_index < Car_idx; map_index++)
				{
					vir_x = Car_x[map_index] * cos(Start[2]) - Car_y[map_index] * sin(Start[2]) + Start[0];
					vir_y = Car_y[map_index] * cos(Start[2]) + Car_x[map_index] * sin(Start[2]) + Start[1];
					idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
					idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
					if (idx_x == 0)
					{
						idx_x = 1;
					}
					if (idx_y == 0)
					{
						idx_y = 1;
					}
					int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
					if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
					{
						obstmap[index_xy].Status = 5;
					}
				}
				/////////////////////////////////////////////////////////////////////
				idx_x = ceil((pathfind_parameters.MAXX - P1x_imag) / pathfind_parameters.MOTION_RESOLUTION);
				idx_y = ceil((pathfind_parameters.MAXY - P1y_imag) / pathfind_parameters.MOTION_RESOLUTION);
				if (idx_x == 0)
				{
					idx_x = 1;
				}
				if (idx_y == 0)
				{
					idx_y = 1;
				}
				index_xy = (idx_x - 1) * 250 + (idx_y - 1);
				if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
				{
					if (obstmap[index_xy].Status == 5)
					{
						no_imag_map = 1;
					}
					else if (obstmap[index_xy].Status != 0)
					{
						obstmap[index_xy].Status = 3;
					}
					//obstmap[index_xy].Status = 3;
				}

				idx_x = ceil((pathfind_parameters.MAXX - P2x_imag) / pathfind_parameters.MOTION_RESOLUTION);
				idx_y = ceil((pathfind_parameters.MAXY - P2y_imag) / pathfind_parameters.MOTION_RESOLUTION);
				if (idx_x == 0)
				{
					idx_x = 1;
				}
				if (idx_y == 0)
				{
					idx_y = 1;
				}
				index_xy = (idx_x - 1) * 250 + (idx_y - 1);
				if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
				{
					if (obstmap[index_xy].Status == 5)
					{
						no_imag_map = 1;
					}
					else if (obstmap[index_xy].Status != 0)
					{
						obstmap[index_xy].Status = 3;
					}
					//obstmap[index_xy].Status = 3;
				}

				if (index_imag_P12 >= 1)
				{
					double P12x_imag[65] = { 0 };
					double P12y_imag[65] = { 0 };
					double IDX = 65;
					if (End[1] > 0)
					{
						for (int idx_p12=0; idx_p12<65; idx_p12++)
						{
							P12x_imag[idx_p12] = -1.8 + idx_p12 * 0.1;
							P12y_imag[idx_p12] = 1.6;
						}
					}
					else if (End[1] < 0)
					{
						for (int idx_p12 = 0; idx_p12<65; idx_p12++)
						{
							P12x_imag[idx_p12] = -1.8 + idx_p12 * 0.1;
							P12y_imag[idx_p12] = -1.6;
						}
					}
					else
					{
						IDX = 0;
					}
					for (int idx = 0; idx < IDX; idx++)
					{
						//vir_x = P1x_imag + idx * 0.025 * cos_theta_P12imag;
						//vir_y = P1y_imag + idx * 0.025 * sin_theta_P12imag;

						vir_x = P12x_imag[idx] * cos(End[2]) - P12y_imag[idx] * sin(End[2]) + End[0];
						vir_y = P12y_imag[idx] * cos(End[2]) + P12x_imag[idx] * sin(End[2]) + End[1];
						idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
						idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
						if (idx_x == 0)
						{
							idx_x = 1;
						}
						if (idx_y == 0)
						{
							idx_y = 1;
						}
						index_xy = (idx_x - 1) * 250 + (idx_y - 1);
						if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
						{
							if (obstmap[index_xy].Status == 5)
							{
								no_imag_map = 1;
							}
							else if (obstmap[index_xy].Status != 0)
							{
								obstmap[index_xy].Status = 3;
							}
							//obstmap[index_xy].Status = 3;
						}
					}
				}

				double D_P01_imag = sqrt((P1x - P0x)*(P1x - P0x) + (P1y - P0y)*(P1y - P0y));
				if (D_P01_imag < 0.1)
				{
					return 1;
				}
				double cos_theta_P01imag = (P1x - P0x) / D_P01_imag;
				double sin_theta_P01imag = (P1y - P0y) / D_P01_imag;
				int index_imag_P01 = ceil(D_P01_imag / 0.3);
				/*if (index_imag_P01 >= 1)
				{
					for (int idx = 1; idx < index_imag_P01; idx++)
					{
						vir_x = P0x + idx * 0.3 * cos_theta_P01imag;
						vir_y = P0y + idx * 0.3 * sin_theta_P01imag;
						idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
						idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
						if (idx_x == 0)
						{
							idx_x = 1;
						}
						if (idx_y == 0)
						{
							idx_y = 1;
						}
						index_xy = (idx_x - 1) * 250 + (idx_y - 1);
						if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
						{
							if (obstmap[index_xy].Status == 2)
							{
								obstmap[index_xy].Status = 3;
							}
						}
					}
				}*/
				double level_x_imagend[9] = { -2.1,-2.1,-2.1,-2.1,-2.1,-2.1,-2.1,-2.1,-2.1 };
				double level_y_imagend[9] = { -1,-0.75,-0.5,-0.25,0,0.25,0.5,0.75,1 };
				int imagend_idx = 9;
				
				for (int map_index = 0; map_index < imagend_idx; map_index++)
				{
					vir_x = level_x_imagend[map_index] * cos(End[2]) - level_y_imagend[map_index] * sin(End[2]) + End[0];
					vir_y = level_y_imagend[map_index] * cos(End[2]) + level_x_imagend[map_index] * sin(End[2]) + End[1];
					int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
					int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
					if (idx_x == 0)
					{
						idx_x = 1;
					}
					if (idx_y == 0)
					{
						idx_y = 1;
					}
					int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
					if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
					{
						if (obstmap[index_xy].Status == 2)
						{
							obstmap[index_xy].Status = 3;
						}
					}
				}

				double D_P23_imag = sqrt((P2x - P3x)*(P2x - P3x) + (P2y - P3y)*(P2y - P3y));
				if (D_P23_imag < 0.1)
				{
					return 1;
				}
				double cos_theta_P23imag = (P3x - P2x) / D_P23_imag;
				double sin_theta_P23imag = (P3y - P2y) / D_P23_imag;
				int index_imag_P23 = ceil(D_P23_imag / 0.3);
				if (index_imag_P23 >= 1)
				{
					for (int idx = 1; idx < index_imag_P23; idx++)
					{
						vir_x = P2x + idx * 0.3 * cos_theta_P23imag;
						vir_y = P2y + idx * 0.3 * sin_theta_P23imag;
						idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
						idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
						if (idx_x == 0)
						{
							idx_x = 1;
						}
						if (idx_y == 0)
						{
							idx_y = 1;
						}
						index_xy = (idx_x - 1) * 250 + (idx_y - 1);
						if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
						{
							if (obstmap[index_xy].Status == 2)
							{
								obstmap[index_xy].Status = 3;
							}
						}
					}
				}
			}
		}
		// 斜车位
		else
		{
			if (app.APA_Park_Function == 1)
			{
				double P_mean_x = (P0x + P1x + P2x + P3x) / 4;
				double P_mean_y = (P0y + P1y + P2y + P3y) / 4;

				int idx_x;
				int idx_y;
				int index_xy;
				double vir_x;
				double vir_y;

				double D_P03 = sqrt((P0x - P3x) * (P0x - P3x) + (P0y - P3y) * (P0y - P3y));
				double D_P12 = sqrt((P1x - P2x) * (P1x - P2x) + (P1y - P2y) * (P1y - P2y));
				double Diff_xP03 = P3x - P0x;
				double Diff_yP03 = P3y - P0y;
				double Diff_xP12 = P2x - P1x;
				double Diff_yP12 = P2y - P1y;
				if ((D_P03 < 0.1) || (D_P12 < 0.1))
				{
					return 1;
				}
				double cos_P03 = Diff_xP03 / D_P03;
				double sin_P03 = Diff_yP03 / D_P03;
				double P0x_imag = P0x - 0.5 * cos_P03;
				double P0y_imag = P0y - 0.5 * sin_P03;
				double P3x_imag = P3x + 0.5 * cos_P03;
				double P3y_imag = P3y + 0.5 * sin_P03;

				double D_P1_mean = sqrt((P_mean_x - P1x)*(P_mean_x - P1x) + (P_mean_y - P1y)*(P_mean_y - P1y));
				double D_P2_mean = sqrt((P_mean_x - P2x)*(P_mean_x - P2x) + (P_mean_y - P2y)*(P_mean_y - P2y));
				if ((D_P1_mean < 0.1) && (D_P2_mean < 0.1))
				{
					return 1;
				}
				double cos_theta_P1 = (P_mean_x - P1x) / D_P1_mean;
				double sin_theta_P1 = (P_mean_y - P1y) / D_P1_mean;
				double cos_theta_P2 = (P_mean_x - P2x) / D_P2_mean;
				double sin_theta_P2 = (P_mean_y - P2y) / D_P2_mean;
				double P1x_imag = P_mean_x - (D_P1_mean + 2) * cos_theta_P1;
				double P1y_imag = P_mean_y - (D_P1_mean + 2) * sin_theta_P1;
				double P2x_imag = P_mean_x - (D_P2_mean + 2) * cos_theta_P2;
				double P2y_imag = P_mean_y - (D_P2_mean + 2) * sin_theta_P2;

				double cos_P12 = Diff_xP12 / D_P12;
				double sin_P12 = Diff_yP12 / D_P12;
				//double P1x_imag = P1x - 0.5 * cos_P12;
				//double P1x_imag = P1y - 0.5 * sin_P12;
				//double P2x_imag = P2x + 0.5 * cos_P12;
				//double P2x_imag = P2y + 0.5 * sin_P12;
				////////////////起始位置如果有虚拟障碍物就不要/////////////////////
				for (int map_index = 0; map_index < Car_idx; map_index++)
				{
					vir_x = Car_x[map_index] * cos(Start[2]) - Car_y[map_index] * sin(Start[2]) + Start[0];
					vir_y = Car_y[map_index] * cos(Start[2]) + Car_x[map_index] * sin(Start[2]) + Start[1];
					int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
					int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
					if (idx_x == 0)
					{
						idx_x = 1;
					}
					if (idx_y == 0)
					{
						idx_y = 1;
					}
					int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
					if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
					{
						obstmap[index_xy].Status = 5;
					}
				}
				/////////////////////////////////////////////////////////////////////////
				for (int map_vertical_index = 0; map_vertical_index < MAP_vertical_INDEX; map_vertical_index++)
				{
					vir_x = map_image_vertical_x[map_vertical_index] * cos(End[2]) - map_image_vertical_y[map_vertical_index] * sin(End[2]) + End[0];
					vir_y = map_image_vertical_y[map_vertical_index] * cos(End[2]) + map_image_vertical_x[map_vertical_index] * sin(End[2]) + End[1];
					int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
					int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
					if (idx_x == 0)
					{
						idx_x = 1;
					}
					if (idx_y == 0)
					{
						idx_y = 1;
					}
					int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
					if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
					{
						if (obstmap[index_xy].Status == 5)
						{
							no_imag_map = 1;
							double SE_Usspark = (Start[0] - End[0]) * (Start[0] - End[0]) + (Start[1] - End[1]) * (Start[1] - End[1]);
							if (SE_Usspark < 2.25)
							{
								for (int Uss_start_index = 0; Uss_start_index < 2; Uss_start_index++)
								{
									int control_ob = 7 + Uss_start_index;
									double Uss_x = upa_x[control_ob];
									double Uss_y = upa_y[control_ob];
									double vir_x_;
									double vir_y_;
									vir_x_ = Uss_x * cos(Start[2]) - Uss_y * sin(Start[2]) + Start[0];
									vir_y_ = Uss_y * cos(Start[2]) + Uss_x * sin(Start[2]) + Start[1];
									int idx_x_ = ceil((pathfind_parameters.MAXX - vir_x_) / pathfind_parameters.MOTION_RESOLUTION);
									int idx_y_ = ceil((pathfind_parameters.MAXY - vir_y_) / pathfind_parameters.MOTION_RESOLUTION);
									if (idx_x_ == 0)
									{
										idx_x_ = 1;
									}
									if (idx_y_ == 0)
									{
										idx_y_ = 1;
									}
									int index_xy_ = (idx_x_ - 1) * 250 + (idx_y_ - 1);
									if ((index_xy_ >= 0) && (index_xy_ < 62500) && (idx_x_ >= 0) && (idx_x_ <= 250) && (idx_y_ >= 0) && (idx_y_ <= 250))
									{
										obstmap[index_xy_].Status = 4;
									}
								}
							}
						}
						else if (obstmap[index_xy].Status != 0)
						{
							obstmap[index_xy].Status = 3;
						}
						//obstmap[index_xy].Status = 3;
					}
				}

				for (int idx = 1; idx < 50; idx++)
				{
					vir_x = P3x_imag + idx * 0.3 * cos_P03;
					vir_y = P3y_imag + idx * 0.3 * sin_P03;
					idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
					idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
					if (idx_x == 0)
					{
						idx_x = 1;
					}
					if (idx_y == 0)
					{
						idx_y = 1;
					}
					index_xy = (idx_x - 1) * 250 + (idx_y - 1);
					if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
					{
						if (obstmap[index_xy].Status == 2)
						{
							obstmap[index_xy].Status = 3;
						}
					}
				}
				for (int idx = 1; idx < 50; idx++)
				{
					vir_x = P0x_imag - idx * 0.3 * cos_P03;
					vir_y = P0y_imag - idx * 0.3 * sin_P03;
					idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
					idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
					if (idx_x == 0)
					{
						idx_x = 1;
					}
					if (idx_y == 0)
					{
						idx_y = 1;
					}
					index_xy = (idx_x - 1) * 250 + (idx_y - 1);
					if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
					{
						if (obstmap[index_xy].Status == 2)
						{
							obstmap[index_xy].Status = 3;
						}
					}
				}

				double D_imag_12 = sqrt((P1x_imag - P2x_imag) * (P1x_imag - P2x_imag) + (P1y_imag - P2y_imag) * (P1y_imag - P2y_imag));
				int idx_imag_12 = ceil(D_imag_12 / 0.025);
				if (idx_imag_12 > 0)
				{
					for (int idx = 0; idx < idx_imag_12; idx++)
					{
						vir_x = P1x_imag + idx * 0.025 * cos_P12;
						vir_y = P1y_imag + idx * 0.025 * sin_P12;
						idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
						idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
						if (idx_x == 0)
						{
							idx_x = 1;
						}
						if (idx_y == 0)
						{
							idx_y = 1;
						}
						index_xy = (idx_x - 1) * 250 + (idx_y - 1);
						if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
						{
							if (obstmap[index_xy].Status == 5)
							{
								no_imag_map = 1;
								double SE_Usspark = (Start[0] - End[0]) * (Start[0] - End[0]) + (Start[1] - End[1]) * (Start[1] - End[1]);
								if (SE_Usspark < 2.25)
								{
									for (int Uss_start_index = 0; Uss_start_index < 2; Uss_start_index++)
									{
										int control_ob = 7 + Uss_start_index;
										double Uss_x = upa_x[control_ob];
										double Uss_y = upa_y[control_ob];
										double vir_x_;
										double vir_y_;
										vir_x_ = Uss_x * cos(Start[2]) - Uss_y * sin(Start[2]) + Start[0];
										vir_y_ = Uss_y * cos(Start[2]) + Uss_x * sin(Start[2]) + Start[1];
										int idx_x_ = ceil((pathfind_parameters.MAXX - vir_x_) / pathfind_parameters.MOTION_RESOLUTION);
										int idx_y_ = ceil((pathfind_parameters.MAXY - vir_y_) / pathfind_parameters.MOTION_RESOLUTION);
										if (idx_x_ == 0)
										{
											idx_x_ = 1;
										}
										if (idx_y_ == 0)
										{
											idx_y_ = 1;
										}
										int index_xy_ = (idx_x_ - 1) * 250 + (idx_y_ - 1);
										if ((index_xy_ >= 0) && (index_xy_ < 62500) && (idx_x_ >= 0) && (idx_x_ <= 250) && (idx_y_ >= 0) && (idx_y_ <= 250))
										{
											obstmap[index_xy_].Status = 4;
										}
									}
								}
							}
							else if (obstmap[index_xy].Status != 0)
							{
								obstmap[index_xy].Status = 3;
							}
							//obstmap[index_xy].Status = 3;
						}

					}

				}

				double cos_theta_add = -sin_P03;
				double sin_theta_add = cos_P03;
				double cos_theta_diff = sin_P03;
				double sin_theta_diff = -cos_P03;
				double P0x_towards_1 = P0x + 5 * cos_theta_add;
				double P0y_towards_1 = P0y + 5 * sin_theta_add;
				double P0x_towards_2 = P0x + 5 * cos_theta_diff;
				double P0y_towards_2 = P0y + 5 * sin_theta_diff;
				double D_add = sqrt((P0x_towards_1 - End[0])*(P0x_towards_1 - End[0]) + (P0y_towards_1 - End[1])*(P0y_towards_1 - End[1]));
				double D_diff = sqrt((P0x_towards_2 - End[0])*(P0x_towards_2 - End[0]) + (P0y_towards_2 - End[1])*(P0y_towards_2 - End[1]));
				double P0x_towards = 0;
				double P0y_towards = 0;
				if (D_add > D_diff)
				{
					P0x_towards = P0x_towards_1;
					P0y_towards = P0y_towards_1;
				}
				else
				{
					P0x_towards = P0x_towards_2;
					P0y_towards = P0y_towards_2;
				}
				for (int idx = 0; idx < 80; idx++)
				{
					vir_x = P0x_towards + idx * 0.3 * cos_P03;
					vir_y = P0y_towards + idx * 0.3 * sin_P03;
					idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
					idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
					if (idx_x == 0)
					{
						idx_x = 1;
					}
					if (idx_y == 0)
					{
						idx_y = 1;
					}
					index_xy = (idx_x - 1) * 250 + (idx_y - 1);
					if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
					{
						if (obstmap[index_xy].Status == 2)
						{
							obstmap[index_xy].Status = 3;
						}
					}
				}
				for (int idx = 1; idx < 80; idx++)
				{
					vir_x = P0x_towards - idx * 0.3 * cos_P03;
					vir_y = P0y_towards - idx * 0.3 * sin_P03;
					idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
					idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
					if (idx_x == 0)
					{
						idx_x = 1;
					}
					if (idx_y == 0)
					{
						idx_y = 1;
					}
					index_xy = (idx_x - 1) * 250 + (idx_y - 1);
					if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
					{
						if (obstmap[index_xy].Status == 2)
						{
							obstmap[index_xy].Status = 3;
						}
					}
				}

				double D_P01_imag = sqrt((P1x_imag - P0x_imag)*(P1x_imag - P0x_imag) + (P1y_imag - P0y_imag)*(P1y_imag - P0y_imag));
				if (D_P01_imag < 0.1)
				{
					return 1;
				}
				double cos_theta_P01imag = (P1x_imag - P0x_imag) / D_P01_imag;
				double sin_theta_P01imag = (P1y_imag - P0y_imag) / D_P01_imag;
				int index_imag_P01 = ceil(D_P01_imag / 0.3);
				if (index_imag_P01 >= 1)
				{
					for (int idx = 1; idx < index_imag_P01; idx++)
					{
						vir_x = P0x_imag + idx * 0.3 * cos_theta_P01imag;
						vir_y = P0y_imag + idx * 0.3 * sin_theta_P01imag;
						idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
						idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
						if (idx_x == 0)
						{
							idx_x = 1;
						}
						if (idx_y == 0)
						{
							idx_y = 1;
						}
						index_xy = (idx_x - 1) * 250 + (idx_y - 1);
						if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
						{
							if (obstmap[index_xy].Status == 2)
							{
								obstmap[index_xy].Status = 3;
							}
						}
					}
				}

				double D_P23_imag = sqrt((P2x_imag - P3x_imag)*(P2x_imag - P3x_imag) + (P2y_imag - P3y_imag)*(P2y_imag - P3y_imag));
				if (D_P23_imag < 0.1)
				{
					return 1;
				}
				double cos_theta_P23imag = (P3x_imag - P2x_imag) / D_P23_imag;
				double sin_theta_P23imag = (P3y_imag - P2y_imag) / D_P23_imag;
				int index_imag_P23 = ceil(D_P23_imag / 0.3);
				if (index_imag_P23 >= 1)
				{
					for (int idx = 1; idx < index_imag_P23; idx++)
					{
						vir_x = P2x_imag + idx * 0.3 * cos_theta_P23imag;
						vir_y = P2y_imag + idx * 0.3 * sin_theta_P23imag;
						idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
						idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
						if (idx_x == 0)
						{
							idx_x = 1;
						}
						if (idx_y == 0)
						{
							idx_y = 1;
						}
						index_xy = (idx_x - 1) * 250 + (idx_y - 1);
						if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
						{
							if (obstmap[index_xy].Status == 2)
							{
								obstmap[index_xy].Status = 3;
							}
						}
					}
				}
			}	
		}

		return 0;
	}
	else
	{
		return 1;
	}
}

void delete_map()
{
	double vir_x;
	double vir_y;
	

	if ((fusion.parkingSpaceInfo.ParkingSpaceType == 1) || (fusion.parkingSpaceInfo.ParkingSpaceType == 3))
	{	
		// yanzichen 20231107
		for (int i = 0; i < 250; i++) {
			for (int j = 0; j < 250; j++) {
				if (obstmap[i * 250 + j].Status == 0)
				{
					int dir1 = i * 250 + j + 1;
					int dir2 = i * 250 + j - 1;
					int dir3 = (i + 1) * 250 + j;
					int dir4 = (i - 1) * 250 + j;
					int dir5 = (i + 1) * 250 + j + 1;
					int dir6 = (i + 1) * 250 + j - 1;
					int dir7 = (i - 1) * 250 + j + 1;
					int dir8 = (i - 1) * 250 + j - 1;

					if (dir1 >= 0 && dir1 < 62500 && obstmap[dir1].Status != 0)
					{
						obstmap[dir1].Status = 3;
					}
					if (dir2 >= 0 && dir2 < 62500 && obstmap[dir2].Status != 0)
					{
						obstmap[dir2].Status = 3;
					}
					if (dir3 >= 0 && dir3 < 62500 && obstmap[dir3].Status != 0)
					{
						obstmap[dir3].Status = 3;
					}
					if (dir4 >= 0 && dir4 < 62500 && obstmap[dir4].Status != 0)
					{
						obstmap[dir4].Status = 3;
					}
					if (dir5 >= 0 && dir5 < 62500 && obstmap[dir5].Status != 0)
					{
						obstmap[dir5].Status = 3;
					}
					if (dir6 >= 0 && dir6 < 62500 && obstmap[dir6].Status != 0)
					{
						obstmap[dir6].Status = 3;
					}
					if (dir7 >= 0 && dir7 < 62500 && obstmap[dir7].Status != 0)
					{
						obstmap[dir7].Status = 3;
					}
					if (dir8 >= 0 && dir8 < 62500 && obstmap[dir8].Status != 0)
					{
						obstmap[dir8].Status = 3;
					}
				}
			}
		}

		for (int map_index = 0; map_index < park0_y_imag1_INDEX; map_index++)
		{
			vir_x = park0_x_imag1[map_index] * cos(End[2]) - park0_y_imag1[map_index] * sin(End[2]) + End[0];
			vir_y = park0_y_imag1[map_index] * cos(End[2]) + park0_x_imag1[map_index] * sin(End[2]) + End[1];
			int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
			int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
			if (idx_x == 0)
			{
				idx_x = 1;
			}
			if (idx_y == 0)
			{
				idx_y = 1;
			}
			int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
			if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
			{
				obstmap[index_xy].Status = 5;
			}
		}
	}
	else if (fusion.parkingSpaceInfo.ParkingSpaceType == 2)
	{
		for (int map_index = 0; map_index < park0_y_imag2_INDEX; map_index++)
		{
			vir_x = park0_x_imag2[map_index] * cos(End[2]) - park0_y_imag2[map_index] * sin(End[2]) + End[0];
			vir_y = park0_y_imag2[map_index] * cos(End[2]) + park0_x_imag2[map_index] * sin(End[2]) + End[1];
			int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
			int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
			if (idx_x == 0)
			{
				idx_x = 1;
			}
			if (idx_y == 0)
			{
				idx_y = 1;
			}
			int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
			if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
			{
				obstmap[index_xy].Status = 5;
			}
		}
	}

	for (int map_index = 0; map_index < Car_idx; map_index++)
	{
		vir_x = Car_x[map_index] * cos(Start[2]) - Car_y[map_index] * sin(Start[2]) + Start[0];
		vir_y = Car_y[map_index] * cos(Start[2]) + Car_x[map_index] * sin(Start[2]) + Start[1];
		int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
		int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
		if (idx_x == 0)
		{
			idx_x = 1;
		}
		if (idx_y == 0)
		{
			idx_y = 1;
		}
		int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
		if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
		{
			obstmap[index_xy].Status = 5;
		}
	}

	for (int map_index = 0; map_index < Car_idx; map_index++)
	{
		vir_x = Car_x[map_index] * cos(End[2]) - Car_y[map_index] * sin(End[2]) + End[0];
		vir_y = Car_y[map_index] * cos(End[2]) + Car_x[map_index] * sin(End[2]) + End[1];
		int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
		int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
		if (idx_x == 0)
		{
			idx_x = 1;
		}
		if (idx_y == 0)
		{
			idx_y = 1;
		}
		int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
		if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
		{
			obstmap[index_xy].Status = 5;
		}
	}

	if (fusion.parkingSpaceInfo.ParkingSpaceType == 2)
	{
		double level_map_check_back_x[405] = {};
		double level_map_check_back_y[405] = { -1.20000000000000,-1.17000000000000,-1.14000000000000,-1.11000000000000,-1.08000000000000,-1.05000000000000,-1.02000000000000,-0.990000000000000,-0.960000000000000,-0.930000000000000,-0.900000000000000,-0.870000000000000,-0.840000000000000,-0.810000000000000,-0.780000000000000,-0.750000000000000,-0.720000000000000,-0.690000000000000,-0.660000000000000,-0.630000000000000,-0.600000000000000,-0.570000000000000,-0.540000000000000,-0.510000000000000,-0.480000000000000,-0.450000000000000,-0.420000000000000,-0.390000000000000,-0.360000000000000,-0.330000000000000,-0.300000000000000,-0.270000000000000,-0.240000000000000,-0.210000000000000,-0.180000000000000,-0.150000000000000,-0.120000000000000,-0.0900000000000001,-0.0600000000000001,-0.0300000000000000,0,0.0300000000000000,0.0600000000000001,0.0900000000000001,0.120000000000000,0.150000000000000,0.180000000000000,0.210000000000000,0.240000000000000,0.270000000000000,0.300000000000000,0.330000000000000,0.360000000000000,0.390000000000000,0.420000000000000,0.450000000000000,0.480000000000000,0.510000000000000,0.540000000000000,0.570000000000000,0.600000000000000,0.630000000000000,0.660000000000000,0.690000000000000,0.720000000000000,0.750000000000000,0.780000000000000,0.810000000000000,0.840000000000000,0.870000000000000,0.900000000000000,0.930000000000000,0.960000000000000,0.990000000000000,1.02000000000000,1.05000000000000,1.08000000000000,1.11000000000000,1.14000000000000,1.17000000000000,1.20000000000000,-1.20000000000000,-1.17000000000000,-1.14000000000000,-1.11000000000000,-1.08000000000000,-1.05000000000000,-1.02000000000000,-0.990000000000000,-0.960000000000000,-0.930000000000000,-0.900000000000000,-0.870000000000000,-0.840000000000000,-0.810000000000000,-0.780000000000000,-0.750000000000000,-0.720000000000000,-0.690000000000000,-0.660000000000000,-0.630000000000000,-0.600000000000000,-0.570000000000000,-0.540000000000000,-0.510000000000000,-0.480000000000000,-0.450000000000000,-0.420000000000000,-0.390000000000000,-0.360000000000000,-0.330000000000000,-0.300000000000000,-0.270000000000000,-0.240000000000000,-0.210000000000000,-0.180000000000000,-0.150000000000000,-0.120000000000000,-0.0900000000000001,-0.0600000000000001,-0.0300000000000000,0,0.0300000000000000,0.0600000000000001,0.0900000000000001,0.120000000000000,0.150000000000000,0.180000000000000,0.210000000000000,0.240000000000000,0.270000000000000,0.300000000000000,0.330000000000000,0.360000000000000,0.390000000000000,0.420000000000000,0.450000000000000,0.480000000000000,0.510000000000000,0.540000000000000,0.570000000000000,0.600000000000000,0.630000000000000,0.660000000000000,0.690000000000000,0.720000000000000,0.750000000000000,0.780000000000000,0.810000000000000,0.840000000000000,0.870000000000000,0.900000000000000,0.930000000000000,0.960000000000000,0.990000000000000,1.02000000000000,1.05000000000000,1.08000000000000,1.11000000000000,1.14000000000000,1.17000000000000,1.20000000000000,-1.20000000000000,-1.17000000000000,-1.14000000000000,-1.11000000000000,-1.08000000000000,-1.05000000000000,-1.02000000000000,-0.990000000000000,-0.960000000000000,-0.930000000000000,-0.900000000000000,-0.870000000000000,-0.840000000000000,-0.810000000000000,-0.780000000000000,-0.750000000000000,-0.720000000000000,-0.690000000000000,-0.660000000000000,-0.630000000000000,-0.600000000000000,-0.570000000000000,-0.540000000000000,-0.510000000000000,-0.480000000000000,-0.450000000000000,-0.420000000000000,-0.390000000000000,-0.360000000000000,-0.330000000000000,-0.300000000000000,-0.270000000000000,-0.240000000000000,-0.210000000000000,-0.180000000000000,-0.150000000000000,-0.120000000000000,-0.0900000000000001,-0.0600000000000001,-0.0300000000000000,0,0.0300000000000000,0.0600000000000001,0.0900000000000001,0.120000000000000,0.150000000000000,0.180000000000000,0.210000000000000,0.240000000000000,0.270000000000000,0.300000000000000,0.330000000000000,0.360000000000000,0.390000000000000,0.420000000000000,0.450000000000000,0.480000000000000,0.510000000000000,0.540000000000000,0.570000000000000,0.600000000000000,0.630000000000000,0.660000000000000,0.690000000000000,0.720000000000000,0.750000000000000,0.780000000000000,0.810000000000000,0.840000000000000,0.870000000000000,0.900000000000000,0.930000000000000,0.960000000000000,0.990000000000000,1.02000000000000,1.05000000000000,1.08000000000000,1.11000000000000,1.14000000000000,1.17000000000000,1.20000000000000,-1.20000000000000,-1.17000000000000,-1.14000000000000,-1.11000000000000,-1.08000000000000,-1.05000000000000,-1.02000000000000,-0.990000000000000,-0.960000000000000,-0.930000000000000,-0.900000000000000,-0.870000000000000,-0.840000000000000,-0.810000000000000,-0.780000000000000,-0.750000000000000,-0.720000000000000,-0.690000000000000,-0.660000000000000,-0.630000000000000,-0.600000000000000,-0.570000000000000,-0.540000000000000,-0.510000000000000,-0.480000000000000,-0.450000000000000,-0.420000000000000,-0.390000000000000,-0.360000000000000,-0.330000000000000,-0.300000000000000,-0.270000000000000,-0.240000000000000,-0.210000000000000,-0.180000000000000,-0.150000000000000,-0.120000000000000,-0.0900000000000001,-0.0600000000000001,-0.0300000000000000,0,0.0300000000000000,0.0600000000000001,0.0900000000000001,0.120000000000000,0.150000000000000,0.180000000000000,0.210000000000000,0.240000000000000,0.270000000000000,0.300000000000000,0.330000000000000,0.360000000000000,0.390000000000000,0.420000000000000,0.450000000000000,0.480000000000000,0.510000000000000,0.540000000000000,0.570000000000000,0.600000000000000,0.630000000000000,0.660000000000000,0.690000000000000,0.720000000000000,0.750000000000000,0.780000000000000,0.810000000000000,0.840000000000000,0.870000000000000,0.900000000000000,0.930000000000000,0.960000000000000,0.990000000000000,1.02000000000000,1.05000000000000,1.08000000000000,1.11000000000000,1.14000000000000,1.17000000000000,1.20000000000000,-1.20000000000000,-1.17000000000000,-1.14000000000000,-1.11000000000000,-1.08000000000000,-1.05000000000000,-1.02000000000000,-0.990000000000000,-0.960000000000000,-0.930000000000000,-0.900000000000000,-0.870000000000000,-0.840000000000000,-0.810000000000000,-0.780000000000000,-0.750000000000000,-0.720000000000000,-0.690000000000000,-0.660000000000000,-0.630000000000000,-0.600000000000000,-0.570000000000000,-0.540000000000000,-0.510000000000000,-0.480000000000000,-0.450000000000000,-0.420000000000000,-0.390000000000000,-0.360000000000000,-0.330000000000000,-0.300000000000000,-0.270000000000000,-0.240000000000000,-0.210000000000000,-0.180000000000000,-0.150000000000000,-0.120000000000000,-0.0900000000000001,-0.0600000000000001,-0.0300000000000000,0,0.0300000000000000,0.0600000000000001,0.0900000000000001,0.120000000000000,0.150000000000000,0.180000000000000,0.210000000000000,0.240000000000000,0.270000000000000,0.300000000000000,0.330000000000000,0.360000000000000,0.390000000000000,0.420000000000000,0.450000000000000,0.480000000000000,0.510000000000000,0.540000000000000,0.570000000000000,0.600000000000000,0.630000000000000,0.660000000000000,0.690000000000000,0.720000000000000,0.750000000000000,0.780000000000000,0.810000000000000,0.840000000000000,0.870000000000000,0.900000000000000,0.930000000000000,0.960000000000000,0.990000000000000,1.02000000000000,1.05000000000000,1.08000000000000,1.11000000000000,1.14000000000000,1.17000000000000,1.20000000000000 };
		double level_map_check_front_x[405] = {};
		double level_map_check_front_y[405] = { -1.20000000000000,-1.17000000000000,-1.14000000000000,-1.11000000000000,-1.08000000000000,-1.05000000000000,-1.02000000000000,-0.990000000000000,-0.960000000000000,-0.930000000000000,-0.900000000000000,-0.870000000000000,-0.840000000000000,-0.810000000000000,-0.780000000000000,-0.750000000000000,-0.720000000000000,-0.690000000000000,-0.660000000000000,-0.630000000000000,-0.600000000000000,-0.570000000000000,-0.540000000000000,-0.510000000000000,-0.480000000000000,-0.450000000000000,-0.420000000000000,-0.390000000000000,-0.360000000000000,-0.330000000000000,-0.300000000000000,-0.270000000000000,-0.240000000000000,-0.210000000000000,-0.180000000000000,-0.150000000000000,-0.120000000000000,-0.0900000000000001,-0.0600000000000001,-0.0300000000000000,0,0.0300000000000000,0.0600000000000001,0.0900000000000001,0.120000000000000,0.150000000000000,0.180000000000000,0.210000000000000,0.240000000000000,0.270000000000000,0.300000000000000,0.330000000000000,0.360000000000000,0.390000000000000,0.420000000000000,0.450000000000000,0.480000000000000,0.510000000000000,0.540000000000000,0.570000000000000,0.600000000000000,0.630000000000000,0.660000000000000,0.690000000000000,0.720000000000000,0.750000000000000,0.780000000000000,0.810000000000000,0.840000000000000,0.870000000000000,0.900000000000000,0.930000000000000,0.960000000000000,0.990000000000000,1.02000000000000,1.05000000000000,1.08000000000000,1.11000000000000,1.14000000000000,1.17000000000000,1.20000000000000,-1.20000000000000,-1.17000000000000,-1.14000000000000,-1.11000000000000,-1.08000000000000,-1.05000000000000,-1.02000000000000,-0.990000000000000,-0.960000000000000,-0.930000000000000,-0.900000000000000,-0.870000000000000,-0.840000000000000,-0.810000000000000,-0.780000000000000,-0.750000000000000,-0.720000000000000,-0.690000000000000,-0.660000000000000,-0.630000000000000,-0.600000000000000,-0.570000000000000,-0.540000000000000,-0.510000000000000,-0.480000000000000,-0.450000000000000,-0.420000000000000,-0.390000000000000,-0.360000000000000,-0.330000000000000,-0.300000000000000,-0.270000000000000,-0.240000000000000,-0.210000000000000,-0.180000000000000,-0.150000000000000,-0.120000000000000,-0.0900000000000001,-0.0600000000000001,-0.0300000000000000,0,0.0300000000000000,0.0600000000000001,0.0900000000000001,0.120000000000000,0.150000000000000,0.180000000000000,0.210000000000000,0.240000000000000,0.270000000000000,0.300000000000000,0.330000000000000,0.360000000000000,0.390000000000000,0.420000000000000,0.450000000000000,0.480000000000000,0.510000000000000,0.540000000000000,0.570000000000000,0.600000000000000,0.630000000000000,0.660000000000000,0.690000000000000,0.720000000000000,0.750000000000000,0.780000000000000,0.810000000000000,0.840000000000000,0.870000000000000,0.900000000000000,0.930000000000000,0.960000000000000,0.990000000000000,1.02000000000000,1.05000000000000,1.08000000000000,1.11000000000000,1.14000000000000,1.17000000000000,1.20000000000000,-1.20000000000000,-1.17000000000000,-1.14000000000000,-1.11000000000000,-1.08000000000000,-1.05000000000000,-1.02000000000000,-0.990000000000000,-0.960000000000000,-0.930000000000000,-0.900000000000000,-0.870000000000000,-0.840000000000000,-0.810000000000000,-0.780000000000000,-0.750000000000000,-0.720000000000000,-0.690000000000000,-0.660000000000000,-0.630000000000000,-0.600000000000000,-0.570000000000000,-0.540000000000000,-0.510000000000000,-0.480000000000000,-0.450000000000000,-0.420000000000000,-0.390000000000000,-0.360000000000000,-0.330000000000000,-0.300000000000000,-0.270000000000000,-0.240000000000000,-0.210000000000000,-0.180000000000000,-0.150000000000000,-0.120000000000000,-0.0900000000000001,-0.0600000000000001,-0.0300000000000000,0,0.0300000000000000,0.0600000000000001,0.0900000000000001,0.120000000000000,0.150000000000000,0.180000000000000,0.210000000000000,0.240000000000000,0.270000000000000,0.300000000000000,0.330000000000000,0.360000000000000,0.390000000000000,0.420000000000000,0.450000000000000,0.480000000000000,0.510000000000000,0.540000000000000,0.570000000000000,0.600000000000000,0.630000000000000,0.660000000000000,0.690000000000000,0.720000000000000,0.750000000000000,0.780000000000000,0.810000000000000,0.840000000000000,0.870000000000000,0.900000000000000,0.930000000000000,0.960000000000000,0.990000000000000,1.02000000000000,1.05000000000000,1.08000000000000,1.11000000000000,1.14000000000000,1.17000000000000,1.20000000000000,-1.20000000000000,-1.17000000000000,-1.14000000000000,-1.11000000000000,-1.08000000000000,-1.05000000000000,-1.02000000000000,-0.990000000000000,-0.960000000000000,-0.930000000000000,-0.900000000000000,-0.870000000000000,-0.840000000000000,-0.810000000000000,-0.780000000000000,-0.750000000000000,-0.720000000000000,-0.690000000000000,-0.660000000000000,-0.630000000000000,-0.600000000000000,-0.570000000000000,-0.540000000000000,-0.510000000000000,-0.480000000000000,-0.450000000000000,-0.420000000000000,-0.390000000000000,-0.360000000000000,-0.330000000000000,-0.300000000000000,-0.270000000000000,-0.240000000000000,-0.210000000000000,-0.180000000000000,-0.150000000000000,-0.120000000000000,-0.0900000000000001,-0.0600000000000001,-0.0300000000000000,0,0.0300000000000000,0.0600000000000001,0.0900000000000001,0.120000000000000,0.150000000000000,0.180000000000000,0.210000000000000,0.240000000000000,0.270000000000000,0.300000000000000,0.330000000000000,0.360000000000000,0.390000000000000,0.420000000000000,0.450000000000000,0.480000000000000,0.510000000000000,0.540000000000000,0.570000000000000,0.600000000000000,0.630000000000000,0.660000000000000,0.690000000000000,0.720000000000000,0.750000000000000,0.780000000000000,0.810000000000000,0.840000000000000,0.870000000000000,0.900000000000000,0.930000000000000,0.960000000000000,0.990000000000000,1.02000000000000,1.05000000000000,1.08000000000000,1.11000000000000,1.14000000000000,1.17000000000000,1.20000000000000,-1.20000000000000,-1.17000000000000,-1.14000000000000,-1.11000000000000,-1.08000000000000,-1.05000000000000,-1.02000000000000,-0.990000000000000,-0.960000000000000,-0.930000000000000,-0.900000000000000,-0.870000000000000,-0.840000000000000,-0.810000000000000,-0.780000000000000,-0.750000000000000,-0.720000000000000,-0.690000000000000,-0.660000000000000,-0.630000000000000,-0.600000000000000,-0.570000000000000,-0.540000000000000,-0.510000000000000,-0.480000000000000,-0.450000000000000,-0.420000000000000,-0.390000000000000,-0.360000000000000,-0.330000000000000,-0.300000000000000,-0.270000000000000,-0.240000000000000,-0.210000000000000,-0.180000000000000,-0.150000000000000,-0.120000000000000,-0.0900000000000001,-0.0600000000000001,-0.0300000000000000,0,0.0300000000000000,0.0600000000000001,0.0900000000000001,0.120000000000000,0.150000000000000,0.180000000000000,0.210000000000000,0.240000000000000,0.270000000000000,0.300000000000000,0.330000000000000,0.360000000000000,0.390000000000000,0.420000000000000,0.450000000000000,0.480000000000000,0.510000000000000,0.540000000000000,0.570000000000000,0.600000000000000,0.630000000000000,0.660000000000000,0.690000000000000,0.720000000000000,0.750000000000000,0.780000000000000,0.810000000000000,0.840000000000000,0.870000000000000,0.900000000000000,0.930000000000000,0.960000000000000,0.990000000000000,1.02000000000000,1.05000000000000,1.08000000000000,1.11000000000000,1.14000000000000,1.17000000000000,1.20000000000000 };
		int level_map_check_index = 405;

		back_D = 100;
		for (int map_paragraph_index = 0; map_paragraph_index < 5; map_paragraph_index++)
		{
			for (int map_idx = 0;map_idx < 81;map_idx++)
			{
				double vir_x = level_map_check_back_x[map_idx + 81 * map_paragraph_index] * cos(End[2]) - level_map_check_back_y[map_idx + 81 * map_paragraph_index] * sin(End[2]) + End[0];
				double vir_y = level_map_check_back_y[map_idx + 81 * map_paragraph_index] * cos(End[2]) + level_map_check_back_x[map_idx + 81 * map_paragraph_index] * sin(End[2]) + End[1];
				int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
				int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
				if (idx_x == 0)
				{
					idx_x = 1;
				}
				if (idx_y == 0)
				{
					idx_y = 1;
				}
				int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
				if (obstmap[index_xy].Status == 0)
				{
					back_D = map_paragraph_index;
					break;
				}
			}
			if (back_D < 10)
			{
				break;
			}
		}

		front_D = 100;
		for (int map_paragraph_index = 0; map_paragraph_index < 5; map_paragraph_index++)
		{
			for (int map_idx = 0;map_idx < 81;map_idx++)
			{
				double vir_x = level_map_check_front_x[map_idx + 81 * map_paragraph_index] * cos(End[2]) - level_map_check_front_y[map_idx + 81 * map_paragraph_index] * sin(End[2]) + End[0];
				double vir_y = level_map_check_front_y[map_idx + 81 * map_paragraph_index] * cos(End[2]) + level_map_check_front_x[map_idx + 81 * map_paragraph_index] * sin(End[2]) + End[1];
				int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
				int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
				if (idx_x == 0)
				{
					idx_x = 1;
				}
				if (idx_y == 0)
				{
					idx_y = 1;
				}
				int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
				if (obstmap[index_xy].Status == 0)
				{
					front_D = map_paragraph_index;
					break;
				}
			}
			if (front_D < 10)
			{
				break;
			}
		}
		back_path = -1 * (0.2 + (back_D) * 0.1 + 0.1);
		front_path = 0.2 + (front_D) * 0.1 + 0.1 + 0.1;

		double level_map_check_back_x_imagmap[125] = {};
		double level_map_check_back_y_imagmap[125] = { -1.20000000000000,-1.10000000000000,-1,-0.900000000000000,-0.800000000000000,-0.700000000000000,-0.600000000000000,-0.500000000000000,-0.400000000000000,-0.300000000000000,-0.200000000000000,-0.0999999999999999,2.22044604925031e-16,0.100000000000000,0.200000000000000,0.300000000000000,0.400000000000000,0.500000000000000,0.600000000000000,0.700000000000000,0.800000000000000,0.900000000000000,1.00000000000000,1.10000000000000,1.20000000000000,-1.20000000000000,-1.10000000000000,-1,-0.900000000000000,-0.800000000000000,-0.700000000000000,-0.600000000000000,-0.500000000000000,-0.400000000000000,-0.300000000000000,-0.200000000000000,-0.0999999999999999,2.22044604925031e-16,0.100000000000000,0.200000000000000,0.300000000000000,0.400000000000000,0.500000000000000,0.600000000000000,0.700000000000000,0.800000000000000,0.900000000000000,1.00000000000000,1.10000000000000,1.20000000000000,-1.20000000000000,-1.10000000000000,-1,-0.900000000000000,-0.800000000000000,-0.700000000000000,-0.600000000000000,-0.500000000000000,-0.400000000000000,-0.300000000000000,-0.200000000000000,-0.0999999999999999,2.22044604925031e-16,0.100000000000000,0.200000000000000,0.300000000000000,0.400000000000000,0.500000000000000,0.600000000000000,0.700000000000000,0.800000000000000,0.900000000000000,1.00000000000000,1.10000000000000,1.20000000000000,-1.20000000000000,-1.10000000000000,-1,-0.900000000000000,-0.800000000000000,-0.700000000000000,-0.600000000000000,-0.500000000000000,-0.400000000000000,-0.300000000000000,-0.200000000000000,-0.0999999999999999,2.22044604925031e-16,0.100000000000000,0.200000000000000,0.300000000000000,0.400000000000000,0.500000000000000,0.600000000000000,0.700000000000000,0.800000000000000,0.900000000000000,1.00000000000000,1.10000000000000,1.20000000000000,-1.20000000000000,-1.10000000000000,-1,-0.900000000000000,-0.800000000000000,-0.700000000000000,-0.600000000000000,-0.500000000000000,-0.400000000000000,-0.300000000000000,-0.200000000000000,-0.0999999999999999,2.22044604925031e-16,0.100000000000000,0.200000000000000,0.300000000000000,0.400000000000000,0.500000000000000,0.600000000000000,0.700000000000000,0.800000000000000,0.900000000000000,1.00000000000000,1.10000000000000,1.20000000000000 };
		int level_map_check_index_imagmap = 125;
		int back_D_imagmap = 100;
		for (int map_paragraph_index = 0; map_paragraph_index < 5; map_paragraph_index++)
		{
			for (int map_idx = 0;map_idx < 25;map_idx++)
			{
				double vir_x = level_map_check_back_x_imagmap[map_idx + 25 * map_paragraph_index] * cos(End[2]) - level_map_check_back_y_imagmap[map_idx + 25 * map_paragraph_index] * sin(End[2]) + End[0];
				double vir_y = level_map_check_back_y_imagmap[map_idx + 25 * map_paragraph_index] * cos(End[2]) + level_map_check_back_x_imagmap[map_idx + 25 * map_paragraph_index] * sin(End[2]) + End[1];
				int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
				int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
				if (idx_x == 0)
				{
					idx_x = 1;
				}
				if (idx_y == 0)
				{
					idx_y = 1;
				}
				int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
				if (obstmap[index_xy].Status == 0)
				{
					back_D_imagmap = map_paragraph_index;
					break;
				}
			}
			if (back_D_imagmap < 10)
			{
				break;
			}
		}
	}
}

void is_Completed()
{
	double Start_Complete[3] = { 0, 0, 0 };
	Start_Complete[2] = Start[2] - End[2];
	origin_transformation_l(Start[0], Start[1], End[0], End[1], End[2]);
	Start_Complete[0] = X_local;
	Start_Complete[1] = Y_local;
	double Complete_x = 0.3;
	double Complete_y = 0.15;
	double Complete_theta = 0.017453292519943 * 2;
	if (plan_request == 2u)
	{
		if (app.APA_Park_Function == 2)
		{
			Complete_x = 5;
			Complete_y = 0.8;
			Complete_theta = 0.017453292519943 * 5;
		}
		else if (fusion.parkingSpaceInfo.ParkingSpaceType == 3)
		{
			Complete_x = 0.5;
		}
		else if (fusion.parkingSpaceInfo.ParkingSpaceType == 2)
		{
			Complete_x = 0.15;
			Complete_y = 0.31;
		}
		if ((fabs(Start_Complete[0]) < Complete_x) && (fabs(Start_Complete[1]) < Complete_y) && (fabs(Start_Complete[2]) < Complete_theta))
		{
			plan.IsPlanningCompleted = 1;
			plan.TrajectoryLength = 0;
			for (int clear_index = 0; clear_index < 300; clear_index++)    // 多余的结构体“置0”
			{
				plan.coordinate[clear_index].Yaw = 0;
				plan.coordinate[clear_index].X = 0;
				plan.coordinate[clear_index].Y = 0;
				plan.coordinate[clear_index].rajectoryDirection = 0;
				plan.coordinate[clear_index].Curvature = 0;
			}
		}
		else
		{
			plan.IsPlanningCompleted = 0;
		}
	}
	else
	{
		plan.IsPlanningCompleted = 0;
	}
}

void hypathchange()
{
	End_before[0] = End[0];
	End_before[1] = End[1];
	End_before[2] = End[2];

	//int point_size = pathpoint.size();
	//LOG_WARNING("SSSSSSSSSSS_point_size=%d", point_size);
	//fflush(bydapa::common::Log::GetInstance()->fileptr());
	plan.TrajectoryLength = (pathpoint.size() - 1) * 10; // 计算路径长度
	plan.PlanningStatus = 1;                             // 规划完成标志位“置1”
	int PlanpointIndex = pathpoint.size();
	if (PlanpointIndex < 300)
	{
		PlanpointIndex = PlanpointIndex;
	}
	else
	{
		PlanpointIndex = 300;
	}
	for (int plan_i = 0; plan_i < PlanpointIndex; plan_i++)
	{
		// 与控制同一坐标系，不需要转换
		pathpoint[plan_i].x = pathpoint[plan_i].x * 100;  // x，y转化为cm
		pathpoint[plan_i].y = pathpoint[plan_i].y * 100;
		if (pathpoint[plan_i].D > 0)      // 档位信息与接口定义一致
		{
			pathpoint[plan_i].D = 1;
		}
		else if (pathpoint[plan_i].D < 0)
		{
			pathpoint[plan_i].D = 2;
		}
		if (pathpoint[plan_i].delta == 0)  // 曲率1/cm
		{
			pathpoint[plan_i].delta = 1 / 25000;
		}
		else if (pathpoint[plan_i].delta > 0)
		{
			pathpoint[plan_i].delta = tan(pathpoint[plan_i].delta) / (vehicle_parameters.WB * 100);
		}
		else if (pathpoint[plan_i].delta < 0)
		{
			pathpoint[plan_i].delta = tan(pathpoint[plan_i].delta) / (vehicle_parameters.WB * 100);
		}
		if (pathpoint[plan_i].th < 0)   // 航向角转化为0°到360°
		{
			pathpoint[plan_i].th = pathpoint[plan_i].th + 6.283185307179586;
		}
		plan.coordinate[plan_i].Yaw = pathpoint[plan_i].th * 57.295779513082323;
		plan.coordinate[plan_i].X = pathpoint[plan_i].x;
		plan.coordinate[plan_i].Y = pathpoint[plan_i].y;
		plan.coordinate[plan_i].Curvature = (double)pathpoint[plan_i].delta;
		if (plan_i == 0)               // 第一个点档位赋值为第二点档位，档位变为走到下一点时所需档位
		{
			plan.coordinate[0].rajectoryDirection = (uint8)pathpoint[1].D;
		}
		else
		{
			plan.coordinate[plan_i - 1].rajectoryDirection = (uint8)pathpoint[plan_i].D;
		}
	}
	plan.coordinate[0].Curvature = (double)pathpoint[1].delta;  // 起点曲率赋值
	if (plan.coordinate[PlanpointIndex - 2].rajectoryDirection == 1)  //最后一点档位反向
	{
		plan.coordinate[PlanpointIndex - 1].rajectoryDirection = 2;
	}
	else if (plan.coordinate[PlanpointIndex - 2].rajectoryDirection == 2)
	{
		plan.coordinate[PlanpointIndex - 1].rajectoryDirection = 1;
	}

	for (int clear_i = PlanpointIndex; clear_i < 300; clear_i++)    // 多余的结构体“置0”
	{
		plan.coordinate[clear_i].Yaw = 0;
		plan.coordinate[clear_i].X = 0;
		plan.coordinate[clear_i].Y = 0;
		plan.coordinate[clear_i].rajectoryDirection = 0;
		plan.coordinate[clear_i].Curvature = 0;
	}

	
	//point_size = pathpoint.size();
	Gears = plan.coordinate[0].rajectoryDirection;
	//LOG_WARNING("EEEEEEEEEEE_point_size=%d", point_size);
	//fflush(bydapa::common::Log::GetInstance()->fileptr());
}

int hypathchangeSE()
{
	End_before[0] = End[0];
	End_before[1] = End[1];
	End_before[2] = End[2];

	int PlanpointIndex = pathpoint.size();

	plan.TrajectoryLength = (pathpoint.size() - 1) * 10; // 计算路径长度
	plan.PlanningStatus = 1;                             // 规划完成标志位“置1”

	for (int plan_i = 0; plan_i < pathpoint.size(); plan_i++)
	{
		// 与控制同一坐标系，不需要转换
		// 转换为接口定义的数据结构
		pathpoint[plan_i].x = pathpoint[plan_i].x * 100;  // x，y转化为cm
		pathpoint[plan_i].y = pathpoint[plan_i].y * 100;
		if (pathpoint[plan_i].D > 0)      // 档位信息与接口定义一致
		{
			pathpoint[plan_i].D = 2;
		}
		else if (pathpoint[plan_i].D < 0)
		{
			pathpoint[plan_i].D = 1;
		}
		if (pathpoint[plan_i].delta == 0)  // 曲率1/cm
		{
			pathpoint[plan_i].delta = 1 / 25000;
		}
		else if (pathpoint[plan_i].delta > 0)
		{
			pathpoint[plan_i].delta = tan(pathpoint[plan_i].delta) / (vehicle_parameters.WB * 100);
		}
		else if (pathpoint[plan_i].delta < 0)
		{
			pathpoint[plan_i].delta = tan(pathpoint[plan_i].delta) / (vehicle_parameters.WB * 100);
		}
		if (pathpoint[plan_i].th < 0)   // 航向角转化为0°到360°
		{
			pathpoint[plan_i].th = pathpoint[plan_i].th + 6.283185307179586;
		}
		// 将300点内的路径传输到总线
		if (PlanpointIndex - 1 - plan_i < 300)
		{
			plan.coordinate[PlanpointIndex - 1 - plan_i].Yaw = pathpoint[plan_i].th * 57.295779513082323;
			plan.coordinate[PlanpointIndex - 1 - plan_i].X = pathpoint[plan_i].x;
			plan.coordinate[PlanpointIndex - 1 - plan_i].Y = pathpoint[plan_i].y;
			plan.coordinate[PlanpointIndex - 1 - plan_i].rajectoryDirection = (uint8)pathpoint[plan_i].D;
			plan.coordinate[PlanpointIndex - 1 - plan_i + 1].Curvature = (double)pathpoint[plan_i].delta;
		}
	}	

	if ((plan.coordinate[0].rajectoryDirection != plan.coordinate[1].rajectoryDirection) && (plan.coordinate[1].rajectoryDirection == plan.coordinate[2].rajectoryDirection) && (plan.coordinate[2].rajectoryDirection != 0))
	{
		for (int idx = 0; idx < 299; idx++)
		{
			plan.coordinate[idx].Yaw = plan.coordinate[idx + 1].Yaw;
			plan.coordinate[idx].X = plan.coordinate[idx + 1].X;
			plan.coordinate[idx].Y = plan.coordinate[idx + 1].Y;
			plan.coordinate[idx].rajectoryDirection = plan.coordinate[idx + 1].rajectoryDirection;
			plan.coordinate[idx].Curvature = plan.coordinate[idx + 1].Curvature;
		}
		PlanpointIndex = PlanpointIndex - 1;
	}

	Gears = plan.coordinate[0].rajectoryDirection;

	if (PlanpointIndex < 300)
	{
		plan.coordinate[0].Curvature = plan.coordinate[1].Curvature;
		plan.coordinate[PlanpointIndex].Curvature = 0;

		if (plan.coordinate[PlanpointIndex - 2].rajectoryDirection == 1)  //最后一点档位反向
		{
			plan.coordinate[PlanpointIndex - 1].rajectoryDirection = 2;
		}
		else if (plan.coordinate[PlanpointIndex - 2].rajectoryDirection == 2)
		{
			plan.coordinate[PlanpointIndex - 1].rajectoryDirection = 1;
		}

		for (int clear_i = PlanpointIndex; clear_i < 300; clear_i++)    // 多余的结构体“置0”
		{
			plan.coordinate[clear_i].Yaw = 0;
			plan.coordinate[clear_i].X = 0;
			plan.coordinate[clear_i].Y = 0;
			plan.coordinate[clear_i].rajectoryDirection = 0;
			plan.coordinate[clear_i].Curvature = 0;
		}
		return 0;
	}
	else
	{
		plan.coordinate[0].Curvature = plan.coordinate[1].Curvature;
		if (plan.coordinate[300 - 2].rajectoryDirection == 1)  //最后一点档位反向
		{
			plan.coordinate[300 - 1].rajectoryDirection = 2;
		}
		else if (plan.coordinate[300 - 2].rajectoryDirection == 2)
		{
			plan.coordinate[300 - 1].rajectoryDirection = 1;
		}
		return 1;
	}
}

int OnlyOne()
{
	for (int plan_i = 2; plan_i < pathpoint.size(); plan_i++)
	{
		if ((pathpoint[plan_i - 1].D == pathpoint[plan_i].D) && (pathpoint[plan_i - 1].D !=0))
		{
			
		}
		else
		{
			return 0;
		}
	}
	return 1;
}

void StateClear()
{
	pathpoint.clear();//路 集合清空
	if ((app.APAStatus == 0u) || (app.APAStatus == 1u) || (app.APAStatus == 4u) || (app.APAStatus == 5u) || (app.APAStatus == 6u) || (app.APAStatus == 7u)) // 初始化路径规划标志位
	{
		PathLong = 0;
		PlanOnlyOne = 0;
		PathOnlyOneNow = 0;
		// 2022.12.06:增加全局变量清空
		Start_last[0] = 0;
		Start_last[1] = 0;
		Start_last[2] = 0;
		
		StartRecordFlag = 0;
		d_s2s = 0;
		d_s2e = 0;
		d_phi = 0;
		// 2022.12.06
		plan_request = 0u;
		fusion.TraceParkingID_Cam = 0u;
		fusion.TraceParkingID_USS = 0u;
		small_level_park = 0;

		End_before[0] = 0;
		End_before[1] = 0;
		End_before[2] = 0;
		bbb = 0;
		ccc = 0;
		control.ObsUssInfo = 255u;
		ctrl_nav_x = 0;
		ctrl_nav_y = 0;
	}
}

void ErrorLog()
{
	LOG_ERROR("start_end_get_ErrorCode=%d", 1);
	LOG_ERROR("fusion.position=%lf,%lf,%lf", fusion.position.X, fusion.position.Y, fusion.position.Heading);
	LOG_ERROR("nav_pos=%lf,%lf,%lf", calculation.nav_pos_X, calculation.nav_pos_Y, calculation.nav_heading);
	LOG_ERROR("fusion.Theta=%lf", fusion.Theta);
	LOG_ERROR("P0=%d,%d", fusion.parkingSpaceInfo.P0_X, fusion.parkingSpaceInfo.P0_Y);
	LOG_ERROR("P1=%d,%d", fusion.parkingSpaceInfo.P1_X, fusion.parkingSpaceInfo.P1_Y);
	LOG_ERROR("P2=%d,%d", fusion.parkingSpaceInfo.P2_X, fusion.parkingSpaceInfo.P2_Y);
	LOG_ERROR("P3=%d,%d", fusion.parkingSpaceInfo.P3_X, fusion.parkingSpaceInfo.P3_Y);
	LOG_ERROR("PlanningStatus=%d", plan.PlanningStatus);
	LOG_ERROR("fusion.TraceParkingID_Cam=%d", fusion.TraceParkingID_Cam);
	LOG_ERROR("fusion.TraceParkingID_USS=%d", fusion.TraceParkingID_USS);
}

void InformationLog()
{
	fprintf(pF, "规划的路径");
	//fflush(pF);
	fprintf(pF, "index_request=%d\n", index_request);
	//fflush(pF);
	fprintf(pF, "plan_request=%d,planstus=%d\n", plan_request,(int)plan.PlanningStatus);
	//fflush(pF);
	fprintf(pF, "fusion.depth_block=%lf,b_depth=%lf\n", fusion.depth_block, b_depth);
	//fflush(pF);
	fprintf(pF, "fusion.position=%lf,%lf,%lf\n", fusion.position.X, fusion.position.Y, fusion.position.Heading);
	//fflush(pF);
	fprintf(pF, "nav_pos=%lf,%lf,%lf\n", calculation.nav_pos_X, calculation.nav_pos_Y, calculation.nav_heading);
	//fflush(pF);
	fprintf(pF, "P0=%d,%d\n", fusion.parkingSpaceInfo.P0_X, fusion.parkingSpaceInfo.P0_Y);
	//fflush(pF);
	fprintf(pF, "P1=%d,%d\n", fusion.parkingSpaceInfo.P1_X, fusion.parkingSpaceInfo.P1_Y);
	//fflush(pF);
	fprintf(pF, "P2=%d,%d\n", fusion.parkingSpaceInfo.P2_X, fusion.parkingSpaceInfo.P2_Y);
	//fflush(pF);
	fprintf(pF, "P3=%d,%d\n", fusion.parkingSpaceInfo.P3_X, fusion.parkingSpaceInfo.P3_Y);
	//fflush(pF);
	fprintf(pF, "P0_plan=%lf,%lf\n", P0x, P0y);
	//fflush(pF);
	fprintf(pF, "P1_plan=%lf,%lf\n", P1x, P1y);
	//fflush(pF);
	fprintf(pF, "P2_plan=%lf,%lf\n", P2x, P2y);
	//fflush(pF);
	fprintf(pF, "P3_plan=%lf,%lf\n", P3x, P3y);
	//fflush(pF);
//	fprintf(pF, "ObstacleType=%d\n", fusion.obstacleInfo2.ObstacleType);
//	fflush(pF);
	fprintf(pF, "Gears=%d\n", Gears);
	//fflush(pF);
	fprintf(pF, "fusion.Theta=%lf,\n", fusion.Theta);
	//fflush(pF);
	fprintf(pF, "start=%lf, %lf, %lf,\n", Start[0], Start[1], Start[2]);
	//fflush(pF);
	fprintf(pF, "end=%lf, %lf, %lf,\n", End[0], End[1], End[2]);
	//fflush(pF);
	fprintf(pF, "ObsUssInfo=%d,\n", control.ObsUssInfo);
	//fflush(pF);
	fprintf(pF, "IsPlanningCompleted=%d,\n", plan.IsPlanningCompleted);
	//fflush(pF);
	fprintf(pF, "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\n");
	//fflush(pF);
	for (int map_i = 0; map_i < 62500; map_i++)
	{
		fprintf(pF, "%d,", (int)obstmap[map_i].Status);
		//fflush(pF);
	}
	fprintf(pF, "\n");
	//fflush(pF);
	fprintf(pF, "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\n");
	//fflush(pF);
	fprintf(pF, "fusion.parkingSpaceInfo.ParkingSpaceType=%d,app.APA_Park_Function=%d\n", (int)fusion.parkingSpaceInfo.ParkingSpaceType, (int)app.APA_Park_Function);
	//fflush(pF);
	//for (int map_i = 0; map_i < 62500; map_i++)
	//{
		//fprintf(pF, "%d,", (int)obstmap[map_i].Status);
		//fflush(pF);
	//}
	//fprintf(pF, "fusion.parkingSpaceInfo.ParkingSpaceType\n");
	//fflush(pF);
	fprintf(pF, "End_level_small=%lf, %lf, %lf,\n", End_level_small[0], End_level_small[1], End_level_small[2]);
	fprintf(pF, "fusion.distance_01=%lf,fusion.distance_03=%lf,fusion.distance_23=%lf,\n", fusion.distance_01, fusion.distance_03, fusion.distance_23);
	//fflush(pF);
	

}

void PlanLog()
{
	fprintf(pF, "small_level_park=%d,", small_level_park);
	fprintf(pF, "CloseSizeMax=%d,\n", CloseSizeMax); // 统计close集合大小
	//fflush(pF);
	fprintf(pF, "nseconds_time=%lf,\n", nseconds); // 记录算法计算时间
	//fflush(pF);
	fprintf(pF, "b_depth=%lf, ctrl_nav_x=%lf, ctrl_nav_y=%lf, ccc=%d", b_depth, ctrl_nav_x, ctrl_nav_y, ccc);
	fprintf(pF, "PlanOnlyOne=%d,\n", PlanOnlyOne);
	//fflush(pF);
	fprintf(pF, "End_level_small=%lf, %lf, %lf,", End_level_small[0], End_level_small[1], End_level_small[2]);
	fprintf(pF, "PathOnlyOneNow=%d,\n", PathOnlyOneNow);
	//fflush(pF);
	fprintf(pF, "SEorES=%d,\n", SEorES); // 正反向搜索
	//fflush(pF);
	fprintf(pF, "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\n");
	//fflush(pF);
	#ifndef LOG_ALL
	for (int txt_i = 0; txt_i < 300; txt_i++)
	{
		fprintf(pF, "%lf,%lf,%lf,%lf,%d\n", plan.coordinate[txt_i].X, plan.coordinate[txt_i].Y, plan.coordinate[txt_i].Yaw, plan.coordinate[txt_i].Curvature, plan.coordinate[txt_i].rajectoryDirection);
		//fflush(pF);
	}
	#else
	for (int txt_i = 0; txt_i < int(expanded_points.size()); txt_i++)
	{
		if (expanded_points[txt_i].theta < 0)   // 航向角转化为0°到360°
			{
				expanded_points[txt_i].theta = expanded_points[txt_i].theta + 6.283185307179586;
			}
		expanded_points[txt_i].theta=expanded_points[txt_i].theta* 57.295779513082323;
		fprintf(pF, "%lf,%lf,%lf\n", expanded_points[txt_i].x*100, expanded_points[txt_i].y*100, expanded_points[txt_i].theta);
		//fflush(pF);
	}
	#endif
	fprintf(pF, "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\n");
	//fflush(pF);
}

void Uss_map()
{
	double Uss_x;
	double Uss_y;
	if ((control.ObsUssInfo == 0u)|| (control.ObsUssInfo == 1u)|| (control.ObsUssInfo == 2u)|| (control.ObsUssInfo == 3u)|| (control.ObsUssInfo == 6u)|| (control.ObsUssInfo == 7u)|| (control.ObsUssInfo == 8u)|| (control.ObsUssInfo == 9u))
	{
		int control_ob = control.ObsUssInfo;
		Uss_x = upa_x[control_ob];
		Uss_y = upa_y[control_ob];
		double vir_x;
		double vir_y;
		vir_x = Uss_x * cos(Start[2]) - Uss_y * sin(Start[2]) + Start[0];
		vir_y = Uss_y * cos(Start[2]) + Uss_x * sin(Start[2]) + Start[1];
		/***************************************/
		double P_mean_x = (P0x + P1x + P2x + P3x) / 4;
		double P_mean_y = (P0y + P1y + P2y + P3y) / 4;
		double D_P0_mean = sqrt((P_mean_x - P0x)*(P_mean_x - P0x) + (P_mean_y - P0y)*(P_mean_y - P0y));
		double D_P1_mean = sqrt((P_mean_x - P1x)*(P_mean_x - P1x) + (P_mean_y - P1y)*(P_mean_y - P1y));
		double D_P2_mean = sqrt((P_mean_x - P2x)*(P_mean_x - P2x) + (P_mean_y - P2y)*(P_mean_y - P2y));
		double D_P3_mean = sqrt((P_mean_x - P3x)*(P_mean_x - P3x) + (P_mean_y - P3y)*(P_mean_y - P3y));
		double D_P1P0 = sqrt((P1x - P0x)*(P1x - P0x) + (P1y - P0y)*(P1y - P0y));
		double D_P2P3 = sqrt((P2x - P3x)*(P2x - P3x) + (P2y - P3y)*(P2y - P3y));
		if ((D_P0_mean < 0.1) && (D_P1_mean < 0.1) && (D_P2_mean < 0.1) && (D_P3_mean < 0.1) && (D_P1P0 < 0.1) && (D_P2P3 < 0.1))
		{
			return;
		}
		double cos_theta_P0 = (P_mean_x - P0x) / D_P0_mean;
		double sin_theta_P0 = (P_mean_y - P0y) / D_P0_mean;
		double cos_theta_P1 = (P_mean_x - P1x) / D_P1_mean;
		double sin_theta_P1 = (P_mean_y - P1y) / D_P1_mean;
		double cos_theta_P2 = (P_mean_x - P2x) / D_P2_mean;
		double sin_theta_P2 = (P_mean_y - P2y) / D_P2_mean;
		double cos_theta_P3 = (P_mean_x - P3x) / D_P3_mean;
		double sin_theta_P3 = (P_mean_y - P3y) / D_P3_mean;
		double P0x_imag = P_mean_x - (D_P0_mean * 1.2) * cos_theta_P0;
		double P0y_imag = P_mean_y - (D_P0_mean * 1.2) * sin_theta_P0;
		double P1x_imag = P_mean_x - (D_P1_mean * 1.2) * cos_theta_P1;
		double P1y_imag = P_mean_y - (D_P1_mean * 1.2) * sin_theta_P1;
		double P2x_imag = P_mean_x - (D_P2_mean * 1.2) * cos_theta_P2;
		double P2y_imag = P_mean_y - (D_P2_mean * 1.2) * sin_theta_P2;
		double P3x_imag = P_mean_x - (D_P3_mean * 1.2) * cos_theta_P3;
		double P3y_imag = P_mean_y - (D_P3_mean * 1.2) * sin_theta_P3;
		if (fusion.parkingSpaceInfo.ParkingSpaceType == 1)
		{
			P0x_imag = P0x_imag + 1 * cos(End[2]);
			P0y_imag = P0y_imag + 1 * sin(End[2]);
			P3x_imag = P3x_imag + 1 * cos(End[2]);
			P3y_imag = P3y_imag + 1 * sin(End[2]);
		}
		else if (fusion.parkingSpaceInfo.ParkingSpaceType == 2)
		{
			double cos_theta_P1P0 = (P0x - P1x) / D_P1P0;
			double sin_theta_P1P0 = (P0y - P1y) / D_P1P0;
			double cos_theta_P2P3 = (P3x - P2x) / D_P2P3;
			double sin_theta_P2P3 = (P3y - P2y) / D_P2P3;
			P0x_imag = P0x + 1 * cos_theta_P1P0;
			P0y_imag = P0y + 1 * sin_theta_P1P0;
			P3x_imag = P3x + 1 * cos_theta_P2P3;
			P3y_imag = P3y + 1 * sin_theta_P2P3;
			P1x_imag = P1x - 0.3 * cos_theta_P1P0;
			P1y_imag = P1y - 0.3 * sin_theta_P1P0;
			P2x_imag = P2x - 0.3 * cos_theta_P2P3;
			P2y_imag = P2y - 0.3 * sin_theta_P2P3;
		}
		double S_01 = (P1x_imag - P0x_imag) * (vir_y - P0y_imag) - (P1y_imag - P0y_imag) * (vir_x - P0x_imag);
		double S_12 = (P2x_imag - P1x_imag) * (vir_y - P1y_imag) - (P2y_imag - P1y_imag) * (vir_x - P1x_imag);
		double S_23 = (P3x_imag - P2x_imag) * (vir_y - P2y_imag) - (P3y_imag - P2y_imag) * (vir_x - P2x_imag);
		double S_30 = (P0x_imag - P3x_imag) * (vir_y - P3y_imag) - (P0y_imag - P3y_imag) * (vir_x - P3x_imag);
		if (((S_01 >= 0) && (S_12 >= 0) && (S_23 >= 0) && (S_30 >= 0)) || ((S_01 <= 0) && (S_12 <= 0) && (S_23 <= 0) && (S_30 <= 0)))
		{
			return;
		}
		else
		{
			int idx_x = ceil((pathfind_parameters.MAXX - vir_x) / pathfind_parameters.MOTION_RESOLUTION);
			int idx_y = ceil((pathfind_parameters.MAXY - vir_y) / pathfind_parameters.MOTION_RESOLUTION);
			if (idx_x == 0)
			{
				idx_x = 1;
			}
			if (idx_y == 0)
			{
				idx_y = 1;
			}
			int index_xy = (idx_x - 1) * 250 + (idx_y - 1);
			if ((index_xy >= 0) && (index_xy < 62500) && (idx_x >= 0) && (idx_x <= 250) && (idx_y >= 0) && (idx_y <= 250))
			{
				obstmap[index_xy].Status = 4;
			}
		}
	}
}

void ParkingVertical()
{
	if (fusion.parkingSpaceInfo.ParkingSpaceType == 1)
	{
		//pathfind_parameters.H_COST = 1;
		if (dynamic_vertical(Start, End) != 0)
		{
			cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!1" << endl;
			PathOnlyOneNow = OnlyOne();
			//2022.12.06
			if(PathOnlyOneNow){
				StartRecordFlag = 1;
			}
			//2022.12.06
			hypathchange(); // 将得到的路规范化
			PlanLog();  // 规划信息日志
		}

		else if (HybridAStar(Start, End) == 1) //正向规划
		{
			cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!2" << endl;
			PathOnlyOneNow = OnlyOne();
			//2022.12.07:不进入动态规划的问题？
			if(PathOnlyOneNow){
				StartRecordFlag = 1;
			}
			//2022.12.07
			hypathchange();
			PlanLog();  // 规划信息日志
		}
		else
		{
			SEorES = 1;
			//pathfind_parameters.H_COST = 2;
			if (HybridAStar(Start, End) == 1) //反向规划
			{
				cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!3" << endl;
				PathOnlyOneNow = OnlyOne();
				//2022.12.07:不进入动态规划的问题？
			    if(PathOnlyOneNow){
				    StartRecordFlag = 1;
			    }
			    //2022.12.07
				int SE = hypathchangeSE();  // 将得到的路规范化
				PlanLog();  // 规划信息日志
			}
			else
			{
				cout << "??????????????????????????" << endl;
				plan.PlanningStatus = 2;
			}
		}
	}
	
}

void ParkingLevel()
{
	if (app.APA_Park_Function == 2)
	{
		/////////////////////////////先倒车1.5m/////////////////////////////
		if ((index_request == 1) && (control.ObsUssInfo != 6u) && (control.ObsUssInfo != 7u) && (control.ObsUssInfo != 8u) && (control.ObsUssInfo != 9u))
		{
			for (int clear_index = 0; clear_index < 300; clear_index++)    // 多余的结构体“置0”
			{
				plan.coordinate[clear_index].Yaw = 0;
				plan.coordinate[clear_index].X = 0;
				plan.coordinate[clear_index].Y = 0;
				plan.coordinate[clear_index].rajectoryDirection = 0;
				plan.coordinate[clear_index].Curvature = 0;
			}

			pathpoint.clear();

			double optional_park = 1.5;
			double D_optional_park = -0.1;
			double D_optional_park_ = 0.1;
			double delta_optional_park = atan(vehicle_parameters.WB / 1000000);
			path_point mid_optional_park;
			mid_optional_park.x = Start[0];
			mid_optional_park.y = Start[1];
			mid_optional_park.th = mod2pi(Start[2]);
			mid_optional_park.D = 0;
			mid_optional_park.delta = 0;
			pathpoint.push_back(mid_optional_park);
			for (int idx = 0; idx < round(fabs(optional_park) / pathfind_parameters.MOTION_RESOLUTION); idx++) // round()四舍五入
			{
				VehicleDynamic(mid_optional_park.x, mid_optional_park.y, mid_optional_park.th, D_optional_park, delta_optional_park); // 根据当前位姿和输入, 计算下一位置的位姿
				mid_optional_park.x = g_px;
				mid_optional_park.y = g_py;
				mid_optional_park.th = g_pth;
				mid_optional_park.D = D_optional_park;
				mid_optional_park.delta = delta_optional_park;
				pathpoint.push_back(mid_optional_park);
			}
			for (int idx = 0; idx < round(0.5 / pathfind_parameters.MOTION_RESOLUTION); idx++) // round()四舍五入
			{
				VehicleDynamic(mid_optional_park.x, mid_optional_park.y, mid_optional_park.th, D_optional_park_, delta_optional_park); // 根据当前位姿和输入, 计算下一位置的位姿
				mid_optional_park.x = g_px;
				mid_optional_park.y = g_py;
				mid_optional_park.th = g_pth;
				mid_optional_park.D = D_optional_park_;
				mid_optional_park.delta = delta_optional_park;
				pathpoint.push_back(mid_optional_park);
			}
			hypathchange(); // 将得到的路规范化
			PlanLog();  // 规划信息日志
		}
		////////////////////////////////////////////////////////////////////
		else
		{
			SEorES = 0;
			if (HybridAStar(Start, End) == 1) //正向规划
			{
				//cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!3" << endl;
				PathOnlyOneNow = OnlyOne();
				//2022.12.06
				if (PathOnlyOneNow) {
					StartRecordFlag = 1;
				}
				hypathchange();  // 将得到的路规范化
				PlanLog();  // 规划信息日志
			}
			else
			{
				//cout << "??????????????????????????" << endl;
				plan.PlanningStatus = 2;
			}
		}
	}
	else if (fusion.parkingSpaceInfo.ParkingSpaceType == 2)
	{
		int danamic_idx = 0;

		double Width_Level = sqrt((P0x - P1x)*(P0x - P1x)+ (P0y - P1y)*(P0y - P1y));
		double Width_diff = fabs(Width_Level - 2)/2;
		int index_Width = floor(Width_diff / 0.05);
		int index_Level_point = 1;
		if (index_Width > 2)
		{
			index_Width = 2;
		}
		
		if (index_Width == 1)
		{
			double x_level_imag_end[9] = { 0.00 , 0.05 , -0.05, 0.00 , 0.00 , 0.05 , 0.05 , -0.05, -0.05 };
			double y_level_imag_end[9] = { 0.00 , 0.00 , 0.00 , 0.05 , -0.05, 0.05 , -0.05, 0.05 , -0.05 };
			for (int i = 0; i < 9; i++)
			{
				double End_dynamic_Level[3] = { 0,0,0 };
				End_dynamic_Level[0] = x_level_imag_end[i] * cos(End[2]) - y_level_imag_end[i] * sin(End[2]) + End[0];
				End_dynamic_Level[1] = x_level_imag_end[i] * sin(End[2]) + y_level_imag_end[i] * cos(End[2]) + End[1];
				End_dynamic_Level[2] = End[2];
				if (dynamic_Level(Start, End_dynamic_Level) != 0)
				{

					//cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!1" << endl;
					PathOnlyOneNow = OnlyOne();
					hypathchange(); // 将得到的路规范化
					PlanLog();  // 规划信息日志
					danamic_idx = 1;
					break;
				}
			}
		}
		else
		{
			double x_level_imag_end[25] = { 0.00 , 0.05 , -0.05, 0.10, -0.10, 0.00 , 0.00 , 0.05 , 0.05 , -0.05, -0.05, 0.10, -0.10, 0.10 , -0.10, 0.00 , 0.05 , -0.05, 0.10 , -0.10, 0.00 , 0.05 , -0.05, 0.10 , -0.10 };
			double y_level_imag_end[25] = { 0.00 , 0.00 , 0.00 , 0.00, 0.00 , 0.05 , -0.05, 0.05 , -0.05, 0.05 , -0.05, 0.05, 0.05 , -0.05, -0.05, 0.10 , 0.10 , 0.10 , 0.10 , 0.10 , -0.10, -0.10, -0.10, -0.10, -0.10 };
			for (int i = 0; i < 25; i++)
			{
				double End_dynamic_Level[3] = { 0,0,0 };
				End_dynamic_Level[0] = x_level_imag_end[i] * cos(End[2]) - y_level_imag_end[i] * sin(End[2]) + End[0];
				End_dynamic_Level[1] = x_level_imag_end[i] * sin(End[2]) + y_level_imag_end[i] * cos(End[2]) + End[1];
				End_dynamic_Level[2] = End[2];

				if (dynamic_Level(Start, End_dynamic_Level) != 0)
				{
					//cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!1" << endl;
					PathOnlyOneNow = OnlyOne();
					hypathchange(); // 将得到的路规范化
					PlanLog();  // 规划信息日志
					danamic_idx = 1;
					break;
				}
			}
		}

		if (danamic_idx == 1)
		{

		}
		else if ((dynamic_Level(Start, End) != 0))
		{
			PathOnlyOneNow = OnlyOne();
			//2022.12.06
			if (PathOnlyOneNow) {
				StartRecordFlag = 1;
			}
			hypathchange(); // 将得到的路规范化
			PlanLog();  // 规划信息日志
		}
		else if (small_level_park == 0)
		{
			SEorES = 1;

			double level_parking_space = 5.8 + front_D * 0.1 + back_D * 0.1;
			if (level_parking_space > 6.66)
			{
				pathfind_parameters.H_COST = 1;
				pathfind_parameters.SB_COST = 1.0;
				End_level_small[0] = End[0];
				End_level_small[1] = End[1];
				End_level_small[2] = End[2];
			}
			else
			{
				End_level_small[0] = End[0] - (0.1)* cos(End[2]);
				End_level_small[1] = End[1] - (0.1)* sin(End[2]);
				End_level_small[2] = End[2];
				pathfind_parameters.H_COST = 1;
				pathfind_parameters.SB_COST = 1.0;
			}

			if (HybridAStar(Start, End_level_small) == 1) //反向规划
			{
				/*fprintf(pF, "QQQQQQQQQQQQQQPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\n");
				//fflush(pF);
				for (int txt_i = 0; txt_i < pathpoint.size(); txt_i++)
				{
					fprintf(pF, "%lf,%lf,%lf,%lf,%lf\n", pathpoint[txt_i].x, pathpoint[txt_i].y, pathpoint[txt_i].th, pathpoint[txt_i].delta, pathpoint[txt_i].D);
					//fflush(pF);
				}
				fprintf(pF, "QQQQQQQQQQQQQQQPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\n");*/
				cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!3" << endl;
				PathOnlyOneNow = OnlyOne();
				//2022.12.06
				if (PathOnlyOneNow) {
					StartRecordFlag = 1;
				}
				int SE = hypathchangeSE();  // 将得到的路规范化
				//////////////////////////////////自选水平车位第一段直行////////////////////////////////
				if ((index_request == 1) && (plan.PlanningStatus == 1) && (app.APA_Park_Function == 3) && ((plan.coordinate[0].rajectoryDirection == 2) || (End[0] - Start[0] > -1)))
				{
					for (int clear_index = 0; clear_index < 300; clear_index++)    // 多余的结构体“置0”
					{
						plan.coordinate[clear_index].Yaw = 0;
						plan.coordinate[clear_index].X = 0;
						plan.coordinate[clear_index].Y = 0;
						plan.coordinate[clear_index].rajectoryDirection = 0;
						plan.coordinate[clear_index].Curvature = 0;
					}

					pathpoint.clear();

					double optional_park = 8.3;
					double D_optional_park = 0.1;
					double D_optional_park_ = -0.1;
					double delta_optional_park = atan(vehicle_parameters.WB / 1000000);
					path_point mid_optional_park;
					mid_optional_park.x = Start[0];
					mid_optional_park.y = Start[1];
					mid_optional_park.th = mod2pi(Start[2]);
					mid_optional_park.D = 0;
					mid_optional_park.delta = 0;
					pathpoint.push_back(mid_optional_park);
					for (int idx = 0; idx < round(fabs(optional_park) / pathfind_parameters.MOTION_RESOLUTION); idx++) // round()四舍五入
					{
						VehicleDynamic(mid_optional_park.x, mid_optional_park.y, mid_optional_park.th, D_optional_park, delta_optional_park); // 根据当前位姿和输入, 计算下一位置的位姿
						mid_optional_park.x = g_px;
						mid_optional_park.y = g_py;
						mid_optional_park.th = g_pth;
						mid_optional_park.D = D_optional_park;
						mid_optional_park.delta = delta_optional_park;
						pathpoint.push_back(mid_optional_park);
					}
					for (int idx = 0; idx < round(0.5 / pathfind_parameters.MOTION_RESOLUTION); idx++) // round()四舍五入
					{
						VehicleDynamic(mid_optional_park.x, mid_optional_park.y, mid_optional_park.th, D_optional_park_, delta_optional_park); // 根据当前位姿和输入, 计算下一位置的位姿
						mid_optional_park.x = g_px;
						mid_optional_park.y = g_py;
						mid_optional_park.th = g_pth;
						mid_optional_park.D = D_optional_park_;
						mid_optional_park.delta = delta_optional_park;
						pathpoint.push_back(mid_optional_park);
					}
					hypathchange(); // 将得到的路规范化
				}
				///////////////////////////////////////////////////////////////////////////////////////
				PlanLog();  // 规划信息日志
			}
			else
			{
				cout << "??????????????????????????" << endl;
				plan.PlanningStatus = 2;
			}
		}
		else
		{
			plan.PlanningStatus = 2;
		}
	}
}

void ParkingOblique()
{
	if (fusion.parkingSpaceInfo.ParkingSpaceType == 3)
	{
		if (dynamic_Oblique(Start, End) != 0)
		{
			cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!1" << endl;
			PathOnlyOneNow = OnlyOne();
			if (PathOnlyOneNow) {
				StartRecordFlag = 1;
			}
			hypathchange(); // 将得到的路规范化
			PlanLog();  // 规划信息日志
		}

		else if (HybridAStar(Start, End) == 1) //正向规划
		{
			cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!2" << endl;
			PathOnlyOneNow = OnlyOne();
			if (PathOnlyOneNow) {
				StartRecordFlag = 1;
			}
			hypathchange();
			PlanLog();  // 规划信息日志
		}
		else
		{
			SEorES = 1;
			if (HybridAStar(Start, End) == 1) //反向规划
			{
				cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!3" << endl;
				PathOnlyOneNow = OnlyOne();
				if (PathOnlyOneNow) {
					StartRecordFlag = 1;
				}
				int SE = hypathchangeSE();  // 将得到的路规范化
				PlanLog();  // 规划信息日志
			}
			else
			{
				//cout << "??????????????????????????" << endl;
				plan.PlanningStatus = 2;
			}
		}
	}
}
