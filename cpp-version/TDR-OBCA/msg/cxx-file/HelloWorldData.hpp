/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  The generate program idlc named byd_idl has been modified by BYD
  File name: HelloWorldData.idl
  Source: HelloWorldData.hpp
  Cyclone DDS: v0.9.1

*****************************************************************/
#ifndef DDSCXX_HELLOWORLDDATA_HPP
#define DDSCXX_HELLOWORLDDATA_HPP

#include <cstdint>
#include <string>

namespace HelloWorldData
{
class Msg
{
private:
 int32_t userID_ = 0;
 std::string message_;

public:
  Msg() = default;

  explicit Msg(
    int32_t userID,
    const std::string& message) :
    userID_(userID),
    message_(message) { }

  int32_t userID() const { return this->userID_; }
  int32_t& userID() { return this->userID_; }
  void userID(int32_t _val_) { this->userID_ = _val_; }
  const std::string& message() const { return this->message_; }
  std::string& message() { return this->message_; }
  void message(const std::string& _val_) { this->message_ = _val_; }
  void message(std::string&& _val_) { this->message_ = _val_; }

  bool operator==(const Msg& _other) const
  {
    return userID_ == _other.userID_ &&
      message_ == _other.message_;
  }

  bool operator!=(const Msg& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::HelloWorldData::Msg>::getTypeName()
{
  return "HelloWorldData::dds_::Msg_";
}

template <> constexpr bool TopicTraits<::HelloWorldData::Msg>::isSelfContained()
{
  return false;
}

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::HelloWorldData::Msg>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::HelloWorldData::Msg>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::HelloWorldData::Msg)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
entity_properties_t get_type_props<::HelloWorldData::Msg>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::HelloWorldData::Msg& instance, entity_properties_t &props) {
  (void)instance;
  if (!streamer.start_struct(props))
    return false;
  bool firstcall = true;
  while (auto &prop = streamer.next_entity(props, firstcall)) {
    switch (prop.m_id) {
      case 0:
      if (!streamer.start_member(prop))
        return false;
      if (!write(streamer, instance.userID()))
        return false;
      if (!streamer.finish_member(prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(prop))
        return false;
      if (!write_string(streamer, instance.message(), 0))
        return false;
      if (!streamer.finish_member(prop))
        return false;
      break;
    }
  }
  return streamer.finish_struct(props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::HelloWorldData::Msg& instance, bool as_key) {
  auto props = get_type_props<::HelloWorldData::Msg>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::HelloWorldData::Msg& instance, entity_properties_t &props) {
  (void)instance;
  if (!streamer.start_struct(props))
    return false;
  bool firstcall = true;
  while (auto &prop = streamer.next_entity(props, firstcall)) {
    if (prop.ignore) {
      streamer.skip_entity(prop);
      continue;
    }
    switch (prop.m_id) {
      case 0:
      if (!streamer.start_member(prop))
        return false;
      if (!read(streamer, instance.userID()))
        return false;
      if (!streamer.finish_member(prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(prop))
        return false;
      if (!read_string(streamer, instance.message(), 0))
        return false;
      if (!streamer.finish_member(prop))
        return false;
      break;
      default:
      if (prop.must_understand_remote
       && streamer.status(must_understand_fail))
        return false;
      else
        streamer.skip_entity(prop);
      break;
    }
  }
  return streamer.finish_struct(props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::HelloWorldData::Msg& instance, bool as_key) {
  auto props = get_type_props<::HelloWorldData::Msg>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::HelloWorldData::Msg& instance, entity_properties_t &props) {
  (void)instance;
  if (!streamer.start_struct(props))
    return false;
  bool firstcall = true;
  while (auto &prop = streamer.next_entity(props, firstcall)) {
    switch (prop.m_id) {
      case 0:
      if (!streamer.start_member(prop))
        return false;
      if (!move(streamer, instance.userID()))
        return false;
      if (!streamer.finish_member(prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(prop))
        return false;
      if (!move_string(streamer, instance.message(), 0))
        return false;
      if (!streamer.finish_member(prop))
        return false;
      break;
    }
  }
  return streamer.finish_struct(props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::HelloWorldData::Msg& instance, bool as_key) {
  auto props = get_type_props<::HelloWorldData::Msg>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::HelloWorldData::Msg& instance, entity_properties_t &props) {
  (void)instance;
  if (!streamer.start_struct(props))
    return false;
  bool firstcall = true;
  while (auto &prop = streamer.next_entity(props, firstcall)) {
    switch (prop.m_id) {
      case 0:
      if (!streamer.start_member(prop))
        return false;
      if (!max(streamer, instance.userID()))
        return false;
      if (!streamer.finish_member(prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(prop))
        return false;
      if (!max_string(streamer, instance.message(), 0))
        return false;
      if (!streamer.finish_member(prop))
        return false;
      break;
    }
  }
  return streamer.finish_struct(props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::HelloWorldData::Msg& instance, bool as_key) {
  auto props = get_type_props<::HelloWorldData::Msg>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_HELLOWORLDDATA_HPP
